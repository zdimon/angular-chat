/* Modernizr 2.7.1 (Custom Build) | MIT & BSD
 * Build: http://modernizr.com/download/#-fontface-backgroundsize-borderimage-borderradius-boxshadow-flexbox-flexboxlegacy-hsla-multiplebgs-opacity-rgba-textshadow-cssanimations-csscolumns-generatedcontent-cssgradients-cssreflections-csstransforms-csstransforms3d-csstransitions-applicationcache-canvas-canvastext-draganddrop-hashchange-history-audio-video-indexeddb-input-inputtypes-localstorage-postmessage-sessionstorage-websockets-websqldatabase-webworkers-geolocation-inlinesvg-smil-svg-svgclippaths-touch-webgl-shiv-mq-cssclasses-addtest-prefixed-teststyles-testprop-testallprops-hasevent-prefixes-domprefixes-css_calc-load
 *
 * rePack WEZOM | Oleg Dutchenko | 07.11.2014
 *
 */
;



window.Modernizr = (function(window, document, undefined) {

    var version = '2.7.1',

        Modernizr = {},

        enableClasses = true,

        docElement = document.documentElement,

        mod = 'modernizr',
        modElem = document.createElement(mod),
        mStyle = modElem.style,

        inputElem = document.createElement('input'),

        smile = ':)',

        toString = {}.toString,

        prefixes = ' -webkit- -moz- -o- -ms- '.split(' '),



        omPrefixes = 'Webkit Moz O ms',

        cssomPrefixes = omPrefixes.split(' '),

        domPrefixes = omPrefixes.toLowerCase().split(' '),

        ns = {
            'svg': 'http://www.w3.org/2000/svg'
        },

        tests = {},
        inputs = {},
        attrs = {},

        classes = [],

        slice = classes.slice,

        featureName,


        injectElementWithStyles = function(rule, callback, nodes, testnames) {

            var style, ret, node, docOverflow,
                div = document.createElement('div'),
                body = document.body,
                fakeBody = body || document.createElement('body');

            if (parseInt(nodes, 10)) {
                while (nodes--) {
                    node = document.createElement('div');
                    node.id = testnames ? testnames[nodes] : mod + (nodes + 1);
                    div.appendChild(node);
                }
            }

            style = ['&#173;', '<style id="s', mod, '">', rule, '</style>'].join('');
            div.id = mod;
            (body ? div : fakeBody).innerHTML += style;
            fakeBody.appendChild(div);
            if (!body) {
                fakeBody.style.background = '';
                fakeBody.style.overflow = 'hidden';
                docOverflow = docElement.style.overflow;
                docElement.style.overflow = 'hidden';
                docElement.appendChild(fakeBody);
            }

            ret = callback(div, rule);
            if (!body) {
                fakeBody.parentNode.removeChild(fakeBody);
                docElement.style.overflow = docOverflow;
            } else {
                div.parentNode.removeChild(div);
            }

            return !!ret;

        },

        testMediaQuery = function(mq) {

            var matchMedia = window.matchMedia || window.msMatchMedia;
            if (matchMedia) {
                return matchMedia(mq).matches;
            }

            var bool;

            injectElementWithStyles('@media ' + mq + ' { #' + mod + ' { position: absolute; } }', function(node) {
                bool = (window.getComputedStyle ?
                    getComputedStyle(node, null) :
                    node.currentStyle)['position'] == 'absolute';
            });

            return bool;

        },


        isEventSupported = (function() {

            var TAGNAMES = {
                'select': 'input',
                'change': 'input',
                'submit': 'form',
                'reset': 'form',
                'error': 'img',
                'load': 'img',
                'abort': 'img'
            };

            function isEventSupported(eventName, element) {

                element = element || document.createElement(TAGNAMES[eventName] || 'div');
                eventName = 'on' + eventName;

                var isSupported = eventName in element;

                if (!isSupported) {
                    if (!element.setAttribute) {
                        element = document.createElement('div');
                    }
                    if (element.setAttribute && element.removeAttribute) {
                        element.setAttribute(eventName, '');
                        isSupported = is(element[eventName], 'function');

                        if (!is(element[eventName], 'undefined')) {
                            element[eventName] = undefined;
                        }
                        element.removeAttribute(eventName);
                    }
                }

                element = null;
                return isSupported;
            }
            return isEventSupported;
        })(),


        _hasOwnProperty = ({}).hasOwnProperty,
        hasOwnProp;

    if (!is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined')) {
        hasOwnProp = function(object, property) {
            return _hasOwnProperty.call(object, property);
        };
    } else {
        hasOwnProp = function(object, property) {
            return ((property in object) && is(object.constructor.prototype[property], 'undefined'));
        };
    }


    if (!Function.prototype.bind) {
        Function.prototype.bind = function bind(that) {

            var target = this;

            if (typeof target != "function") {
                throw new TypeError();
            }

            var args = slice.call(arguments, 1),
                bound = function() {

                    if (this instanceof bound) {

                        var F = function() {};
                        F.prototype = target.prototype;
                        var self = new F();

                        var result = target.apply(
                            self,
                            args.concat(slice.call(arguments))
                        );
                        if (Object(result) === result) {
                            return result;
                        }
                        return self;

                    } else {

                        return target.apply(
                            that,
                            args.concat(slice.call(arguments))
                        );

                    }

                };

            return bound;
        };
    }

    function setCss(str) {
        mStyle.cssText = str;
    }

    function setCssAll(str1, str2) {
        return setCss(prefixes.join(str1 + ';') + (str2 || ''));
    }

    function is(obj, type) {
        return typeof obj === type;
    }

    function contains(str, substr) {
        return !!~('' + str).indexOf(substr);
    }

    function testProps(props, prefixed) {
        for (var i in props) {
            var prop = props[i];
            if (!contains(prop, "-") && mStyle[prop] !== undefined) {
                return prefixed == 'pfx' ? prop : true;
            }
        }
        return false;
    }

    function testDOMProps(props, obj, elem) {
        for (var i in props) {
            var item = obj[props[i]];
            if (item !== undefined) {

                if (elem === false) return props[i];

                if (is(item, 'function')) {
                    return item.bind(elem || obj);
                }

                return item;
            }
        }
        return false;
    }

    function testPropsAll(prop, prefixed, elem) {

        var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),
            props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');

        if (is(prefixed, "string") || is(prefixed, "undefined")) {
            return testProps(props, prefixed);

        } else {
            props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');
            return testDOMProps(props, prefixed, elem);
        }
    }
    tests['flexbox'] = function() {
        return testPropsAll('flexWrap');
    };


    tests['flexboxlegacy'] = function() {
        return testPropsAll('boxDirection');
    };


    tests['canvas'] = function() {
        var elem = document.createElement('canvas');
        return !!(elem.getContext && elem.getContext('2d'));
    };

    tests['canvastext'] = function() {
        return !!(Modernizr['canvas'] && is(document.createElement('canvas').getContext('2d').fillText, 'function'));
    };



    tests['webgl'] = function() {
        return !!window.WebGLRenderingContext;
    };


    tests['touch'] = function() {
        var bool;

        if (('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {
            bool = true;
        } else {
            injectElementWithStyles(['@media (', prefixes.join('touch-enabled),('), mod, ')', '{#modernizr{top:9px;position:absolute}}'].join(''), function(node) {
                bool = node.offsetTop === 9;
            });
        }

        return bool;
    };



    tests['geolocation'] = function() {
        return 'geolocation' in navigator;
    };


    tests['postmessage'] = function() {
        return !!window.postMessage;
    };


    tests['websqldatabase'] = function() {
        return !!window.openDatabase;
    };

    tests['indexedDB'] = function() {
        return !!testPropsAll("indexedDB", window);
    };

    tests['hashchange'] = function() {
        return isEventSupported('hashchange', window) && (document.documentMode === undefined || document.documentMode > 7);
    };

    tests['history'] = function() {
        return !!(window.history && history.pushState);
    };

    tests['draganddrop'] = function() {
        var div = document.createElement('div');
        return ('draggable' in div) || ('ondragstart' in div && 'ondrop' in div);
    };

    tests['websockets'] = function() {
        return 'WebSocket' in window || 'MozWebSocket' in window;
    };


    tests['rgba'] = function() {
        setCss('background-color:rgba(150,255,150,.5)');

        return contains(mStyle.backgroundColor, 'rgba');
    };

    tests['hsla'] = function() {
        setCss('background-color:hsla(120,40%,100%,.5)');

        return contains(mStyle.backgroundColor, 'rgba') || contains(mStyle.backgroundColor, 'hsla');
    };

    tests['multiplebgs'] = function() {
        setCss('background:url(https://),url(https://),red url(https://)');

        return (/(url\s*\(.*?){3}/).test(mStyle.background);
    };
    tests['backgroundsize'] = function() {
        return testPropsAll('backgroundSize');
    };

    tests['borderimage'] = function() {
        return testPropsAll('borderImage');
    };



    tests['borderradius'] = function() {
        return testPropsAll('borderRadius');
    };

    tests['boxshadow'] = function() {
        return testPropsAll('boxShadow');
    };

    tests['textshadow'] = function() {
        return document.createElement('div').style.textShadow === '';
    };


    tests['opacity'] = function() {
        setCssAll('opacity:.55');

        return (/^0.55$/).test(mStyle.opacity);
    };


    tests['cssanimations'] = function() {
        return testPropsAll('animationName');
    };


    tests['csscolumns'] = function() {
        return testPropsAll('columnCount');
    };


    tests['cssgradients'] = function() {
        var str1 = 'background-image:',
            str2 = 'gradient(linear,left top,right bottom,from(#9f9),to(white));',
            str3 = 'linear-gradient(left top,#9f9, white);';

        setCss(
            (str1 + '-webkit- '.split(' ').join(str2 + str1) +
                prefixes.join(str3 + str1)).slice(0, -str1.length)
        );

        return contains(mStyle.backgroundImage, 'gradient');
    };


    tests['cssreflections'] = function() {
        return testPropsAll('boxReflect');
    };


    tests['csstransforms'] = function() {
        return !!testPropsAll('transform');
    };


    tests['csstransforms3d'] = function() {

        var ret = !! testPropsAll('perspective');

        if (ret && 'webkitPerspective' in docElement.style) {

            injectElementWithStyles('@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}', function(node, rule) {
                ret = node.offsetLeft === 9 && node.offsetHeight === 3;
            });
        }
        return ret;
    };


    tests['csstransitions'] = function() {
        return testPropsAll('transition');
    };



    tests['fontface'] = function() {
        var bool;

        injectElementWithStyles('@font-face {font-family:"font";src:url("https://")}', function(node, rule) {
            var style = document.getElementById('smodernizr'),
                sheet = style.sheet || style.styleSheet,
                cssText = sheet ? (sheet.cssRules && sheet.cssRules[0] ? sheet.cssRules[0].cssText : sheet.cssText || '') : '';

            bool = /src/i.test(cssText) && cssText.indexOf(rule.split(' ')[0]) === 0;
        });

        return bool;
    };

    tests['generatedcontent'] = function() {
        var bool;

        injectElementWithStyles(['#', mod, '{font:0/0 a}#', mod, ':after{content:"', smile, '";visibility:hidden;font:3px/1 a}'].join(''), function(node) {
            bool = node.offsetHeight >= 3;
        });

        return bool;
    };
    tests['video'] = function() {
        var elem = document.createElement('video'),
            bool = false;

        try {
            if (bool = !! elem.canPlayType) {
                bool = new Boolean(bool);
                bool.ogg = elem.canPlayType('video/ogg; codecs="theora"').replace(/^no$/, '');

                bool.h264 = elem.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/, '');

                bool.webm = elem.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/, '');
            }

        } catch (e) {}

        return bool;
    };

    tests['audio'] = function() {
        var elem = document.createElement('audio'),
            bool = false;

        try {
            if (bool = !! elem.canPlayType) {
                bool = new Boolean(bool);
                bool.ogg = elem.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, '');
                bool.mp3 = elem.canPlayType('audio/mpeg;').replace(/^no$/, '');

                bool.wav = elem.canPlayType('audio/wav; codecs="1"').replace(/^no$/, '');
                bool.m4a = (elem.canPlayType('audio/x-m4a;') ||
                    elem.canPlayType('audio/aac;')).replace(/^no$/, '');
            }
        } catch (e) {}

        return bool;
    };


    tests['localstorage'] = function() {
        try {
            localStorage.setItem(mod, mod);
            localStorage.removeItem(mod);
            return true;
        } catch (e) {
            return false;
        }
    };

    tests['sessionstorage'] = function() {
        try {
            sessionStorage.setItem(mod, mod);
            sessionStorage.removeItem(mod);
            return true;
        } catch (e) {
            return false;
        }
    };


    tests['webworkers'] = function() {
        return !!window.Worker;
    };


    tests['applicationcache'] = function() {
        return !!window.applicationCache;
    };


    tests['svg'] = function() {
        return !!document.createElementNS && !! document.createElementNS(ns.svg, 'svg').createSVGRect;
    };

    tests['inlinesvg'] = function() {
        var div = document.createElement('div');
        div.innerHTML = '<svg/>';
        return (div.firstChild && div.firstChild.namespaceURI) == ns.svg;
    };

    tests['smil'] = function() {
        return !!document.createElementNS && /SVGAnimate/.test(toString.call(document.createElementNS(ns.svg, 'animate')));
    };

    tests['svgclippaths'] = function() {
        return !!document.createElementNS && /SVGClipPath/.test(toString.call(document.createElementNS(ns.svg, 'clipPath')));
    };

    // retina test

    tests['retina'] = function() {
        var dpr = window.devicePixelRatio || (window.screen.deviceXDPI / window.screen.logicalXDPI) || 1;
        return !!(dpr > 1);
    };

    // @wezom browser test's

    tests['moz'] = function() {
        return typeof InstallTrigger !== 'undefined';
    };
    tests['safari'] = function() {
        return Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;
    };
    if (Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0) {
        tests['safari-win'] = function() {
            return ((navigator.platform).slice(0, 3) === 'Win') ? true : false;
        };
    }
    tests['o'] = function() {
        return !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;
    };
    tests['chrome'] = function() {
        return !!window.chrome && !window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;
    };
    tests['webkit'] = function() {
        return (navigator.appVersion.indexOf("Win")!=-1) && ('WebkitAppearance' in document.documentElement.style);
    };
    tests['ie'] = function() {
        return /*@cc_on!@*/ false || document.documentMode;
    };
    tests['ie8'] = function() {
        return (document.all && !document.addEventListener);
    };
    tests['ie9'] = function() {
        return (document.all && !window.atob && !!document.addEventListener);
    };
    tests['ie10'] = function() {
        return (document.all && !!window.atob && !!document.addEventListener);
    };

    // @wezom device tests
    var vendors = navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry|BB10|mobi|tv|tablet|opera mini|nexus 7)/i);
    if (vendors != null && vendors[0].length) {
        var vName = vendors[0];
        tests[vName] = function() {
            return true;
        };
        var vObj = {
            Android: [
                ['Android 2.', '2'],
                ['Android 3.', '3'],
                ['Android 4.', '4'],
                ['Android 5.', '5'],
                ['Android 6.', '6']
            ],
            iPad: [
                ['OS 4', '2'],
                ['OS 7', '4']
            ],
            iPhone: [
                ['OS 4', '4'],
                ['OS 7', '5'],
                ['OS 8', '6']
            ],
            Tablet: [
                ['OS 1', '1'],
                ['OS 2', '2']
            ],
            Mobi: [
                ['Windows Phone', 'windows-phone']
            ]
        };
        if (!!vObj[vName]) {
            for (var i = 0; i < vObj[vName].length; i++) {
                if (navigator.userAgent.match(vObj[vName][i][0])) {
                    if (vObj[vName][i][0] === 'Windows Phone') {
                        tests[vObj[vName][i][1]] = function() {
                            return true;
                        };
                    } else {
                        tests[vName + '' + vObj[vName][i][1]] = function() {
                            return true;
                        };
                    }
                }
            };
        }
    }

    var lenovo = navigator.userAgent.match(/(Lenovo)/i);
    if (!!lenovo) {
        tests['lenovo'] = function() {
            return true;
        };
    }

    tests['splash'] = function() {
        return (window.outerWidth > 980 || window.outerHeight > 980);
    };

    function webforms() {
        Modernizr['input'] = (function(props) {
            for (var i = 0, len = props.length; i < len; i++) {
                attrs[props[i]] = !! (props[i] in inputElem);
            }
            if (attrs.list) {
                attrs.list = !! (document.createElement('datalist') && window.HTMLDataListElement);
            }
            return attrs;
        })('autocomplete autofocus list placeholder max min multiple pattern required step'.split(' '));
        Modernizr['inputtypes'] = (function(props) {

            for (var i = 0, bool, inputElemType, defaultView, len = props.length; i < len; i++) {

                inputElem.setAttribute('type', inputElemType = props[i]);
                bool = inputElem.type !== 'text';

                if (bool) {

                    inputElem.value = smile;
                    inputElem.style.cssText = 'position:absolute;visibility:hidden;';

                    if (/^range$/.test(inputElemType) && inputElem.style.WebkitAppearance !== undefined) {

                        docElement.appendChild(inputElem);
                        defaultView = document.defaultView;

                        bool = defaultView.getComputedStyle &&
                            defaultView.getComputedStyle(inputElem, null).WebkitAppearance !== 'textfield' &&
                            (inputElem.offsetHeight !== 0);

                        docElement.removeChild(inputElem);

                    } else if (/^(search|tel)$/.test(inputElemType)) {} else if (/^(url|email)$/.test(inputElemType)) {
                        bool = inputElem.checkValidity && inputElem.checkValidity() === false;

                    } else {
                        bool = inputElem.value != smile;
                    }
                }

                inputs[props[i]] = !! bool;
            }
            return inputs;
        })('search tel url email datetime date month week time datetime-local number range color'.split(' '));
    }
    for (var feature in tests) {
        if (hasOwnProp(tests, feature)) {
            featureName = feature.toLowerCase();
            Modernizr[featureName] = tests[feature]();

            classes.push((Modernizr[featureName] ? '' : 'no-') + featureName);
        }
    }

    Modernizr.input || webforms();


    Modernizr.addTest = function(feature, test) {
        if (typeof feature == 'object') {
            for (var key in feature) {
                if (hasOwnProp(feature, key)) {
                    Modernizr.addTest(key, feature[key]);
                }
            }
        } else {

            feature = feature.toLowerCase();

            if (Modernizr[feature] !== undefined) {
                return Modernizr;
            }

            test = typeof test == 'function' ? test() : test;

            if (typeof enableClasses !== "undefined" && enableClasses) {
                docElement.className += ' ' + (test ? '' : 'no-') + feature;
            }
            Modernizr[feature] = test;

        }

        return Modernizr;
    };


    setCss('');
    modElem = inputElem = null;

    ;
    (function(window, document) {
        var version = '3.7.0';

        var options = window.html5 || {};

        var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;

        var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;

        var supportsHtml5Styles;

        var expando = '_html5shiv';

        var expanID = 0;

        var expandoData = {};

        var supportsUnknownElements;

        (function() {
            try {
                var a = document.createElement('a');
                a.innerHTML = '<xyz></xyz>';
                supportsHtml5Styles = ('hidden' in a);

                supportsUnknownElements = a.childNodes.length == 1 || (function() {
                    (document.createElement)('a');
                    var frag = document.createDocumentFragment();
                    return (
                        typeof frag.cloneNode == 'undefined' ||
                        typeof frag.createDocumentFragment == 'undefined' ||
                        typeof frag.createElement == 'undefined'
                    );
                }());
            } catch (e) {
                supportsHtml5Styles = true;
                supportsUnknownElements = true;
            }

        }());

        function addStyleSheet(ownerDocument, cssText) {
            var p = ownerDocument.createElement('p'),
                parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;

            p.innerHTML = 'x<style>' + cssText + '</style>';
            return parent.insertBefore(p.lastChild, parent.firstChild);
        }

        function getElements() {
            var elements = html5.elements;
            return typeof elements == 'string' ? elements.split(' ') : elements;
        }

        function getExpandoData(ownerDocument) {
            var data = expandoData[ownerDocument[expando]];
            if (!data) {
                data = {};
                expanID++;
                ownerDocument[expando] = expanID;
                expandoData[expanID] = data;
            }
            return data;
        }

        function createElement(nodeName, ownerDocument, data) {
            if (!ownerDocument) {
                ownerDocument = document;
            }
            if (supportsUnknownElements) {
                return ownerDocument.createElement(nodeName);
            }
            if (!data) {
                data = getExpandoData(ownerDocument);
            }
            var node;

            if (data.cache[nodeName]) {
                node = data.cache[nodeName].cloneNode();
            } else if (saveClones.test(nodeName)) {
                node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();
            } else {
                node = data.createElem(nodeName);
            }

            return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node;
        }

        function createDocumentFragment(ownerDocument, data) {
            if (!ownerDocument) {
                ownerDocument = document;
            }
            if (supportsUnknownElements) {
                return ownerDocument.createDocumentFragment();
            }
            data = data || getExpandoData(ownerDocument);
            var clone = data.frag.cloneNode(),
                i = 0,
                elems = getElements(),
                l = elems.length;
            for (; i < l; i++) {
                clone.createElement(elems[i]);
            }
            return clone;
        }

        function shivMethods(ownerDocument, data) {
            if (!data.cache) {
                data.cache = {};
                data.createElem = ownerDocument.createElement;
                data.createFrag = ownerDocument.createDocumentFragment;
                data.frag = data.createFrag();
            }


            ownerDocument.createElement = function(nodeName) {
                if (!html5.shivMethods) {
                    return data.createElem(nodeName);
                }
                return createElement(nodeName, ownerDocument, data);
            };

            ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +
                'var n=f.cloneNode(),c=n.createElement;' +
                'h.shivMethods&&(' +
                getElements().join().replace(/[\w\-]+/g, function(nodeName) {
                    data.createElem(nodeName);
                    data.frag.createElement(nodeName);
                    return 'c("' + nodeName + '")';
                }) +
                ');return n}'
            )(html5, data.frag);
        }

        function shivDocument(ownerDocument) {
            if (!ownerDocument) {
                ownerDocument = document;
            }
            var data = getExpandoData(ownerDocument);

            if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {
                data.hasCSS = !! addStyleSheet(ownerDocument,
                    'article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}' +
                    'mark{background:#FF0;color:#000}' +
                    'template{display:none}'
                );
            }
            if (!supportsUnknownElements) {
                shivMethods(ownerDocument, data);
            }
            return ownerDocument;
        }

        var html5 = {

            'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video',

            'version': version,

            'shivCSS': (options.shivCSS !== false),

            'supportsUnknownElements': supportsUnknownElements,

            'shivMethods': (options.shivMethods !== false),

            'type': 'default',

            'shivDocument': shivDocument,

            createElement: createElement,

            createDocumentFragment: createDocumentFragment
        };

        window.html5 = html5;

        shivDocument(document);

    }(this, document));

    Modernizr._version = version;

    Modernizr._prefixes = prefixes;
    Modernizr._domPrefixes = domPrefixes;
    Modernizr._cssomPrefixes = cssomPrefixes;

    Modernizr.mq = testMediaQuery;

    Modernizr.hasEvent = isEventSupported;

    Modernizr.testProp = function(prop) {
        return testProps([prop]);
    };

    Modernizr.testAllProps = testPropsAll;


    Modernizr.testStyles = injectElementWithStyles;
    Modernizr.prefixed = function(prop, obj, elem) {
        if (!obj) {
            return testPropsAll(prop, 'pfx');
        } else {
            return testPropsAll(prop, obj, elem);
        }
    };


    docElement.className = docElement.className.replace(/(^|\s)no-js(\s|$)/, '$1$2') +

    (enableClasses ? ' js ' + classes.join(' ') : '');

    return Modernizr;

})(this, this.document);
/*yepnope1.5.4|WTFPL*/
(function(a, b, c) {
    function d(a) {
        return "[object Function]" == o.call(a)
    }

    function e(a) {
        return "string" == typeof a
    }

    function f() {}

    function g(a) {
        return !a || "loaded" == a || "complete" == a || "uninitialized" == a
    }

    function h() {
        var a = p.shift();
        q = 1, a ? a.t ? m(function() {
            ("c" == a.t ? B.injectCss : B.injectJs)(a.s, 0, a.a, a.x, a.e, 1)
        }, 0) : (a(), h()) : q = 0
    }

    function i(a, c, d, e, f, i, j) {
        function k(b) {
            if (!o && g(l.readyState) && (u.r = o = 1, !q && h(), l.onload = l.onreadystatechange = null, b)) {
                "img" != a && m(function() {
                    t.removeChild(l)
                }, 50);
                for (var d in y[c]) y[c].hasOwnProperty(d) && y[c][d].onload()
            }
        }
        var j = j || B.errorTimeout,
            l = b.createElement(a),
            o = 0,
            r = 0,
            u = {
                t: d,
                s: c,
                e: f,
                a: i,
                x: j
            };
        1 === y[c] && (r = 1, y[c] = []), "object" == a ? l.data = c : (l.src = c, l.type = a), l.width = l.height = "0", l.onerror = l.onload = l.onreadystatechange = function() {
            k.call(this, r)
        }, p.splice(e, 0, u), "img" != a && (r || 2 === y[c] ? (t.insertBefore(l, s ? null : n), m(k, j)) : y[c].push(l))
    }

    function j(a, b, c, d, f) {
        return q = 0, b = b || "j", e(a) ? i("c" == b ? v : u, a, b, this.i++, c, d, f) : (p.splice(this.i++, 0, a), 1 == p.length && h()), this
    }

    function k() {
        var a = B;
        return a.loader = {
            load: j,
            i: 0
        }, a
    }
    var l = b.documentElement,
        m = a.setTimeout,
        n = b.getElementsByTagName("script")[0],
        o = {}.toString,
        p = [],
        q = 0,
        r = "MozAppearance" in l.style,
        s = r && !! b.createRange().compareNode,
        t = s ? l : n.parentNode,
        l = a.opera && "[object Opera]" == o.call(a.opera),
        l = !! b.attachEvent && !l,
        u = r ? "object" : l ? "script" : "img",
        v = l ? "script" : u,
        w = Array.isArray || function(a) {
            return "[object Array]" == o.call(a)
        }, x = [],
        y = {}, z = {
            timeout: function(a, b) {
                return b.length && (a.timeout = b[0]), a
            }
        }, A, B;
    B = function(a) {
        function b(a) {
            var a = a.split("!"),
                b = x.length,
                c = a.pop(),
                d = a.length,
                c = {
                    url: c,
                    origUrl: c,
                    prefixes: a
                }, e, f, g;
            for (f = 0; f < d; f++) g = a[f].split("="), (e = z[g.shift()]) && (c = e(c, g));
            for (f = 0; f < b; f++) c = x[f](c);
            return c
        }

        function g(a, e, f, g, h) {
            var i = b(a),
                j = i.autoCallback;
            i.url.split(".").pop().split("?").shift(), i.bypass || (e && (e = d(e) ? e : e[a] || e[g] || e[a.split("/").pop().split("?")[0]]), i.instead ? i.instead(a, e, f, g, h) : (y[i.url] ? i.noexec = !0 : y[i.url] = 1, f.load(i.url, i.forceCSS || !i.forceJS && "css" == i.url.split(".").pop().split("?").shift() ? "c" : c, i.noexec, i.attrs, i.timeout), (d(e) || d(j)) && f.load(function() {
                k(), e && e(i.origUrl, h, g), j && j(i.origUrl, h, g), y[i.url] = 2
            })))
        }

        function h(a, b) {
            function c(a, c) {
                if (a) {
                    if (e(a)) c || (j = function() {
                        var a = [].slice.call(arguments);
                        k.apply(this, a), l()
                    }), g(a, j, b, 0, h);
                    else if (Object(a) === a)
                        for (n in m = function() {
                            var b = 0,
                                c;
                            for (c in a) a.hasOwnProperty(c) && b++;
                            return b
                        }(), a) a.hasOwnProperty(n) && (!c && !--m && (d(j) ? j = function() {
                            var a = [].slice.call(arguments);
                            k.apply(this, a), l()
                        } : j[n] = function(a) {
                            return function() {
                                var b = [].slice.call(arguments);
                                a && a.apply(this, b), l()
                            }
                        }(k[n])), g(a[n], j, b, n, h))
                } else !c && l()
            }
            var h = !! a.test,
                i = a.load || a.both,
                j = a.callback || f,
                k = j,
                l = a.complete || f,
                m, n;
            c(h ? a.yep : a.nope, !! i), i && c(i)
        }
        var i, j, l = this.yepnope.loader;
        if (e(a)) g(a, 0, l, 0);
        else if (w(a))
            for (i = 0; i < a.length; i++) j = a[i], e(j) ? g(j, 0, l, 0) : w(j) ? B(j) : Object(j) === j && h(j, l);
        else Object(a) === a && h(a, l)
    }, B.addPrefix = function(a, b) {
        z[a] = b
    }, B.addFilter = function(a) {
        x.push(a)
    }, B.errorTimeout = 1e4, null == b.readyState && b.addEventListener && (b.readyState = "loading", b.addEventListener("DOMContentLoaded", A = function() {
        b.removeEventListener("DOMContentLoaded", A, 0), b.readyState = "complete"
    }, 0)), a.yepnope = k(), a.yepnope.executeStack = h, a.yepnope.injectJs = function(a, c, d, e, i, j) {
        var k = b.createElement("script"),
            l, o, e = e || B.errorTimeout;
        k.src = a;
        for (o in d) k.setAttribute(o, d[o]);
        c = j ? h : c || f, k.onreadystatechange = k.onload = function() {
            !l && g(k.readyState) && (l = 1, c(), k.onload = k.onreadystatechange = null)
        }, m(function() {
            l || (l = 1, c(1))
        }, e), i ? k.onload() : n.parentNode.insertBefore(k, n)
    }, a.yepnope.injectCss = function(a, c, d, e, g, i) {
        var e = b.createElement("link"),
            j, c = i ? h : c || f;
        e.href = a, e.rel = "stylesheet", e.type = "text/css";
        for (j in d) e.setAttribute(j, d[j]);
        g || (n.parentNode.insertBefore(e, n), m(c, 0))
    }
})(this, document);
Modernizr.load = function() {
    yepnope.apply(window, [].slice.call(arguments, 0));
};
// Method of allowing calculated values for length units, i.e. width: calc(100%-3em) http://caniuse.com/#search=calc
// By @calvein

Modernizr.addTest('csscalc', function() {
    var prop = 'width:';
    var value = 'calc(10px);';
    var el = document.createElement('div');

    el.style.cssText = prop + Modernizr._prefixes.join(value + prop);

    return !!el.style.length;
});;;/*! jQuery v1.11.0 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k="".trim,l={},m="1.11.0",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(n.isPlainObject(c)||(b=n.isArray(c)))?(b?(b=!1,f=a&&n.isArray(a)?a:[]):f=a&&n.isPlainObject(a)?a:{},g[d]=n.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray||function(a){return"array"===n.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){return a-parseFloat(a)>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||"object"!==n.type(a)||a.nodeType||n.isWindow(a))return!1;try{if(a.constructor&&!j.call(a,"constructor")&&!j.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}if(l.ownLast)for(b in a)return j.call(a,b);for(b in a);return void 0===b||j.call(a,b)},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(b){b&&n.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=s(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:k&&!k.call("\ufeff\xa0")?function(a){return null==a?"":k.call(a)}:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(g)return g.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(f=a[b],b=a,a=f),n.isFunction(a)?(c=d.call(arguments,2),e=function(){return a.apply(b||this,c.concat(d.call(arguments)))},e.guid=a.guid=a.guid||n.guid++,e):void 0},now:function(){return+new Date},support:l}),n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function s(a){var b=a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s="sizzle"+-new Date,t=a.document,u=0,v=0,w=eb(),x=eb(),y=eb(),z=function(a,b){return a===b&&(j=!0),0},A="undefined",B=1<<31,C={}.hasOwnProperty,D=[],E=D.pop,F=D.push,G=D.push,H=D.slice,I=D.indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]===a)return b;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",K="[\\x20\\t\\r\\n\\f]",L="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",M=L.replace("w","w#"),N="\\["+K+"*("+L+")"+K+"*(?:([*^$|!~]?=)"+K+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+M+")|)|)"+K+"*\\]",O=":("+L+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+N.replace(3,8)+")*)|.*)\\)|)",P=new RegExp("^"+K+"+|((?:^|[^\\\\])(?:\\\\.)*)"+K+"+$","g"),Q=new RegExp("^"+K+"*,"+K+"*"),R=new RegExp("^"+K+"*([>+~]|"+K+")"+K+"*"),S=new RegExp("="+K+"*([^\\]'\"]*?)"+K+"*\\]","g"),T=new RegExp(O),U=new RegExp("^"+M+"$"),V={ID:new RegExp("^#("+L+")"),CLASS:new RegExp("^\\.("+L+")"),TAG:new RegExp("^("+L.replace("w","w*")+")"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+O),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+K+"*(even|odd|(([+-]|)(\\d*)n|)"+K+"*(?:([+-]|)"+K+"*(\\d+)|))"+K+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+K+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+K+"*((?:-\\d)?\\d*)"+K+"*\\)|)(?=[^-]|$)","i")},W=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,$=/[+~]/,_=/'|\\/g,ab=new RegExp("\\\\([\\da-f]{1,6}"+K+"?|("+K+")|.)","ig"),bb=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)};try{G.apply(D=H.call(t.childNodes),t.childNodes),D[t.childNodes.length].nodeType}catch(cb){G={apply:D.length?function(a,b){F.apply(a,H.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function db(a,b,d,e){var f,g,h,i,j,m,p,q,u,v;if((b?b.ownerDocument||b:t)!==l&&k(b),b=b||l,d=d||[],!a||"string"!=typeof a)return d;if(1!==(i=b.nodeType)&&9!==i)return[];if(n&&!e){if(f=Z.exec(a))if(h=f[1]){if(9===i){if(g=b.getElementById(h),!g||!g.parentNode)return d;if(g.id===h)return d.push(g),d}else if(b.ownerDocument&&(g=b.ownerDocument.getElementById(h))&&r(b,g)&&g.id===h)return d.push(g),d}else{if(f[2])return G.apply(d,b.getElementsByTagName(a)),d;if((h=f[3])&&c.getElementsByClassName&&b.getElementsByClassName)return G.apply(d,b.getElementsByClassName(h)),d}if(c.qsa&&(!o||!o.test(a))){if(q=p=s,u=b,v=9===i&&a,1===i&&"object"!==b.nodeName.toLowerCase()){m=ob(a),(p=b.getAttribute("id"))?q=p.replace(_,"\\$&"):b.setAttribute("id",q),q="[id='"+q+"'] ",j=m.length;while(j--)m[j]=q+pb(m[j]);u=$.test(a)&&mb(b.parentNode)||b,v=m.join(",")}if(v)try{return G.apply(d,u.querySelectorAll(v)),d}catch(w){}finally{p||b.removeAttribute("id")}}}return xb(a.replace(P,"$1"),b,d,e)}function eb(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function fb(a){return a[s]=!0,a}function gb(a){var b=l.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function hb(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function ib(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||B)-(~a.sourceIndex||B);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function jb(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function kb(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function lb(a){return fb(function(b){return b=+b,fb(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function mb(a){return a&&typeof a.getElementsByTagName!==A&&a}c=db.support={},f=db.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},k=db.setDocument=function(a){var b,e=a?a.ownerDocument||a:t,g=e.defaultView;return e!==l&&9===e.nodeType&&e.documentElement?(l=e,m=e.documentElement,n=!f(e),g&&g!==g.top&&(g.addEventListener?g.addEventListener("unload",function(){k()},!1):g.attachEvent&&g.attachEvent("onunload",function(){k()})),c.attributes=gb(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=gb(function(a){return a.appendChild(e.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Y.test(e.getElementsByClassName)&&gb(function(a){return a.innerHTML="<div class='a'></div><div class='a i'></div>",a.firstChild.className="i",2===a.getElementsByClassName("i").length}),c.getById=gb(function(a){return m.appendChild(a).id=s,!e.getElementsByName||!e.getElementsByName(s).length}),c.getById?(d.find.ID=function(a,b){if(typeof b.getElementById!==A&&n){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ab,bb);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ab,bb);return function(a){var c=typeof a.getAttributeNode!==A&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return typeof b.getElementsByTagName!==A?b.getElementsByTagName(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return typeof b.getElementsByClassName!==A&&n?b.getElementsByClassName(a):void 0},p=[],o=[],(c.qsa=Y.test(e.querySelectorAll))&&(gb(function(a){a.innerHTML="<select t=''><option selected=''></option></select>",a.querySelectorAll("[t^='']").length&&o.push("[*^$]="+K+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||o.push("\\["+K+"*(?:value|"+J+")"),a.querySelectorAll(":checked").length||o.push(":checked")}),gb(function(a){var b=e.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&o.push("name"+K+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||o.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),o.push(",.*:")})),(c.matchesSelector=Y.test(q=m.webkitMatchesSelector||m.mozMatchesSelector||m.oMatchesSelector||m.msMatchesSelector))&&gb(function(a){c.disconnectedMatch=q.call(a,"div"),q.call(a,"[s!='']:x"),p.push("!=",O)}),o=o.length&&new RegExp(o.join("|")),p=p.length&&new RegExp(p.join("|")),b=Y.test(m.compareDocumentPosition),r=b||Y.test(m.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},z=b?function(a,b){if(a===b)return j=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===e||a.ownerDocument===t&&r(t,a)?-1:b===e||b.ownerDocument===t&&r(t,b)?1:i?I.call(i,a)-I.call(i,b):0:4&d?-1:1)}:function(a,b){if(a===b)return j=!0,0;var c,d=0,f=a.parentNode,g=b.parentNode,h=[a],k=[b];if(!f||!g)return a===e?-1:b===e?1:f?-1:g?1:i?I.call(i,a)-I.call(i,b):0;if(f===g)return ib(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)k.unshift(c);while(h[d]===k[d])d++;return d?ib(h[d],k[d]):h[d]===t?-1:k[d]===t?1:0},e):l},db.matches=function(a,b){return db(a,null,null,b)},db.matchesSelector=function(a,b){if((a.ownerDocument||a)!==l&&k(a),b=b.replace(S,"='$1']"),!(!c.matchesSelector||!n||p&&p.test(b)||o&&o.test(b)))try{var d=q.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return db(b,l,null,[a]).length>0},db.contains=function(a,b){return(a.ownerDocument||a)!==l&&k(a),r(a,b)},db.attr=function(a,b){(a.ownerDocument||a)!==l&&k(a);var e=d.attrHandle[b.toLowerCase()],f=e&&C.call(d.attrHandle,b.toLowerCase())?e(a,b,!n):void 0;return void 0!==f?f:c.attributes||!n?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},db.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},db.uniqueSort=function(a){var b,d=[],e=0,f=0;if(j=!c.detectDuplicates,i=!c.sortStable&&a.slice(0),a.sort(z),j){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return i=null,a},e=db.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=db.selectors={cacheLength:50,createPseudo:fb,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ab,bb),a[3]=(a[4]||a[5]||"").replace(ab,bb),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||db.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&db.error(a[0]),a},PSEUDO:function(a){var b,c=!a[5]&&a[2];return V.CHILD.test(a[0])?null:(a[3]&&void 0!==a[4]?a[2]=a[4]:c&&T.test(c)&&(b=ob(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ab,bb).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=w[a+" "];return b||(b=new RegExp("(^|"+K+")"+a+"("+K+"|$)"))&&w(a,function(a){return b.test("string"==typeof a.className&&a.className||typeof a.getAttribute!==A&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=db.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),t=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&t){k=q[s]||(q[s]={}),j=k[a]||[],n=j[0]===u&&j[1],m=j[0]===u&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[u,n,m];break}}else if(t&&(j=(b[s]||(b[s]={}))[a])&&j[0]===u)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(t&&((l[s]||(l[s]={}))[a]=[u,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||db.error("unsupported pseudo: "+a);return e[s]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?fb(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=I.call(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:fb(function(a){var b=[],c=[],d=g(a.replace(P,"$1"));return d[s]?fb(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),!c.pop()}}),has:fb(function(a){return function(b){return db(a,b).length>0}}),contains:fb(function(a){return function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:fb(function(a){return U.test(a||"")||db.error("unsupported lang: "+a),a=a.replace(ab,bb).toLowerCase(),function(b){var c;do if(c=n?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===m},focus:function(a){return a===l.activeElement&&(!l.hasFocus||l.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return X.test(a.nodeName)},input:function(a){return W.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:lb(function(){return[0]}),last:lb(function(a,b){return[b-1]}),eq:lb(function(a,b,c){return[0>c?c+b:c]}),even:lb(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:lb(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:lb(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:lb(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=jb(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=kb(b);function nb(){}nb.prototype=d.filters=d.pseudos,d.setFilters=new nb;function ob(a,b){var c,e,f,g,h,i,j,k=x[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=Q.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=R.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(P," ")}),h=h.slice(c.length));for(g in d.filter)!(e=V[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?db.error(a):x(a,i).slice(0)}function pb(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function qb(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=v++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[u,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[s]||(b[s]={}),(h=i[d])&&h[0]===u&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function rb(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function sb(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function tb(a,b,c,d,e,f){return d&&!d[s]&&(d=tb(d)),e&&!e[s]&&(e=tb(e,f)),fb(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||wb(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:sb(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=sb(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?I.call(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=sb(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):G.apply(g,r)})}function ub(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],i=g||d.relative[" "],j=g?1:0,k=qb(function(a){return a===b},i,!0),l=qb(function(a){return I.call(b,a)>-1},i,!0),m=[function(a,c,d){return!g&&(d||c!==h)||((b=c).nodeType?k(a,c,d):l(a,c,d))}];f>j;j++)if(c=d.relative[a[j].type])m=[qb(rb(m),c)];else{if(c=d.filter[a[j].type].apply(null,a[j].matches),c[s]){for(e=++j;f>e;e++)if(d.relative[a[e].type])break;return tb(j>1&&rb(m),j>1&&pb(a.slice(0,j-1).concat({value:" "===a[j-2].type?"*":""})).replace(P,"$1"),c,e>j&&ub(a.slice(j,e)),f>e&&ub(a=a.slice(e)),f>e&&pb(a))}m.push(c)}return rb(m)}function vb(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,i,j,k){var m,n,o,p=0,q="0",r=f&&[],s=[],t=h,v=f||e&&d.find.TAG("*",k),w=u+=null==t?1:Math.random()||.1,x=v.length;for(k&&(h=g!==l&&g);q!==x&&null!=(m=v[q]);q++){if(e&&m){n=0;while(o=a[n++])if(o(m,g,i)){j.push(m);break}k&&(u=w)}c&&((m=!o&&m)&&p--,f&&r.push(m))}if(p+=q,c&&q!==p){n=0;while(o=b[n++])o(r,s,g,i);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=E.call(j));s=sb(s)}G.apply(j,s),k&&!f&&s.length>0&&p+b.length>1&&db.uniqueSort(j)}return k&&(u=w,h=t),r};return c?fb(f):f}g=db.compile=function(a,b){var c,d=[],e=[],f=y[a+" "];if(!f){b||(b=ob(a)),c=b.length;while(c--)f=ub(b[c]),f[s]?d.push(f):e.push(f);f=y(a,vb(e,d))}return f};function wb(a,b,c){for(var d=0,e=b.length;e>d;d++)db(a,b[d],c);return c}function xb(a,b,e,f){var h,i,j,k,l,m=ob(a);if(!f&&1===m.length){if(i=m[0]=m[0].slice(0),i.length>2&&"ID"===(j=i[0]).type&&c.getById&&9===b.nodeType&&n&&d.relative[i[1].type]){if(b=(d.find.ID(j.matches[0].replace(ab,bb),b)||[])[0],!b)return e;a=a.slice(i.shift().value.length)}h=V.needsContext.test(a)?0:i.length;while(h--){if(j=i[h],d.relative[k=j.type])break;if((l=d.find[k])&&(f=l(j.matches[0].replace(ab,bb),$.test(i[0].type)&&mb(b.parentNode)||b))){if(i.splice(h,1),a=f.length&&pb(i),!a)return G.apply(e,f),e;break}}}return g(a,m)(f,b,!n,e,$.test(a)&&mb(b.parentNode)||b),e}return c.sortStable=s.split("").sort(z).join("")===s,c.detectDuplicates=!!j,k(),c.sortDetached=gb(function(a){return 1&a.compareDocumentPosition(l.createElement("div"))}),gb(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||hb("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&gb(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||hb("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),gb(function(a){return null==a.getAttribute("disabled")})||hb(J,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),db}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=n.expr.match.needsContext,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;function x(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(w.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return n.inArray(a,b)>=0!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=[],d=this,e=d.length;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;e>b;b++)if(n.contains(d[b],this))return!0}));for(b=0;e>b;b++)n.find(a,d[b],c);return c=this.pushStack(e>1?n.unique(c):c),c.selector=this.selector?this.selector+" "+a:a,c},filter:function(a){return this.pushStack(x(this,a||[],!1))},not:function(a){return this.pushStack(x(this,a||[],!0))},is:function(a){return!!x(this,"string"==typeof a&&u.test(a)?n(a):a||[],!1).length}});var y,z=a.document,A=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,B=n.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a.charAt(0)&&">"===a.charAt(a.length-1)&&a.length>=3?[null,a,null]:A.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||y).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:z,!0)),v.test(c[1])&&n.isPlainObject(b))for(c in b)n.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}if(d=z.getElementById(c[2]),d&&d.parentNode){if(d.id!==c[2])return y.find(a);this.length=1,this[0]=d}return this.context=z,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof y.ready?y.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};B.prototype=n.fn,y=n(z);var C=/^(?:parents|prev(?:Until|All))/,D={children:!0,contents:!0,next:!0,prev:!0};n.extend({dir:function(a,b,c){var d=[],e=a[b];while(e&&9!==e.nodeType&&(void 0===c||1!==e.nodeType||!n(e).is(c)))1===e.nodeType&&d.push(e),e=e[b];return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),n.fn.extend({has:function(a){var b,c=n(a,this),d=c.length;return this.filter(function(){for(b=0;d>b;b++)if(n.contains(this,c[b]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=u.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.unique(f):f)},index:function(a){return a?"string"==typeof a?n.inArray(this[0],n(a)):n.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.unique(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function E(a,b){do a=a[b];while(a&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return n.dir(a,"parentNode")},parentsUntil:function(a,b,c){return n.dir(a,"parentNode",c)},next:function(a){return E(a,"nextSibling")},prev:function(a){return E(a,"previousSibling")},nextAll:function(a){return n.dir(a,"nextSibling")},prevAll:function(a){return n.dir(a,"previousSibling")},nextUntil:function(a,b,c){return n.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return n.dir(a,"previousSibling",c)},siblings:function(a){return n.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return n.sibling(a.firstChild)},contents:function(a){return n.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(D[a]||(e=n.unique(e)),C.test(a)&&(e=e.reverse())),this.pushStack(e)}});var F=/\S+/g,G={};function H(a){var b=G[a]={};return n.each(a.match(F)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?G[a]||H(a):n.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(c=a.memory&&l,d=!0,f=g||0,g=0,e=h.length,b=!0;h&&e>f;f++)if(h[f].apply(l[0],l[1])===!1&&a.stopOnFalse){c=!1;break}b=!1,h&&(i?i.length&&j(i.shift()):c?h=[]:k.disable())},k={add:function(){if(h){var d=h.length;!function f(b){n.each(b,function(b,c){var d=n.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&f(c)})}(arguments),b?e=h.length:c&&(g=d,j(c))}return this},remove:function(){return h&&n.each(arguments,function(a,c){var d;while((d=n.inArray(c,h,d))>-1)h.splice(d,1),b&&(e>=d&&e--,f>=d&&f--)}),this},has:function(a){return a?n.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],e=0,this},disable:function(){return h=i=c=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,c||k.disable(),this},locked:function(){return!i},fireWith:function(a,c){return!h||d&&!i||(c=c||[],c=[a,c.slice?c.slice():c],b?i.push(c):j(c)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!d}};return k},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&n.isFunction(a.promise)?e:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var I;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){if(a===!0?!--n.readyWait:!n.isReady){if(!z.body)return setTimeout(n.ready);n.isReady=!0,a!==!0&&--n.readyWait>0||(I.resolveWith(z,[n]),n.fn.trigger&&n(z).trigger("ready").off("ready"))}}});function J(){z.addEventListener?(z.removeEventListener("DOMContentLoaded",K,!1),a.removeEventListener("load",K,!1)):(z.detachEvent("onreadystatechange",K),a.detachEvent("onload",K))}function K(){(z.addEventListener||"load"===event.type||"complete"===z.readyState)&&(J(),n.ready())}n.ready.promise=function(b){if(!I)if(I=n.Deferred(),"complete"===z.readyState)setTimeout(n.ready);else if(z.addEventListener)z.addEventListener("DOMContentLoaded",K,!1),a.addEventListener("load",K,!1);else{z.attachEvent("onreadystatechange",K),a.attachEvent("onload",K);var c=!1;try{c=null==a.frameElement&&z.documentElement}catch(d){}c&&c.doScroll&&!function e(){if(!n.isReady){try{c.doScroll("left")}catch(a){return setTimeout(e,50)}J(),n.ready()}}()}return I.promise(b)};var L="undefined",M;for(M in n(l))break;l.ownLast="0"!==M,l.inlineBlockNeedsLayout=!1,n(function(){var a,b,c=z.getElementsByTagName("body")[0];c&&(a=z.createElement("div"),a.style.cssText="border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px",b=z.createElement("div"),c.appendChild(a).appendChild(b),typeof b.style.zoom!==L&&(b.style.cssText="border:0;margin:0;width:1px;padding:1px;display:inline;zoom:1",(l.inlineBlockNeedsLayout=3===b.offsetWidth)&&(c.style.zoom=1)),c.removeChild(a),a=b=null)}),function(){var a=z.createElement("div");if(null==l.deleteExpando){l.deleteExpando=!0;try{delete a.test}catch(b){l.deleteExpando=!1}}a=null}(),n.acceptData=function(a){var b=n.noData[(a.nodeName+" ").toLowerCase()],c=+a.nodeType||1;return 1!==c&&9!==c?!1:!b||b!==!0&&a.getAttribute("classid")===b};var N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){if(void 0===c&&1===a.nodeType){var d="data-"+b.replace(O,"-$1").toLowerCase();if(c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}n.data(a,b,c)}else c=void 0}return c}function Q(a){var b;for(b in a)if(("data"!==b||!n.isEmptyObject(a[b]))&&"toJSON"!==b)return!1;return!0}function R(a,b,d,e){if(n.acceptData(a)){var f,g,h=n.expando,i=a.nodeType,j=i?n.cache:a,k=i?a[h]:a[h]&&h;if(k&&j[k]&&(e||j[k].data)||void 0!==d||"string"!=typeof b)return k||(k=i?a[h]=c.pop()||n.guid++:h),j[k]||(j[k]=i?{}:{toJSON:n.noop}),("object"==typeof b||"function"==typeof b)&&(e?j[k]=n.extend(j[k],b):j[k].data=n.extend(j[k].data,b)),g=j[k],e||(g.data||(g.data={}),g=g.data),void 0!==d&&(g[n.camelCase(b)]=d),"string"==typeof b?(f=g[b],null==f&&(f=g[n.camelCase(b)])):f=g,f
}}function S(a,b,c){if(n.acceptData(a)){var d,e,f=a.nodeType,g=f?n.cache:a,h=f?a[n.expando]:n.expando;if(g[h]){if(b&&(d=c?g[h]:g[h].data)){n.isArray(b)?b=b.concat(n.map(b,n.camelCase)):b in d?b=[b]:(b=n.camelCase(b),b=b in d?[b]:b.split(" ")),e=b.length;while(e--)delete d[b[e]];if(c?!Q(d):!n.isEmptyObject(d))return}(c||(delete g[h].data,Q(g[h])))&&(f?n.cleanData([a],!0):l.deleteExpando||g!=g.window?delete g[h]:g[h]=null)}}}n.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(a){return a=a.nodeType?n.cache[a[n.expando]]:a[n.expando],!!a&&!Q(a)},data:function(a,b,c){return R(a,b,c)},removeData:function(a,b){return S(a,b)},_data:function(a,b,c){return R(a,b,c,!0)},_removeData:function(a,b){return S(a,b,!0)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=n.data(f),1===f.nodeType&&!n._data(f,"parsedAttrs"))){c=g.length;while(c--)d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d]));n._data(f,"parsedAttrs",!0)}return e}return"object"==typeof a?this.each(function(){n.data(this,a)}):arguments.length>1?this.each(function(){n.data(this,a,b)}):f?P(f,a,n.data(f,a)):void 0},removeData:function(a){return this.each(function(){n.removeData(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=n._data(a,b),c&&(!d||n.isArray(c)?d=n._data(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return n._data(a,c)||n._data(a,c,{empty:n.Callbacks("once memory").add(function(){n._removeData(a,b+"queue"),n._removeData(a,c)})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=n._data(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var T=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,U=["Top","Right","Bottom","Left"],V=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)},W=n.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)n.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},X=/^(?:checkbox|radio)$/i;!function(){var a=z.createDocumentFragment(),b=z.createElement("div"),c=z.createElement("input");if(b.setAttribute("className","t"),b.innerHTML="  <link/><table></table><a href='/a'>a</a>",l.leadingWhitespace=3===b.firstChild.nodeType,l.tbody=!b.getElementsByTagName("tbody").length,l.htmlSerialize=!!b.getElementsByTagName("link").length,l.html5Clone="<:nav></:nav>"!==z.createElement("nav").cloneNode(!0).outerHTML,c.type="checkbox",c.checked=!0,a.appendChild(c),l.appendChecked=c.checked,b.innerHTML="<textarea>x</textarea>",l.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue,a.appendChild(b),b.innerHTML="<input type='radio' checked='checked' name='t'/>",l.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,l.noCloneEvent=!0,b.attachEvent&&(b.attachEvent("onclick",function(){l.noCloneEvent=!1}),b.cloneNode(!0).click()),null==l.deleteExpando){l.deleteExpando=!0;try{delete b.test}catch(d){l.deleteExpando=!1}}a=b=c=null}(),function(){var b,c,d=z.createElement("div");for(b in{submit:!0,change:!0,focusin:!0})c="on"+b,(l[b+"Bubbles"]=c in a)||(d.setAttribute(c,"t"),l[b+"Bubbles"]=d.attributes[c].expando===!1);d=null}();var Y=/^(?:input|select|textarea)$/i,Z=/^key/,$=/^(?:mouse|contextmenu)|click/,_=/^(?:focusinfocus|focusoutblur)$/,ab=/^([^.]*)(?:\.(.+)|)$/;function bb(){return!0}function cb(){return!1}function db(){try{return z.activeElement}catch(a){}}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=n._data(a);if(r){c.handler&&(i=c,c=i.handler,e=i.selector),c.guid||(c.guid=n.guid++),(g=r.events)||(g=r.events={}),(k=r.handle)||(k=r.handle=function(a){return typeof n===L||a&&n.event.triggered===a.type?void 0:n.event.dispatch.apply(k.elem,arguments)},k.elem=a),b=(b||"").match(F)||[""],h=b.length;while(h--)f=ab.exec(b[h])||[],o=q=f[1],p=(f[2]||"").split(".").sort(),o&&(j=n.event.special[o]||{},o=(e?j.delegateType:j.bindType)||o,j=n.event.special[o]||{},l=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},i),(m=g[o])||(m=g[o]=[],m.delegateCount=0,j.setup&&j.setup.call(a,d,p,k)!==!1||(a.addEventListener?a.addEventListener(o,k,!1):a.attachEvent&&a.attachEvent("on"+o,k))),j.add&&(j.add.call(a,l),l.handler.guid||(l.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,l):m.push(l),n.event.global[o]=!0);a=null}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=n.hasData(a)&&n._data(a);if(r&&(k=r.events)){b=(b||"").match(F)||[""],j=b.length;while(j--)if(h=ab.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=k[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),i=f=m.length;while(f--)g=m[f],!e&&q!==g.origType||c&&c.guid!==g.guid||h&&!h.test(g.namespace)||d&&d!==g.selector&&("**"!==d||!g.selector)||(m.splice(f,1),g.selector&&m.delegateCount--,l.remove&&l.remove.call(a,g));i&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete k[o])}else for(o in k)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(k)&&(delete r.handle,n._removeData(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,l,m,o=[d||z],p=j.call(b,"type")?b.type:b,q=j.call(b,"namespace")?b.namespace.split("."):[];if(h=l=d=d||z,3!==d.nodeType&&8!==d.nodeType&&!_.test(p+n.event.triggered)&&(p.indexOf(".")>=0&&(q=p.split("."),p=q.shift(),q.sort()),g=p.indexOf(":")<0&&"on"+p,b=b[n.expando]?b:new n.Event(p,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=q.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+q.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:n.makeArray(c,[b]),k=n.event.special[p]||{},e||!k.trigger||k.trigger.apply(d,c)!==!1)){if(!e&&!k.noBubble&&!n.isWindow(d)){for(i=k.delegateType||p,_.test(i+p)||(h=h.parentNode);h;h=h.parentNode)o.push(h),l=h;l===(d.ownerDocument||z)&&o.push(l.defaultView||l.parentWindow||a)}m=0;while((h=o[m++])&&!b.isPropagationStopped())b.type=m>1?i:k.bindType||p,f=(n._data(h,"events")||{})[b.type]&&n._data(h,"handle"),f&&f.apply(h,c),f=g&&h[g],f&&f.apply&&n.acceptData(h)&&(b.result=f.apply(h,c),b.result===!1&&b.preventDefault());if(b.type=p,!e&&!b.isDefaultPrevented()&&(!k._default||k._default.apply(o.pop(),c)===!1)&&n.acceptData(d)&&g&&d[p]&&!n.isWindow(d)){l=d[g],l&&(d[g]=null),n.event.triggered=p;try{d[p]()}catch(r){}n.event.triggered=void 0,l&&(d[g]=l)}return b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(n._data(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,g=0;while((e=f.handlers[g++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(e.namespace))&&(a.handleObj=e,a.data=e.data,c=((n.event.special[e.origType]||{}).handle||e.handler).apply(f.elem,i),void 0!==c&&(a.result=c)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!=this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(e=[],f=0;h>f;f++)d=b[f],c=d.selector+" ",void 0===e[c]&&(e[c]=d.needsContext?n(c,this).index(i)>=0:n.find(c,this,null,[i]).length),e[c]&&e.push(d);e.length&&g.push({elem:i,handlers:e})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},fix:function(a){if(a[n.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=$.test(e)?this.mouseHooks:Z.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new n.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=f.srcElement||z),3===a.target.nodeType&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,g.filter?g.filter(a,f):a},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button,g=b.fromElement;return null==a.pageX&&null!=b.clientX&&(d=a.target.ownerDocument||z,e=d.documentElement,c=d.body,a.pageX=b.clientX+(e&&e.scrollLeft||c&&c.scrollLeft||0)-(e&&e.clientLeft||c&&c.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||c&&c.scrollTop||0)-(e&&e.clientTop||c&&c.clientTop||0)),!a.relatedTarget&&g&&(a.relatedTarget=g===a.target?b.toElement:g),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==db()&&this.focus)try{return this.focus(),!1}catch(a){}},delegateType:"focusin"},blur:{trigger:function(){return this===db()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return n.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=n.extend(new n.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?n.event.trigger(e,null,b):n.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=z.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){var d="on"+b;a.detachEvent&&(typeof a[d]===L&&(a[d]=null),a.detachEvent(d,c))},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&(a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault())?bb:cb):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={isDefaultPrevented:cb,isPropagationStopped:cb,isImmediatePropagationStopped:cb,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=bb,a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=bb,a&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=bb,this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),l.submitBubbles||(n.event.special.submit={setup:function(){return n.nodeName(this,"form")?!1:void n.event.add(this,"click._submit keypress._submit",function(a){var b=a.target,c=n.nodeName(b,"input")||n.nodeName(b,"button")?b.form:void 0;c&&!n._data(c,"submitBubbles")&&(n.event.add(c,"submit._submit",function(a){a._submit_bubble=!0}),n._data(c,"submitBubbles",!0))})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&n.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){return n.nodeName(this,"form")?!1:void n.event.remove(this,"._submit")}}),l.changeBubbles||(n.event.special.change={setup:function(){return Y.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(n.event.add(this,"propertychange._change",function(a){"checked"===a.originalEvent.propertyName&&(this._just_changed=!0)}),n.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1),n.event.simulate("change",this,a,!0)})),!1):void n.event.add(this,"beforeactivate._change",function(a){var b=a.target;Y.test(b.nodeName)&&!n._data(b,"changeBubbles")&&(n.event.add(b,"change._change",function(a){!this.parentNode||a.isSimulated||a.isTrigger||n.event.simulate("change",this.parentNode,a,!0)}),n._data(b,"changeBubbles",!0))})},handle:function(a){var b=a.target;return this!==b||a.isSimulated||a.isTrigger||"radio"!==b.type&&"checkbox"!==b.type?a.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return n.event.remove(this,"._change"),!Y.test(this.nodeName)}}),l.focusinBubbles||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a),!0)};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=n._data(d,b);e||d.addEventListener(a,c,!0),n._data(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=n._data(d,b)-1;e?n._data(d,b,e):(d.removeEventListener(a,c,!0),n._removeData(d,b))}}}),n.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(f in a)this.on(f,b,c,a[f],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=cb;else if(!d)return this;return 1===e&&(g=d,d=function(a){return n().off(a),g.apply(this,arguments)},d.guid=g.guid||(g.guid=n.guid++)),this.each(function(){n.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=cb),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});function eb(a){var b=fb.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}var fb="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",gb=/ jQuery\d+="(?:null|\d+)"/g,hb=new RegExp("<(?:"+fb+")[\\s/>]","i"),ib=/^\s+/,jb=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,kb=/<([\w:]+)/,lb=/<tbody/i,mb=/<|&#?\w+;/,nb=/<(?:script|style|link)/i,ob=/checked\s*(?:[^=]|=\s*.checked.)/i,pb=/^$|\/(?:java|ecma)script/i,qb=/^true\/(.*)/,rb=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,sb={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:l.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},tb=eb(z),ub=tb.appendChild(z.createElement("div"));sb.optgroup=sb.option,sb.tbody=sb.tfoot=sb.colgroup=sb.caption=sb.thead,sb.th=sb.td;function vb(a,b){var c,d,e=0,f=typeof a.getElementsByTagName!==L?a.getElementsByTagName(b||"*"):typeof a.querySelectorAll!==L?a.querySelectorAll(b||"*"):void 0;if(!f)for(f=[],c=a.childNodes||a;null!=(d=c[e]);e++)!b||n.nodeName(d,b)?f.push(d):n.merge(f,vb(d,b));return void 0===b||b&&n.nodeName(a,b)?n.merge([a],f):f}function wb(a){X.test(a.type)&&(a.defaultChecked=a.checked)}function xb(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function yb(a){return a.type=(null!==n.find.attr(a,"type"))+"/"+a.type,a}function zb(a){var b=qb.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function Ab(a,b){for(var c,d=0;null!=(c=a[d]);d++)n._data(c,"globalEval",!b||n._data(b[d],"globalEval"))}function Bb(a,b){if(1===b.nodeType&&n.hasData(a)){var c,d,e,f=n._data(a),g=n._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;e>d;d++)n.event.add(b,c,h[c][d])}g.data&&(g.data=n.extend({},g.data))}}function Cb(a,b){var c,d,e;if(1===b.nodeType){if(c=b.nodeName.toLowerCase(),!l.noCloneEvent&&b[n.expando]){e=n._data(b);for(d in e.events)n.removeEvent(b,d,e.handle);b.removeAttribute(n.expando)}"script"===c&&b.text!==a.text?(yb(b).text=a.text,zb(b)):"object"===c?(b.parentNode&&(b.outerHTML=a.outerHTML),l.html5Clone&&a.innerHTML&&!n.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):"input"===c&&X.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):"option"===c?b.defaultSelected=b.selected=a.defaultSelected:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}}n.extend({clone:function(a,b,c){var d,e,f,g,h,i=n.contains(a.ownerDocument,a);if(l.html5Clone||n.isXMLDoc(a)||!hb.test("<"+a.nodeName+">")?f=a.cloneNode(!0):(ub.innerHTML=a.outerHTML,ub.removeChild(f=ub.firstChild)),!(l.noCloneEvent&&l.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(d=vb(f),h=vb(a),g=0;null!=(e=h[g]);++g)d[g]&&Cb(e,d[g]);if(b)if(c)for(h=h||vb(a),d=d||vb(f),g=0;null!=(e=h[g]);g++)Bb(e,d[g]);else Bb(a,f);return d=vb(f,"script"),d.length>0&&Ab(d,!i&&vb(a,"script")),d=h=e=null,f},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,k,m=a.length,o=eb(b),p=[],q=0;m>q;q++)if(f=a[q],f||0===f)if("object"===n.type(f))n.merge(p,f.nodeType?[f]:f);else if(mb.test(f)){h=h||o.appendChild(b.createElement("div")),i=(kb.exec(f)||["",""])[1].toLowerCase(),k=sb[i]||sb._default,h.innerHTML=k[1]+f.replace(jb,"<$1></$2>")+k[2],e=k[0];while(e--)h=h.lastChild;if(!l.leadingWhitespace&&ib.test(f)&&p.push(b.createTextNode(ib.exec(f)[0])),!l.tbody){f="table"!==i||lb.test(f)?"<table>"!==k[1]||lb.test(f)?0:h:h.firstChild,e=f&&f.childNodes.length;while(e--)n.nodeName(j=f.childNodes[e],"tbody")&&!j.childNodes.length&&f.removeChild(j)}n.merge(p,h.childNodes),h.textContent="";while(h.firstChild)h.removeChild(h.firstChild);h=o.lastChild}else p.push(b.createTextNode(f));h&&o.removeChild(h),l.appendChecked||n.grep(vb(p,"input"),wb),q=0;while(f=p[q++])if((!d||-1===n.inArray(f,d))&&(g=n.contains(f.ownerDocument,f),h=vb(o.appendChild(f),"script"),g&&Ab(h),c)){e=0;while(f=h[e++])pb.test(f.type||"")&&c.push(f)}return h=null,o},cleanData:function(a,b){for(var d,e,f,g,h=0,i=n.expando,j=n.cache,k=l.deleteExpando,m=n.event.special;null!=(d=a[h]);h++)if((b||n.acceptData(d))&&(f=d[i],g=f&&j[f])){if(g.events)for(e in g.events)m[e]?n.event.remove(d,e):n.removeEvent(d,e,g.handle);j[f]&&(delete j[f],k?delete d[i]:typeof d.removeAttribute!==L?d.removeAttribute(i):d[i]=null,c.push(f))}}}),n.fn.extend({text:function(a){return W(this,function(a){return void 0===a?n.text(this):this.empty().append((this[0]&&this[0].ownerDocument||z).createTextNode(a))},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=xb(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=xb(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?n.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||n.cleanData(vb(c)),c.parentNode&&(b&&n.contains(c.ownerDocument,c)&&Ab(vb(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++){1===a.nodeType&&n.cleanData(vb(a,!1));while(a.firstChild)a.removeChild(a.firstChild);a.options&&n.nodeName(a,"select")&&(a.options.length=0)}return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return W(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a)return 1===b.nodeType?b.innerHTML.replace(gb,""):void 0;if(!("string"!=typeof a||nb.test(a)||!l.htmlSerialize&&hb.test(a)||!l.leadingWhitespace&&ib.test(a)||sb[(kb.exec(a)||["",""])[1].toLowerCase()])){a=a.replace(jb,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(vb(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,n.cleanData(vb(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,k=this.length,m=this,o=k-1,p=a[0],q=n.isFunction(p);if(q||k>1&&"string"==typeof p&&!l.checkClone&&ob.test(p))return this.each(function(c){var d=m.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(k&&(i=n.buildFragment(a,this[0].ownerDocument,!1,this),c=i.firstChild,1===i.childNodes.length&&(i=c),c)){for(g=n.map(vb(i,"script"),yb),f=g.length;k>j;j++)d=i,j!==o&&(d=n.clone(d,!0,!0),f&&n.merge(g,vb(d,"script"))),b.call(this[j],d,j);if(f)for(h=g[g.length-1].ownerDocument,n.map(g,zb),j=0;f>j;j++)d=g[j],pb.test(d.type||"")&&!n._data(d,"globalEval")&&n.contains(h,d)&&(d.src?n._evalUrl&&n._evalUrl(d.src):n.globalEval((d.text||d.textContent||d.innerHTML||"").replace(rb,"")));i=c=null}return this}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=0,e=[],g=n(a),h=g.length-1;h>=d;d++)c=d===h?this:this.clone(!0),n(g[d])[b](c),f.apply(e,c.get());return this.pushStack(e)}});var Db,Eb={};function Fb(b,c){var d=n(c.createElement(b)).appendTo(c.body),e=a.getDefaultComputedStyle?a.getDefaultComputedStyle(d[0]).display:n.css(d[0],"display");return d.detach(),e}function Gb(a){var b=z,c=Eb[a];return c||(c=Fb(a,b),"none"!==c&&c||(Db=(Db||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=(Db[0].contentWindow||Db[0].contentDocument).document,b.write(),b.close(),c=Fb(a,b),Db.detach()),Eb[a]=c),c}!function(){var a,b,c=z.createElement("div"),d="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;padding:0;margin:0;border:0";c.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",a=c.getElementsByTagName("a")[0],a.style.cssText="float:left;opacity:.5",l.opacity=/^0.5/.test(a.style.opacity),l.cssFloat=!!a.style.cssFloat,c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===c.style.backgroundClip,a=c=null,l.shrinkWrapBlocks=function(){var a,c,e,f;if(null==b){if(a=z.getElementsByTagName("body")[0],!a)return;f="border:0;width:0;height:0;position:absolute;top:0;left:-9999px",c=z.createElement("div"),e=z.createElement("div"),a.appendChild(c).appendChild(e),b=!1,typeof e.style.zoom!==L&&(e.style.cssText=d+";width:1px;padding:1px;zoom:1",e.innerHTML="<div></div>",e.firstChild.style.width="5px",b=3!==e.offsetWidth),a.removeChild(c),a=c=e=null}return b}}();var Hb=/^margin/,Ib=new RegExp("^("+T+")(?!px)[a-z%]+$","i"),Jb,Kb,Lb=/^(top|right|bottom|left)$/;a.getComputedStyle?(Jb=function(a){return a.ownerDocument.defaultView.getComputedStyle(a,null)},Kb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Jb(a),g=c?c.getPropertyValue(b)||c[b]:void 0,c&&(""!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),Ib.test(g)&&Hb.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0===g?g:g+""}):z.documentElement.currentStyle&&(Jb=function(a){return a.currentStyle},Kb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Jb(a),g=c?c[b]:void 0,null==g&&h&&h[b]&&(g=h[b]),Ib.test(g)&&!Lb.test(b)&&(d=h.left,e=a.runtimeStyle,f=e&&e.left,f&&(e.left=a.currentStyle.left),h.left="fontSize"===b?"1em":g,g=h.pixelLeft+"px",h.left=d,f&&(e.left=f)),void 0===g?g:g+""||"auto"});function Mb(a,b){return{get:function(){var c=a();if(null!=c)return c?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d,e,f,g,h=z.createElement("div"),i="border:0;width:0;height:0;position:absolute;top:0;left:-9999px",j="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;padding:0;margin:0;border:0";h.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",b=h.getElementsByTagName("a")[0],b.style.cssText="float:left;opacity:.5",l.opacity=/^0.5/.test(b.style.opacity),l.cssFloat=!!b.style.cssFloat,h.style.backgroundClip="content-box",h.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===h.style.backgroundClip,b=h=null,n.extend(l,{reliableHiddenOffsets:function(){if(null!=c)return c;var a,b,d,e=z.createElement("div"),f=z.getElementsByTagName("body")[0];if(f)return e.setAttribute("className","t"),e.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",a=z.createElement("div"),a.style.cssText=i,f.appendChild(a).appendChild(e),e.innerHTML="<table><tr><td></td><td>t</td></tr></table>",b=e.getElementsByTagName("td"),b[0].style.cssText="padding:0;margin:0;border:0;display:none",d=0===b[0].offsetHeight,b[0].style.display="",b[1].style.display="none",c=d&&0===b[0].offsetHeight,f.removeChild(a),e=f=null,c},boxSizing:function(){return null==d&&k(),d},boxSizingReliable:function(){return null==e&&k(),e},pixelPosition:function(){return null==f&&k(),f},reliableMarginRight:function(){var b,c,d,e;if(null==g&&a.getComputedStyle){if(b=z.getElementsByTagName("body")[0],!b)return;c=z.createElement("div"),d=z.createElement("div"),c.style.cssText=i,b.appendChild(c).appendChild(d),e=d.appendChild(z.createElement("div")),e.style.cssText=d.style.cssText=j,e.style.marginRight=e.style.width="0",d.style.width="1px",g=!parseFloat((a.getComputedStyle(e,null)||{}).marginRight),b.removeChild(c)}return g}});function k(){var b,c,h=z.getElementsByTagName("body")[0];h&&(b=z.createElement("div"),c=z.createElement("div"),b.style.cssText=i,h.appendChild(b).appendChild(c),c.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;display:block;padding:1px;border:1px;width:4px;margin-top:1%;top:1%",n.swap(h,null!=h.style.zoom?{zoom:1}:{},function(){d=4===c.offsetWidth}),e=!0,f=!1,g=!0,a.getComputedStyle&&(f="1%"!==(a.getComputedStyle(c,null)||{}).top,e="4px"===(a.getComputedStyle(c,null)||{width:"4px"}).width),h.removeChild(b),c=h=null)}}(),n.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var Nb=/alpha\([^)]*\)/i,Ob=/opacity\s*=\s*([^)]*)/,Pb=/^(none|table(?!-c[ea]).+)/,Qb=new RegExp("^("+T+")(.*)$","i"),Rb=new RegExp("^([+-])=("+T+")","i"),Sb={position:"absolute",visibility:"hidden",display:"block"},Tb={letterSpacing:0,fontWeight:400},Ub=["Webkit","O","Moz","ms"];function Vb(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=Ub.length;while(e--)if(b=Ub[e]+c,b in a)return b;return d}function Wb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=n._data(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&V(d)&&(f[g]=n._data(d,"olddisplay",Gb(d.nodeName)))):f[g]||(e=V(d),(c&&"none"!==c||!e)&&n._data(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}function Xb(a,b,c){var d=Qb.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Yb(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+U[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+U[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+U[f]+"Width",!0,e))):(g+=n.css(a,"padding"+U[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+U[f]+"Width",!0,e)));return g}function Zb(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=Jb(a),g=l.boxSizing()&&"border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=Kb(a,b,f),(0>e||null==e)&&(e=a.style[b]),Ib.test(e))return e;d=g&&(l.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Yb(a,b,c||(g?"border":"content"),d,f)+"px"}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Kb(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":l.cssFloat?"cssFloat":"styleFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;if(b=n.cssProps[h]||(n.cssProps[h]=Vb(i,h)),g=n.cssHooks[b]||n.cssHooks[h],void 0===c)return g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];if(f=typeof c,"string"===f&&(e=Rb.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(n.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||n.cssNumber[h]||(c+="px"),l.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),!(g&&"set"in g&&void 0===(c=g.set(a,c,d)))))try{i[b]="",i[b]=c}catch(j){}}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Vb(a.style,h)),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(f=g.get(a,!0,c)),void 0===f&&(f=Kb(a,b,d)),"normal"===f&&b in Tb&&(f=Tb[b]),""===c||c?(e=parseFloat(f),c===!0||n.isNumeric(e)?e||0:f):f}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?0===a.offsetWidth&&Pb.test(n.css(a,"display"))?n.swap(a,Sb,function(){return Zb(a,b,d)}):Zb(a,b,d):void 0},set:function(a,c,d){var e=d&&Jb(a);return Xb(a,c,d?Yb(a,b,d,l.boxSizing()&&"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),l.opacity||(n.cssHooks.opacity={get:function(a,b){return Ob.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=n.isNumeric(b)?"alpha(opacity="+100*b+")":"",f=d&&d.filter||c.filter||"";c.zoom=1,(b>=1||""===b)&&""===n.trim(f.replace(Nb,""))&&c.removeAttribute&&(c.removeAttribute("filter"),""===b||d&&!d.filter)||(c.filter=Nb.test(f)?f.replace(Nb,e):f+" "+e)}}),n.cssHooks.marginRight=Mb(l.reliableMarginRight,function(a,b){return b?n.swap(a,{display:"inline-block"},Kb,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+U[d]+b]=f[d]||f[d-2]||f[0];return e}},Hb.test(a)||(n.cssHooks[a+b].set=Xb)}),n.fn.extend({css:function(a,b){return W(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=Jb(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)
},a,b,arguments.length>1)},show:function(){return Wb(this,!0)},hide:function(){return Wb(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){V(this)?n(this).show():n(this).hide()})}});function $b(a,b,c,d,e){return new $b.prototype.init(a,b,c,d,e)}n.Tween=$b,$b.prototype={constructor:$b,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=$b.propHooks[this.prop];return a&&a.get?a.get(this):$b.propHooks._default.get(this)},run:function(a){var b,c=$b.propHooks[this.prop];return this.pos=b=this.options.duration?n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):$b.propHooks._default.set(this),this}},$b.prototype.init.prototype=$b.prototype,$b.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[n.cssProps[a.prop]]||n.cssHooks[a.prop])?n.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},$b.propHooks.scrollTop=$b.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},n.fx=$b.prototype.init,n.fx.step={};var _b,ac,bc=/^(?:toggle|show|hide)$/,cc=new RegExp("^(?:([+-])=|)("+T+")([a-z%]*)$","i"),dc=/queueHooks$/,ec=[jc],fc={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=cc.exec(b),f=e&&e[3]||(n.cssNumber[a]?"":"px"),g=(n.cssNumber[a]||"px"!==f&&+d)&&cc.exec(n.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,n.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function gc(){return setTimeout(function(){_b=void 0}),_b=n.now()}function hc(a,b){var c,d={height:a},e=0;for(b=b?1:0;4>e;e+=2-b)c=U[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function ic(a,b,c){for(var d,e=(fc[b]||[]).concat(fc["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function jc(a,b,c){var d,e,f,g,h,i,j,k,m=this,o={},p=a.style,q=a.nodeType&&V(a),r=n._data(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,m.always(function(){m.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=n.css(a,"display"),k=Gb(a.nodeName),"none"===j&&(j=k),"inline"===j&&"none"===n.css(a,"float")&&(l.inlineBlockNeedsLayout&&"inline"!==k?p.zoom=1:p.display="inline-block")),c.overflow&&(p.overflow="hidden",l.shrinkWrapBlocks()||m.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],bc.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(q?"hide":"show")){if("show"!==e||!r||void 0===r[d])continue;q=!0}o[d]=r&&r[d]||n.style(a,d)}if(!n.isEmptyObject(o)){r?"hidden"in r&&(q=r.hidden):r=n._data(a,"fxshow",{}),f&&(r.hidden=!q),q?n(a).show():m.done(function(){n(a).hide()}),m.done(function(){var b;n._removeData(a,"fxshow");for(b in o)n.style(a,b,o[b])});for(d in o)g=ic(q?r[d]:0,d,m),d in r||(r[d]=g.start,q&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function kc(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function lc(a,b,c){var d,e,f=0,g=ec.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=_b||gc(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:_b||gc(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(kc(k,j.opts.specialEasing);g>f;f++)if(d=ec[f].call(j,a,k,j.opts))return d;return n.map(k,ic,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(lc,{tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],fc[c]=fc[c]||[],fc[c].unshift(b)},prefilter:function(a,b){b?ec.unshift(a):ec.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(V).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=lc(this,n.extend({},a),f);(e||n._data(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=n._data(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&dc.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=n._data(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(hc(b,!0),a,d,e)}}),n.each({slideDown:hc("show"),slideUp:hc("hide"),slideToggle:hc("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=n.timers,c=0;for(_b=n.now();c<b.length;c++)a=b[c],a()||b[c]!==a||b.splice(c--,1);b.length||n.fx.stop(),_b=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){ac||(ac=setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){clearInterval(ac),ac=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(a,b){return a=n.fx?n.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a,b,c,d,e=z.createElement("div");e.setAttribute("className","t"),e.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",a=e.getElementsByTagName("a")[0],c=z.createElement("select"),d=c.appendChild(z.createElement("option")),b=e.getElementsByTagName("input")[0],a.style.cssText="top:1px",l.getSetAttribute="t"!==e.className,l.style=/top/.test(a.getAttribute("style")),l.hrefNormalized="/a"===a.getAttribute("href"),l.checkOn=!!b.value,l.optSelected=d.selected,l.enctype=!!z.createElement("form").enctype,c.disabled=!0,l.optDisabled=!d.disabled,b=z.createElement("input"),b.setAttribute("value",""),l.input=""===b.getAttribute("value"),b.value="t",b.setAttribute("type","radio"),l.radioValue="t"===b.value,a=b=c=d=e=null}();var mc=/\r/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(mc,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.text(a)}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(l.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)if(d=e[g],n.inArray(n.valHooks.option.get(d),f)>=0)try{d.selected=c=!0}catch(h){d.scrollHeight}else d.selected=!1;return c||(a.selectedIndex=-1),e}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>=0:void 0}},l.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var nc,oc,pc=n.expr.attrHandle,qc=/^(?:checked|selected)$/i,rc=l.getSetAttribute,sc=l.input;n.fn.extend({attr:function(a,b){return W(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===L?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),d=n.attrHooks[b]||(n.expr.match.bool.test(b)?oc:nc)),void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=n.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void n.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(F);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)?sc&&rc||!qc.test(c)?a[d]=!1:a[n.camelCase("default-"+c)]=a[d]=!1:n.attr(a,c,""),a.removeAttribute(rc?c:d)},attrHooks:{type:{set:function(a,b){if(!l.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),oc={set:function(a,b,c){return b===!1?n.removeAttr(a,c):sc&&rc||!qc.test(c)?a.setAttribute(!rc&&n.propFix[c]||c,c):a[n.camelCase("default-"+c)]=a[c]=!0,c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=pc[b]||n.find.attr;pc[b]=sc&&rc||!qc.test(b)?function(a,b,d){var e,f;return d||(f=pc[b],pc[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,pc[b]=f),e}:function(a,b,c){return c?void 0:a[n.camelCase("default-"+b)]?b.toLowerCase():null}}),sc&&rc||(n.attrHooks.value={set:function(a,b,c){return n.nodeName(a,"input")?void(a.defaultValue=b):nc&&nc.set(a,b,c)}}),rc||(nc={set:function(a,b,c){var d=a.getAttributeNode(c);return d||a.setAttributeNode(d=a.ownerDocument.createAttribute(c)),d.value=b+="","value"===c||b===a.getAttribute(c)?b:void 0}},pc.id=pc.name=pc.coords=function(a,b,c){var d;return c?void 0:(d=a.getAttributeNode(b))&&""!==d.value?d.value:null},n.valHooks.button={get:function(a,b){var c=a.getAttributeNode(b);return c&&c.specified?c.value:void 0},set:nc.set},n.attrHooks.contenteditable={set:function(a,b,c){nc.set(a,""===b?!1:b,c)}},n.each(["width","height"],function(a,b){n.attrHooks[b]={set:function(a,c){return""===c?(a.setAttribute(b,"auto"),c):void 0}}})),l.style||(n.attrHooks.style={get:function(a){return a.style.cssText||void 0},set:function(a,b){return a.style.cssText=b+""}});var tc=/^(?:input|select|textarea|button|object)$/i,uc=/^(?:a|area)$/i;n.fn.extend({prop:function(a,b){return W(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return a=n.propFix[a]||a,this.each(function(){try{this[a]=void 0,delete this[a]}catch(b){}})}}),n.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!n.isXMLDoc(a),f&&(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=n.find.attr(a,"tabindex");return b?parseInt(b,10):tc.test(a.nodeName)||uc.test(a.nodeName)&&a.href?0:-1}}}}),l.hrefNormalized||n.each(["href","src"],function(a,b){n.propHooks[b]={get:function(a){return a.getAttribute(b,4)}}}),l.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this}),l.enctype||(n.propFix.enctype="encoding");var vc=/[\t\r\n\f]/g;n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j="string"==typeof a&&a;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(F)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(vc," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=n.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j=0===arguments.length||"string"==typeof a&&a;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(F)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(vc," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?n.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(n.isFunction(a)?function(c){n(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=n(this),f=a.match(F)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===L||"boolean"===c)&&(this.className&&n._data(this,"__className__",this.className),this.className=this.className||a===!1?"":n._data(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(vc," ").indexOf(b)>=0)return!0;return!1}}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var wc=n.now(),xc=/\?/,yc=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;n.parseJSON=function(b){if(a.JSON&&a.JSON.parse)return a.JSON.parse(b+"");var c,d=null,e=n.trim(b+"");return e&&!n.trim(e.replace(yc,function(a,b,e,f){return c&&b&&(d=0),0===d?a:(c=e||b,d+=!f-!e,"")}))?Function("return "+e)():n.error("Invalid JSON: "+b)},n.parseXML=function(b){var c,d;if(!b||"string"!=typeof b)return null;try{a.DOMParser?(d=new DOMParser,c=d.parseFromString(b,"text/xml")):(c=new ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b))}catch(e){c=void 0}return c&&c.documentElement&&!c.getElementsByTagName("parsererror").length||n.error("Invalid XML: "+b),c};var zc,Ac,Bc=/#.*$/,Cc=/([?&])_=[^&]*/,Dc=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Ec=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Fc=/^(?:GET|HEAD)$/,Gc=/^\/\//,Hc=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Ic={},Jc={},Kc="*/".concat("*");try{Ac=location.href}catch(Lc){Ac=z.createElement("a"),Ac.href="",Ac=Ac.href}zc=Hc.exec(Ac.toLowerCase())||[];function Mc(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(F)||[];if(n.isFunction(c))while(d=f[e++])"+"===d.charAt(0)?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Nc(a,b,c,d){var e={},f=a===Jc;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Oc(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((e[d]?a:c||(c={}))[d]=b[d]);return c&&n.extend(!0,a,c),a}function Pc(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===e&&(e=a.mimeType||b.getResponseHeader("Content-Type"));if(e)for(g in h)if(h[g]&&h[g].test(e)){i.unshift(g);break}if(i[0]in c)f=i[0];else{for(g in c){if(!i[0]||a.converters[g+" "+i[0]]){f=g;break}d||(d=g)}f=f||d}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Qc(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ac,type:"GET",isLocal:Ec.test(zc[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Kc,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Oc(Oc(a,n.ajaxSettings),b):Oc(n.ajaxSettings,a)},ajaxPrefilter:Mc(Ic),ajaxTransport:Mc(Jc),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=n.ajaxSetup({},b),l=k.context||k,m=k.context&&(l.nodeType||l.jquery)?n(l):n.event,o=n.Deferred(),p=n.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!j){j={};while(b=Dc.exec(f))j[b[1].toLowerCase()]=b[2]}b=j[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?f:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return i&&i.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||Ac)+"").replace(Bc,"").replace(Gc,zc[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=n.trim(k.dataType||"*").toLowerCase().match(F)||[""],null==k.crossDomain&&(c=Hc.exec(k.url.toLowerCase()),k.crossDomain=!(!c||c[1]===zc[1]&&c[2]===zc[2]&&(c[3]||("http:"===c[1]?"80":"443"))===(zc[3]||("http:"===zc[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=n.param(k.data,k.traditional)),Nc(Ic,k,b,v),2===t)return v;h=k.global,h&&0===n.active++&&n.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!Fc.test(k.type),e=k.url,k.hasContent||(k.data&&(e=k.url+=(xc.test(e)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=Cc.test(e)?e.replace(Cc,"$1_="+wc++):e+(xc.test(e)?"&":"?")+"_="+wc++)),k.ifModified&&(n.lastModified[e]&&v.setRequestHeader("If-Modified-Since",n.lastModified[e]),n.etag[e]&&v.setRequestHeader("If-None-Match",n.etag[e])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+Kc+"; q=0.01":""):k.accepts["*"]);for(d in k.headers)v.setRequestHeader(d,k.headers[d]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(d in{success:1,error:1,complete:1})v[d](k[d]);if(i=Nc(Jc,k,b,v)){v.readyState=1,h&&m.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,i.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,c,d){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),i=void 0,f=d||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,c&&(u=Pc(k,v,c)),u=Qc(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(n.lastModified[e]=w),w=v.getResponseHeader("etag"),w&&(n.etag[e]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,h&&m.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),h&&(m.trigger("ajaxComplete",[v,k]),--n.active||n.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){if(n.isFunction(a))return this.each(function(b){n(this).wrapAll(a.call(this,b))});if(this[0]){var b=n(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&1===a.firstChild.nodeType)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return this.each(n.isFunction(a)?function(b){n(this).wrapInner(a.call(this,b))}:function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0||!l.reliableHiddenOffsets()&&"none"===(a.style&&a.style.display||n.css(a,"display"))},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var Rc=/%20/g,Sc=/\[\]$/,Tc=/\r?\n/g,Uc=/^(?:submit|button|image|reset|file)$/i,Vc=/^(?:input|select|textarea|keygen)/i;function Wc(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||Sc.test(a)?d(a,e):Wc(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Wc(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Wc(c,a[c],b,e);return d.join("&").replace(Rc,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&Vc.test(this.nodeName)&&!Uc.test(a)&&(this.checked||!X.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(Tc,"\r\n")}}):{name:b.name,value:c.replace(Tc,"\r\n")}}).get()}}),n.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&$c()||_c()}:$c;var Xc=0,Yc={},Zc=n.ajaxSettings.xhr();a.ActiveXObject&&n(a).on("unload",function(){for(var a in Yc)Yc[a](void 0,!0)}),l.cors=!!Zc&&"withCredentials"in Zc,Zc=l.ajax=!!Zc,Zc&&n.ajaxTransport(function(a){if(!a.crossDomain||l.cors){var b;return{send:function(c,d){var e,f=a.xhr(),g=++Xc;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)void 0!==c[e]&&f.setRequestHeader(e,c[e]+"");f.send(a.hasContent&&a.data||null),b=function(c,e){var h,i,j;if(b&&(e||4===f.readyState))if(delete Yc[g],b=void 0,f.onreadystatechange=n.noop,e)4!==f.readyState&&f.abort();else{j={},h=f.status,"string"==typeof f.responseText&&(j.text=f.responseText);try{i=f.statusText}catch(k){i=""}h||!a.isLocal||a.crossDomain?1223===h&&(h=204):h=j.text?200:404}j&&d(h,i,j,f.getAllResponseHeaders())},a.async?4===f.readyState?setTimeout(b):f.onreadystatechange=Yc[g]=b:b()},abort:function(){b&&b(void 0,!0)}}}});function $c(){try{return new a.XMLHttpRequest}catch(b){}}function _c(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c=z.head||n("head")[0]||z.documentElement;return{send:function(d,e){b=z.createElement("script"),b.async=!0,a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(a,c){(c||!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,b.parentNode&&b.parentNode.removeChild(b),b=null,c||e(200,"success"))},c.insertBefore(b,c.firstChild)},abort:function(){b&&b.onload(void 0,!0)}}}});var ad=[],bd=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=ad.pop()||n.expando+"_"+wc++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(bd.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&bd.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(bd,"$1"+e):b.jsonp!==!1&&(b.url+=(xc.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,ad.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||z;var d=v.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=n.buildFragment([a],b,e),e&&e.length&&n(e).remove(),n.merge([],d.childNodes))};var cd=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&cd)return cd.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=a.slice(h,a.length),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(f="POST"),g.length>0&&n.ajax({url:a,type:f,dataType:"html",data:b}).done(function(a){e=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,e||[a.responseText,b,a])}),this},n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};var dd=a.document.documentElement;function ed(a){return n.isWindow(a)?a:9===a.nodeType?a.defaultView||a.parentWindow:!1}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&n.inArray("auto",[f,i])>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d={top:0,left:0},e=this[0],f=e&&e.ownerDocument;if(f)return b=f.documentElement,n.contains(b,e)?(typeof e.getBoundingClientRect!==L&&(d=e.getBoundingClientRect()),c=ed(f),{top:d.top+(c.pageYOffset||b.scrollTop)-(b.clientTop||0),left:d.left+(c.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}):d},position:function(){if(this[0]){var a,b,c={top:0,left:0},d=this[0];return"fixed"===n.css(d,"position")?b=d.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(c=a.offset()),c.top+=n.css(a[0],"borderTopWidth",!0),c.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-c.top-n.css(d,"marginTop",!0),left:b.left-c.left-n.css(d,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||dd;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||dd})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c=/Y/.test(b);n.fn[a]=function(d){return W(this,function(a,d,e){var f=ed(a);return void 0===e?f?b in f?f[b]:f.document.documentElement[d]:a[d]:void(f?f.scrollTo(c?n(f).scrollLeft():e,c?e:n(f).scrollTop()):a[d]=e)},a,d,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=Mb(l.pixelPosition,function(a,c){return c?(c=Kb(a,b),Ib.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return W(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var fd=a.jQuery,gd=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=gd),b&&a.jQuery===n&&(a.jQuery=fd),n},typeof b===L&&(a.jQuery=a.$=n),n});
;/*-------------------------------  main.js  ------------------------------------*/
    $(document).ready(function() {

        /*! http://mths.be/placeholder v2.0.8 by @mathias */
        ;
        (function(window, document, $) {

            // Opera Mini v7 doesn’t support placeholder although its DOM seems to indicate so
            var isOperaMini = Object.prototype.toString.call(window.operamini) == '[object OperaMini]';
            var isInputSupported = 'placeholder' in document.createElement('input') && !isOperaMini;
            var isTextareaSupported = 'placeholder' in document.createElement('textarea') && !isOperaMini;
            var prototype = $.fn;
            var valHooks = $.valHooks;
            var propHooks = $.propHooks;
            var hooks;
            var placeholder;

            if (isInputSupported && isTextareaSupported) {

                placeholder = prototype.placeholder = function() {
                    return this;
                };

                placeholder.input = placeholder.textarea = true;

            } else {

                placeholder = prototype.placeholder = function() {
                    var $this = this;
                    $this
                        .filter((isInputSupported ? 'textarea' : ':input') + '[placeholder]')
                        .not('.placeholder')
                        .bind({
                            'focus.placeholder': clearPlaceholder,
                            'blur.placeholder': setPlaceholder
                        })
                        .data('placeholder-enabled', true)
                        .trigger('blur.placeholder');
                    return $this;
                };

                placeholder.input = isInputSupported;
                placeholder.textarea = isTextareaSupported;

                hooks = {
                    'get': function(element) {
                        var $element = $(element);

                        var $passwordInput = $element.data('placeholder-password');
                        if ($passwordInput) {
                            return $passwordInput[0].value;
                        }

                        return $element.data('placeholder-enabled') && $element.hasClass('placeholder') ? '' : element.value;
                    },
                    'set': function(element, value) {
                        var $element = $(element);

                        var $passwordInput = $element.data('placeholder-password');
                        if ($passwordInput) {
                            return $passwordInput[0].value = value;
                        }

                        if (!$element.data('placeholder-enabled')) {
                            return element.value = value;
                        }
                        if (value == '') {
                            element.value = value;
                            // Issue #56: Setting the placeholder causes problems if the element continues to have focus.
                            if (element != safeActiveElement()) {
                                // We can't use `triggerHandler` here because of dummy text/password inputs :(
                                setPlaceholder.call(element);
                            }
                        } else if ($element.hasClass('placeholder')) {
                            clearPlaceholder.call(element, true, value) || (element.value = value);
                        } else {
                            element.value = value;
                        }
                        // `set` can not return `undefined`; see http://jsapi.info/jquery/1.7.1/val#L2363
                        return $element;
                    }
                };

                if (!isInputSupported) {
                    valHooks.input = hooks;
                    propHooks.value = hooks;
                }
                if (!isTextareaSupported) {
                    valHooks.textarea = hooks;
                    propHooks.value = hooks;
                }

                $(function() {
                    // Look for forms
                    $(document).delegate('form', 'submit.placeholder', function() {
                        // Clear the placeholder values so they don't get submitted
                        var $inputs = $('.placeholder', this).each(clearPlaceholder);
                        setTimeout(function() {
                            $inputs.each(setPlaceholder);
                        }, 10);
                    });
                });

                // Clear placeholder values upon page reload
                $(window).bind('beforeunload.placeholder', function() {
                    $('.placeholder').each(function() {
                        this.value = '';
                    });
                });

            }

            function args(elem) {
                // Return an object of element attributes
                var newAttrs = {};
                var rinlinejQuery = /^jQuery\d+$/;
                $.each(elem.attributes, function(i, attr) {
                    if (attr.specified && !rinlinejQuery.test(attr.name)) {
                        newAttrs[attr.name] = attr.value;
                    }
                });
                return newAttrs;
            }

            function clearPlaceholder(event, value) {
                var input = this;
                var $input = $(input);
                if (input.value == $input.attr('placeholder') && $input.hasClass('placeholder')) {
                    if ($input.data('placeholder-password')) {
                        $input = $input.hide().next().show().attr('id', $input.removeAttr('id').data('placeholder-id'));
                        // If `clearPlaceholder` was called from `$.valHooks.input.set`
                        if (event === true) {
                            return $input[0].value = value;
                        }
                        $input.focus();
                    } else {
                        input.value = '';
                        $input.removeClass('placeholder');
                        input == safeActiveElement() && input.select();
                    }
                }
            }

            function setPlaceholder() {
                var $replacement;
                var input = this;
                var $input = $(input);
                var id = this.id;
                if (input.value == '') {
                    if (input.type == 'password') {
                        if (!$input.data('placeholder-textinput')) {
                            try {
                                $replacement = $input.clone().attr({
                                    'type': 'text'
                                });
                            } catch (e) {
                                $replacement = $('<input>').attr($.extend(args(this), {
                                    'type': 'text'
                                }));
                            }
                            $replacement
                                .removeAttr('name')
                                .data({
                                    'placeholder-password': $input,
                                    'placeholder-id': id
                                })
                                .bind('focus.placeholder', clearPlaceholder);
                            $input
                                .data({
                                    'placeholder-textinput': $replacement,
                                    'placeholder-id': id
                                })
                                .before($replacement);
                        }
                        $input = $input.removeAttr('id').hide().prev().attr('id', id).show();
                        // Note: `$input[0] != input` now!
                    }
                    $input.addClass('placeholder');
                    $input[0].value = $input.attr('placeholder');
                } else {
                    $input.removeClass('placeholder');
                }
            }

            function safeActiveElement() {
                // Avoid IE9 `document.activeElement` of death
                // https://github.com/mathiasbynens/jquery-placeholder/pull/99
                try {
                    return document.activeElement;
                } catch (exception) {}
            }

        }(this, document, jQuery));



        if (!Modernizr.input.placeholder) {
            $('input, textarea').placeholder();
        }

        /*-----------------------*/
        $(window).load(function() {

            jQuery.fn.liQuotes = function(options) {
                var o = jQuery.extend({}, options);
                return this.each(function() {
                    htmlreplace($(this));

                    function htmlreplace(element) {
                        if (!element) element = document.body;
                        var nodes = $(element).contents().each(function() {
                            if (this.nodeType == Node.TEXT_NODE) {
                                $(this).wrap('<span class="node_t"/>');
                            } else {
                                htmlreplace(this);
                            }
                        });
                    }
                    $('.node_t').each(function() {
                        var el = $(this),
                            str = el.html(),
                            raquo_one = /'\s/g,
                            laquo_one = /\s'/g,
                            raquo_two = /"\s/g,
                            laquo_two = /\s"/g,
                            raquo_brack_one = /'\)/g,
                            laquo_brack_one = /\('/g,
                            raquo_brack_two = /"\)/g,
                            laquo_brack_two = /\("/g,
                            raquo_tag_one = /'$/g,
                            laquo_tag_one = /^'/g,
                            raquo_tag_two = /"$/g,
                            laquo_tag_two = /^"/g,
                            raquo_one_coma = /'\,/g,
                            raquo_one_dot = /'\./g,
                            raquo_two_coma = /"\,/g,
                            raquo_two_dot = /"\./g,
                            raquo_one_colon = /'\:/g,
                            raquo_two_colon = /"\:/g,
                            quest_one_colon = /'\?/g,
                            quest_two_colon = /"\?/g,
                            exclam_one_colon = /'\!/g,
                            exclam_two_colon = /"\!/g,
                            semic_one_colon = /'\;/g,
                            semic_two_colon = /"\;/g;
                        var result = str.replace(laquo_one, " &laquo;").replace(raquo_one, "&raquo; ").replace(laquo_two, " &laquo;").replace(raquo_two, "&raquo; ").replace(raquo_one_coma, "&raquo;,").replace(raquo_one_dot, "&raquo;.").replace(raquo_two_coma, "&raquo;,").replace(raquo_two_dot, "&raquo;.").replace(raquo_one_colon, "&raquo;:").replace(raquo_two_colon, "&raquo;:").replace(quest_one_colon, "&raquo;?").replace(quest_two_colon, "&raquo;?").replace(exclam_one_colon, "&raquo;!").replace(exclam_two_colon, "&raquo;!").replace(laquo_brack_one, "(&laquo;").replace(raquo_brack_one, "&raquo;)").replace(laquo_brack_two, "(&laquo;").replace(raquo_brack_two, "&raquo;)").replace(laquo_tag_one, "&laquo;").replace(raquo_tag_one, "&raquo;").replace(laquo_tag_two, "&laquo;").replace(raquo_tag_two, "&raquo;").replace(semic_one_colon, "&raquo;;").replace(semic_two_colon, "&raquo;;");
                        el.html(result);
                    });
                    $('.node_t').each(function() {
                        var html = $(this).html();
                        $(this).after(html).remove();
                    });
                });
            };
            $('.q').liQuotes();
        });
    });
/*-------------------------------  validate  ------------------------------------*/

    $.extend($.fn, {
        validateDelegate: function(delegate, type, handler) {
            return this.bind(type, function(event) {
                var target = $(event.target);
                if (target.is(delegate)) {
                    return handler.apply(target, arguments);
                }
            });
        }
    });

    $.extend($.fn, {
        // http://jqueryvalidation.org/validate/
        validate: function(options) {

            // if nothing is selected, return nothing; can't chain anyway
            if (!this.length) {
                if (options && options.debug && window.console) {
                    console.warn("Nothing selected, can't validate, returning nothing.");
                }
                return;
            }

            // check if a validator for this form was already created
            var validator = $.data(this[0], "validator");
            if (validator) {
                return validator;
            }

            // Add novalidate tag if HTML5.
            this.attr("novalidate", "novalidate");

            validator = new $.validator(options, this[0]);
            $.data(this[0], "validator", validator);

            if (validator.settings.onsubmit) {

                this.validateDelegate(":submit", "click", function(event) {
                    if (validator.settings.submitHandler) {
                        validator.submitButton = event.target;
                    }
                    // allow suppressing validation by adding a cancel class to the submit button
                    if ($(event.target).hasClass("cancel")) {
                        validator.cancelSubmit = true;
                    }

                    // allow suppressing validation by adding the html5 formnovalidate attribute to the submit button
                    if ($(event.target).attr("formnovalidate") !== undefined) {
                        validator.cancelSubmit = true;
                    }
                });

                // validate the form on submit
                this.submit(function(event) {
                    if (validator.settings.debug) {
                        // prevent form submit to be able to see console output
                        event.preventDefault();
                    }

                    function handle() {
                        var hidden, result;
                        if (validator.settings.submitHandler) {
                            if (validator.submitButton) {
                                // insert a hidden input as a replacement for the missing submit button
                                hidden = $("<input type='hidden'/>")
                                    .attr("name", validator.submitButton.name)
                                    .val($(validator.submitButton).val())
                                    .appendTo(validator.currentForm);
                            }
                            result = validator.settings.submitHandler.call(validator, validator.currentForm, event);
                            if (validator.submitButton) {
                                // and clean up afterwards; thanks to no-block-scope, hidden can be referenced
                                hidden.remove();
                            }
                            if (result !== undefined) {
                                return result;
                            }
                            return false;
                        }
                        return true;
                    }

                    // prevent submit for invalid forms or custom submit handlers
                    if (validator.cancelSubmit) {
                        validator.cancelSubmit = false;
                        return handle();
                    }
                    if (validator.form()) {
                        if (validator.pendingRequest) {
                            validator.formSubmitted = true;
                            return false;
                        }
                        return handle();
                    } else {
                        validator.focusInvalid();
                        return false;
                    }
                });
            }

            return validator;
        },
        // http://jqueryvalidation.org/valid/
        valid: function() {
            var valid, validator, errorList;

            if ($(this[0]).is("form")) {
                valid = this.validate().form();
            } else if ($(this[0]).is("div")) {
                valid = this.validate().form();
            } else {
                errorList = [];
                valid = true;
                validator = $(this[0].form).validate();
                this.each(function() {
                    valid = validator.element(this) && valid;
                    errorList = errorList.concat(validator.errorList);
                });
                validator.errorList = errorList;
            }
            return valid;
        },
        // attributes: space separated list of attributes to retrieve and remove
        removeAttrs: function(attributes) {
            var result = {},
                $element = this;
            $.each(attributes.split(/\s/), function(index, value) {
                result[value] = $element.attr(value);
                $element.removeAttr(value);
            });
            return result;
        },
        // http://jqueryvalidation.org/rules/
        rules: function(command, argument) {
            var element = this[0],
                settings, staticRules, existingRules, data, param, filtered;

            if (command) {
                settings = $.data(element.form, "validator").settings;
                staticRules = settings.rules;
                existingRules = $.validator.staticRules(element);
                switch (command) {
                    case "add":
                        $.extend(existingRules, $.validator.normalizeRule(argument));
                        // remove messages from rules, but allow them to be set separately
                        delete existingRules.messages;
                        staticRules[element.name] = existingRules;
                        if (argument.messages) {
                            settings.messages[element.name] = $.extend(settings.messages[element.name], argument.messages);
                        }
                        break;
                    case "remove":
                        if (!argument) {
                            delete staticRules[element.name];
                            return existingRules;
                        }
                        filtered = {};
                        $.each(argument.split(/\s/), function(index, method) {
                            filtered[method] = existingRules[method];
                            delete existingRules[method];
                            if (method === "required") {
                                $(element).removeAttr("aria-required");
                            }
                        });
                        return filtered;
                }
            }

            data = $.validator.normalizeRules(
                $.extend({},
                    $.validator.classRules(element),
                    $.validator.attributeRules(element),
                    $.validator.dataRules(element),
                    $.validator.staticRules(element)
                ), element);

            // make sure required is at front
            if (data.required) {
                param = data.required;
                delete data.required;
                data = $.extend({
                    required: param
                }, data);
                $(element).attr("aria-required", "true");
            }

            // make sure remote is at back
            if (data.remote) {
                param = data.remote;
                delete data.remote;
                data = $.extend(data, {
                    remote: param
                });
            }

            return data;
        }
    });

    // Custom selectors
    $.extend($.expr[":"], {
        // http://jqueryvalidation.org/blank-selector/
        blank: function(a) {
            return !$.trim("" + $(a).val());
        },
        // http://jqueryvalidation.org/filled-selector/
        filled: function(a) {
            return !!$.trim("" + $(a).val());
        },
        // http://jqueryvalidation.org/unchecked-selector/
        unchecked: function(a) {
            return !$(a).prop("checked");
        }
    });

    // constructor for validator
    $.validator = function(options, form) {
        this.settings = $.extend(true, {}, $.validator.defaults, options);
        this.currentForm = form;
        this.init();
    };

    // http://jqueryvalidation.org/jQuery.validator.format/
    $.validator.format = function(source, params) {
        if (arguments.length === 1) {
            return function() {
                var args = $.makeArray(arguments);
                args.unshift(source);
                return $.validator.format.apply(this, args);
            };
        }
        if (arguments.length > 2 && params.constructor !== Array) {
            params = $.makeArray(arguments).slice(1);
        }
        if (params.constructor !== Array) {
            params = [params];
        }
        $.each(params, function(i, n) {
            source = source.replace(new RegExp("\\{" + i + "\\}", "g"), function() {
                return n;
            });
        });
        return source;
    };

    $.extend($.validator, {

        defaults: {
            messages: {},
            groups: {},
            rules: {},
            errorClass: "error",
            validClass: "valid",
            errorElement: "label",
            focusCleanup: false,
            focusInvalid: true,
            errorContainer: $([]),
            errorLabelContainer: $([]),
            onsubmit: true,
            ignore: ":hidden",
            ignoreTitle: false,
            onfocusin: function(element) {
                this.lastActive = element;

                // Hide error label and remove error class on focus if enabled
                if (this.settings.focusCleanup) {
                    if (this.settings.unhighlight) {
                        this.settings.unhighlight.call(this, element, this.settings.errorClass, this.settings.validClass);
                    }
                    this.hideThese(this.errorsFor(element));
                }
            },
            onfocusout: function(element) {
                if (!this.checkable(element) && (element.name in this.submitted || !this.optional(element))) {
                    this.element(element);
                }
            },
            onkeyup: function(element, event) {
                if (event.which === 9 && this.elementValue(element) === "") {
                    return;
                } else if (element.name in this.submitted || element === this.lastElement) {
                    this.element(element);
                }
            },
            onclick: function(element) {
                // click on selects, radiobuttons and checkboxes
                if (element.name in this.submitted) {
                    this.element(element);

                    // or option elements, check parent select in that case
                } else if (element.parentNode.name in this.submitted) {
                    this.element(element.parentNode);
                }
            },
            highlight: function(element, errorClass, validClass) {
                if (element.type === "radio") {
                    this.findByName(element.name).addClass(errorClass).removeClass(validClass);
                } else {
                    $(element).addClass(errorClass).removeClass(validClass);
                }
            },
            unhighlight: function(element, errorClass, validClass) {
                if (element.type === "radio") {
                    this.findByName(element.name).removeClass(errorClass).addClass(validClass);
                } else {
                    $(element).removeClass(errorClass).addClass(validClass);
                }
            }
        },

        // http://jqueryvalidation.org/jQuery.validator.setDefaults/
        setDefaults: function(settings) {
            $.extend($.validator.defaults, settings);
        },

        messages: {
            required: "This field is required.",
            remote: "Please fix this field.",
            email: "Please enter a valid email address.",
            url: "Please enter a valid URL.",
            date: "Please enter a valid date.",
            dateISO: "Please enter a valid date ( ISO ).",
            number: "Please enter a valid number.",
            digits: "Please enter only digits.",
            creditcard: "Please enter a valid credit card number.",
            creditccard: "Please enter a valid credit card number.",
            equalTo: "Please enter the same value again.",
            maxlength: $.validator.format("Please enter no more than {0} characters."),
            minlength: $.validator.format("Please enter at least {0} characters."),
            rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."),
            range: $.validator.format("Please enter a value between {0} and {1}."),
            max: $.validator.format("Please enter a value less than or equal to {0}."),
            min: $.validator.format("Please enter a value greater than or equal to {0}.")
        },

        autoCreateRanges: false,

        prototype: {

            init: function() {
                this.labelContainer = $(this.settings.errorLabelContainer);
                this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm);
                this.containers = $(this.settings.errorContainer).add(this.settings.errorLabelContainer);
                this.submitted = {};
                this.valueCache = {};
                this.pendingRequest = 0;
                this.pending = {};
                this.invalid = {};
                this.reset();

                var groups = (this.groups = {}),
                    rules;
                $.each(this.settings.groups, function(key, value) {
                    if (typeof value === "string") {
                        value = value.split(/\s/);
                    }
                    $.each(value, function(index, name) {
                        groups[name] = key;
                    });
                });
                rules = this.settings.rules;
                $.each(rules, function(key, value) {
                    rules[key] = $.validator.normalizeRule(value);
                });

                function delegate(event) {
                    var validator, form, eventType;
                    form = this[0].form;

                    if (!form) {
                        form = $(this).closest("div[data-form='true']").get(0);
                    }
                    validator = $.data(form, "validator"),
                    eventType = "on" + event.type.replace(/^validate/, ""),
                    this.settings = validator.settings;
                    if (this.settings[eventType] && !this.is(this.settings.ignore)) {
                        this.settings[eventType].call(validator, this[0], event);
                    }
                }
                $(this.currentForm)
                    .validateDelegate(":text, [type='password'], [type='file'], select, textarea, " +
                        "[type='number'], [type='search'] ,[type='tel'], [type='url'], " +
                        "[type='email'], [type='datetime'], [type='date'], [type='month'], " +
                        "[type='week'], [type='time'], [type='datetime-local'], " +
                        "[type='range'], [type='color'], [type='radio'], [type='checkbox']",
                        "focusin focusout keyup", delegate)
                // Support: Chrome, oldIE
                // "select" is provided as event.target when clicking a option
                .validateDelegate("select, option, [type='radio'], [type='checkbox']", "click", delegate);

                if (this.settings.invalidHandler) {
                    $(this.currentForm).bind("invalid-form.validate", this.settings.invalidHandler);
                }

                // Add aria-required to any Static/Data/Class required fields before first validation
                // Screen readers require this attribute to be present before the initial submission http://www.w3.org/TR/WCAG-TECHS/ARIA2.html
                $(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required", "true");
            },

            // http://jqueryvalidation.org/Validator.form/
            form: function() {
                this.checkForm();
                $.extend(this.submitted, this.errorMap);
                this.invalid = $.extend({}, this.errorMap);
                if (!this.valid()) {
                    $(this.currentForm).triggerHandler("invalid-form", [this]);
                }
                this.showErrors();
                return this.valid();
            },

            checkForm: function() {
                this.prepareForm();
                for (var i = 0, elements = (this.currentElements = this.elements()); elements[i]; i++) {
                    this.check(elements[i]);
                }
                return this.valid();
            },

            // http://jqueryvalidation.org/Validator.element/
            element: function(element) {
                var cleanElement = this.clean(element),
                    checkElement = this.validationTargetFor(cleanElement),
                    result = true;

                this.lastElement = checkElement;

                if (checkElement === undefined) {
                    delete this.invalid[cleanElement.name];
                } else {
                    this.prepareElement(checkElement);
                    this.currentElements = $(checkElement);

                    result = this.check(checkElement) !== false;
                    if (result) {
                        delete this.invalid[checkElement.name];
                    } else {
                        this.invalid[checkElement.name] = true;
                    }
                }
                // Add aria-invalid status for screen readers
                $(element).attr("aria-invalid", !result);

                if (!this.numberOfInvalids()) {
                    // Hide error containers on last error
                    this.toHide = this.toHide.add(this.containers);
                }
                this.showErrors();
                return result;
            },

            // http://jqueryvalidation.org/Validator.showErrors/
            showErrors: function(errors) {
                if (errors) {
                    // add items to error list and map
                    $.extend(this.errorMap, errors);
                    this.errorList = [];
                    for (var name in errors) {
                        this.errorList.push({
                            message: errors[name],
                            element: this.findByName(name)[0]
                        });
                    }
                    // remove items from success list
                    this.successList = $.grep(this.successList, function(element) {
                        return !(element.name in errors);
                    });
                }
                if (this.settings.showErrors) {
                    this.settings.showErrors.call(this, this.errorMap, this.errorList);
                } else {
                    this.defaultShowErrors();
                }
            },

            // http://jqueryvalidation.org/Validator.resetForm/
            resetForm: function() {
                if ($.fn.resetForm) {
                    $(this.currentForm).resetForm();
                }
                this.submitted = {};
                this.lastElement = null;
                this.prepareForm();
                this.hideErrors();
                var i, elements = this.elements()
                        .removeData("previousValue")
                        .removeAttr("aria-invalid");

                if (this.settings.unhighlight) {
                    for (i = 0; elements[i]; i++) {
                        this.settings.unhighlight.call(this, elements[i],
                            this.settings.errorClass, "");
                    }
                } else {
                    elements.removeClass(this.settings.errorClass);
                }
            },

            numberOfInvalids: function() {
                return this.objectLength(this.invalid);
            },

            objectLength: function(obj) {
                /* jshint unused: false */
                var count = 0,
                    i;
                for (i in obj) {
                    count++;
                }
                return count;
            },

            hideErrors: function() {
                this.hideThese(this.toHide);
            },

            hideThese: function(errors) {
                errors.not(this.containers).text("");
                this.addWrapper(errors).hide();
            },

            valid: function() {
                return this.size() === 0;
            },

            size: function() {
                return this.errorList.length;
            },

            focusInvalid: function() {
                if (this.settings.focusInvalid) {
                    try {
                        $(this.findLastActive() || this.errorList.length && this.errorList[0].element || [])
                            .filter(":visible")
                            .focus()
                        // manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
                        .trigger("focusin");
                    } catch (e) {
                        // ignore IE throwing errors when focusing hidden elements
                    }
                }
            },

            findLastActive: function() {
                var lastActive = this.lastActive;
                return lastActive && $.grep(this.errorList, function(n) {
                    return n.element.name === lastActive.name;
                }).length === 1 && lastActive;
            },

            elements: function() {
                var validator = this,
                    rulesCache = {};

                // select all valid inputs inside the form (no submit or reset buttons)
                return $(this.currentForm)
                    .find("input, select, textarea")
                    .not(":submit, :reset, :image, [disabled]")
                    .not(this.settings.ignore)
                    .filter(function() {
                        if (!this.name && validator.settings.debug && window.console) {
                            console.error("%o has no name assigned", this);
                        }

                        // select only the first element for each name, and only those with rules specified
                        if (this.name in rulesCache || !validator.objectLength($(this).rules())) {
                            return false;
                        }

                        rulesCache[this.name] = true;
                        return true;
                    });
            },

            clean: function(selector) {
                return $(selector)[0];
            },

            errors: function() {
                var errorClass = this.settings.errorClass.split(" ").join(".");
                return $(this.settings.errorElement + "." + errorClass, this.errorContext);
            },

            reset: function() {
                this.successList = [];
                this.errorList = [];
                this.errorMap = {};
                this.toShow = $([]);
                this.toHide = $([]);
                this.currentElements = $([]);
            },

            prepareForm: function() {
                this.reset();
                this.toHide = this.errors().add(this.containers);
            },

            prepareElement: function(element) {
                this.reset();
                this.toHide = this.errorsFor(element);
            },

            elementValue: function(element) {
                var val,
                    $element = $(element),
                    type = element.type;

                if (type === "radio" || type === "checkbox") {
                    return $("input[name='" + element.name + "']:checked").val();
                } else if (type === "number" && typeof element.validity !== "undefined") {
                    return element.validity.badInput ? false : $element.val();
                }

                val = $element.val();
                if (typeof val === "string") {
                    return val.replace(/\r/g, "");
                }
                return val;
            },

            check: function(element) {
                element = this.validationTargetFor(this.clean(element));

                var rules = $(element).rules(),
                    rulesCount = $.map(rules, function(n, i) {
                        return i;
                    }).length,
                    dependencyMismatch = false,
                    val = this.elementValue(element),
                    result, method, rule;

                for (method in rules) {
                    rule = {
                        method: method,
                        parameters: rules[method]
                    };
                    try {

                        result = $.validator.methods[method].call(this, val, element, rule.parameters);

                        // if a method indicates that the field is optional and therefore valid,
                        // don't mark it as valid when there are no other rules
                        if (result === "dependency-mismatch" && rulesCount === 1) {
                            dependencyMismatch = true;
                            continue;
                        }
                        dependencyMismatch = false;

                        if (result === "pending") {
                            this.toHide = this.toHide.not(this.errorsFor(element));
                            return;
                        }

                        if (!result) {
                            this.formatAndAdd(element, rule);
                            return false;
                        }
                    } catch (e) {
                        if (this.settings.debug && window.console) {
                            console.log("Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.", e);
                        }
                        throw e;
                    }
                }
                if (dependencyMismatch) {
                    return;
                }
                if (this.objectLength(rules)) {
                    this.successList.push(element);
                }
                return true;
            },

            // return the custom message for the given element and validation method
            // specified in the element's HTML5 data attribute
            // return the generic message if present and no method specific message is present
            customDataMessage: function(element, method) {
                return $(element).data("msg" + method.charAt(0).toUpperCase() +
                    method.substring(1).toLowerCase()) || $(element).data("msg");
            },

            // return the custom message for the given element name and validation method
            customMessage: function(name, method) {
                var m = this.settings.messages[name];
                return m && (m.constructor === String ? m : m[method]);
            },

            // return the first defined argument, allowing empty strings
            findDefined: function() {
                for (var i = 0; i < arguments.length; i++) {
                    if (arguments[i] !== undefined) {
                        return arguments[i];
                    }
                }
                return undefined;
            },

            defaultMessage: function(element, method) {
                return this.findDefined(
                    this.customMessage(element.name, method),
                    this.customDataMessage(element, method),
                    // title is never undefined, so handle empty string as undefined
                    !this.settings.ignoreTitle && element.title || undefined,
                    $.validator.messages[method],
                    "<strong>Warning: No message defined for " + element.name + "</strong>"
                );
            },

            formatAndAdd: function(element, rule) {
                var message = this.defaultMessage(element, rule.method),
                    theregex = /\$?\{(\d+)\}/g;
                if (typeof message === "function") {
                    message = message.call(this, rule.parameters, element);
                } else if (theregex.test(message)) {
                    message = $.validator.format(message.replace(theregex, "{$1}"), rule.parameters);
                }
                this.errorList.push({
                    message: message,
                    element: element,
                    method: rule.method
                });

                this.errorMap[element.name] = message;
                this.submitted[element.name] = message;
            },

            addWrapper: function(toToggle) {
                if (this.settings.wrapper) {
                    toToggle = toToggle.add(toToggle.parent(this.settings.wrapper));
                }
                return toToggle;
            },

            defaultShowErrors: function() {
                var i, elements, error;
                for (i = 0; this.errorList[i]; i++) {
                    error = this.errorList[i];
                    if (this.settings.highlight) {
                        this.settings.highlight.call(this, error.element, this.settings.errorClass, this.settings.validClass);
                    }
                    this.showLabel(error.element, error.message);
                }
                if (this.errorList.length) {
                    this.toShow = this.toShow.add(this.containers);
                }
                if (this.settings.success) {
                    for (i = 0; this.successList[i]; i++) {
                        this.showLabel(this.successList[i]);
                    }
                }
                if (this.settings.unhighlight) {
                    for (i = 0, elements = this.validElements(); elements[i]; i++) {
                        this.settings.unhighlight.call(this, elements[i], this.settings.errorClass, this.settings.validClass);
                    }
                }
                this.toHide = this.toHide.not(this.toShow);
                this.hideErrors();
                this.addWrapper(this.toShow).show();
            },

            validElements: function() {
                return this.currentElements.not(this.invalidElements());
            },

            invalidElements: function() {
                return $(this.errorList).map(function() {
                    return this.element;
                });
            },

            showLabel: function(element, message) {
                var place, group, errorID,
                    error = this.errorsFor(element),
                    elementID = this.idOrName(element),
                    describedBy = $(element).attr("aria-describedby");
                if (error.length) {
                    // refresh error/success class
                    error.removeClass(this.settings.validClass).addClass(this.settings.errorClass);
                    // replace message on existing label
                    error.html(message);
                } else {
                    // create error element
                    error = $("<" + this.settings.errorElement + ">")
                        .attr("id", elementID + "-error")
                        .addClass(this.settings.errorClass)
                        .html(message || "");

                    // Maintain reference to the element to be placed into the DOM
                    place = error;
                    if (this.settings.wrapper) {
                        // make sure the element is visible, even in IE
                        // actually showing the wrapped element is handled elsewhere
                        place = error.hide().show().wrap("<" + this.settings.wrapper + "/>").parent();
                    }
                    if (this.labelContainer.length) {
                        this.labelContainer.append(place);
                    } else if (this.settings.errorPlacement) {
                        this.settings.errorPlacement(place, $(element));
                    } else {
                        place.insertAfter(element);
                    }

                    // Link error back to the element
                    if (error.is("label")) {
                        // If the error is a label, then associate using 'for'
                        error.attr("for", elementID);
                    } else if (error.parents("label[for='" + elementID + "']").length === 0) {
                        // If the element is not a child of an associated label, then it's necessary
                        // to explicitly apply aria-describedby

                        errorID = error.attr("id").replace(/(:|\.|\[|\]|\$)/g, "\\$1");
                        // Respect existing non-error aria-describedby
                        if (!describedBy) {
                            describedBy = errorID;
                        } else if (!describedBy.match(new RegExp("\\b" + errorID + "\\b"))) {
                            // Add to end of list if not already present
                            describedBy += " " + errorID;
                        }
                        $(element).attr("aria-describedby", describedBy);

                        // If this element is grouped, then assign to all elements in the same group
                        group = this.groups[element.name];
                        if (group) {
                            $.each(this.groups, function(name, testgroup) {
                                if (testgroup === group) {
                                    $("[name='" + name + "']", this.currentForm)
                                        .attr("aria-describedby", error.attr("id"));
                                }
                            });
                        }
                    }
                }
                if (!message && this.settings.success) {
                    error.text("");
                    if (typeof this.settings.success === "string") {
                        error.addClass(this.settings.success);
                    } else {
                        this.settings.success(error, element);
                    }
                }
                this.toShow = this.toShow.add(error);
            },

            errorsFor: function(element) {
                var name = this.idOrName(element),
                    describer = $(element).attr("aria-describedby"),
                    selector = "label[for='" + name + "'], label[for='" + name + "'] *";

                // aria-describedby should directly reference the error element
                if (describer) {
                    selector = selector + ", #" + describer.replace(/\s+/g, ", #");
                }
                return this
                    .errors()
                    .filter(selector);
            },

            idOrName: function(element) {
                return this.groups[element.name] || (this.checkable(element) ? element.name : element.id || element.name);
            },

            validationTargetFor: function(element) {

                // If radio/checkbox, validate first element in group instead
                if (this.checkable(element)) {
                    element = this.findByName(element.name);
                }

                // Always apply ignore filter
                return $(element).not(this.settings.ignore)[0];

            },

            checkable: function(element) {
                return (/radio|checkbox/i).test(element.type);
            },

            findByName: function(name) {
                return $(this.currentForm).find("[name='" + name + "']");
            },

            getLength: function(value, element) {
                switch (element.nodeName.toLowerCase()) {
                    case "select":
                        return $("option:selected", element).length;
                    case "input":
                        if (this.checkable(element)) {
                            return this.findByName(element.name).filter(":checked").length;
                        }
                }
                return value.length;
            },

            depend: function(param, element) {
                return this.dependTypes[typeof param] ? this.dependTypes[typeof param](param, element) : true;
            },

            dependTypes: {
                "boolean": function(param) {
                    return param;
                },
                "string": function(param, element) {
                    return !!$(param, element.form).length;
                },
                "function": function(param, element) {
                    return param(element);
                }
            },

            optional: function(element) {
                var val = this.elementValue(element);
                return !$.validator.methods.required.call(this, val, element) && "dependency-mismatch";
            },

            startRequest: function(element) {
                if (!this.pending[element.name]) {
                    this.pendingRequest++;
                    this.pending[element.name] = true;
                }
            },

            stopRequest: function(element, valid) {
                this.pendingRequest--;
                // sometimes synchronization fails, make sure pendingRequest is never < 0
                if (this.pendingRequest < 0) {
                    this.pendingRequest = 0;
                }
                delete this.pending[element.name];
                if (valid && this.pendingRequest === 0 && this.formSubmitted && this.form()) {
                    $(this.currentForm).submit();
                    this.formSubmitted = false;
                } else if (!valid && this.pendingRequest === 0 && this.formSubmitted) {
                    $(this.currentForm).triggerHandler("invalid-form", [this]);
                    this.formSubmitted = false;
                }
            },

            previousValue: function(element) {
                return $.data(element, "previousValue") || $.data(element, "previousValue", {
                    old: null,
                    valid: true,
                    message: this.defaultMessage(element, "remote")
                });
            }

        },

        classRuleSettings: {
            required: {
                required: true
            },
            email: {
                email: true
            },
            url: {
                url: true
            },
            date: {
                date: true
            },
            dateISO: {
                dateISO: true
            },
            number: {
                number: true
            },
            digits: {
                digits: true
            },
            creditcard: {
                creditcard: true
            }
        },

        addClassRules: function(className, rules) {
            if (className.constructor === String) {
                this.classRuleSettings[className] = rules;
            } else {
                $.extend(this.classRuleSettings, className);
            }
        },

        classRules: function(element) {
            var rules = {},
                classes = $(element).attr("class");

            if (classes) {
                $.each(classes.split(" "), function() {
                    if (this in $.validator.classRuleSettings) {
                        $.extend(rules, $.validator.classRuleSettings[this]);
                    }
                });
            }
            return rules;
        },

        attributeRules: function(element) {
            var rules = {},
                $element = $(element),
                type = element.getAttribute("type"),
                method, value;

            for (method in $.validator.methods) {

                // support for <input required> in both html5 and older browsers
                if (method === "required") {
                    value = element.getAttribute(method);
                    // Some browsers return an empty string for the required attribute
                    // and non-HTML5 browsers might have required="" markup
                    if (value === "") {
                        value = true;
                    }
                    // force non-HTML5 browsers to return bool
                    value = !! value;
                } else {
                    value = $element.attr(method);
                }

                // convert the value to a number for number inputs, and for text for backwards compability
                // allows type="date" and others to be compared as strings
                if (/min|max/.test(method) && (type === null || /number|range|text/.test(type))) {
                    value = Number(value);
                }

                if (value || value === 0) {
                    rules[method] = value;
                } else if (type === method && type !== "range") {
                    // exception: the jquery validate 'range' method
                    // does not test for the html5 'range' type
                    rules[method] = true;
                }
            }

            // maxlength may be returned as -1, 2147483647 ( IE ) and 524288 ( safari ) for text inputs
            if (rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength)) {
                delete rules.maxlength;
            }

            return rules;
        },

        dataRules: function(element) {
            var method, value,
                rules = {}, $element = $(element);
            for (method in $.validator.methods) {
                value = $element.data("rule" + method.charAt(0).toUpperCase() + method.substring(1).toLowerCase());
                if (value !== undefined) {
                    rules[method] = value;
                }
            }
            return rules;
        },

        staticRules: function(element) {
            if (element.form) {
                validator = $.data(element.form, "validator");
            } else {
                validator = $.data($(element).closest("div[data-form='true']").get(0), "validator");
            }

            var rules = {},
                validator = validator;

            if (validator.settings.rules) {
                rules = $.validator.normalizeRule(validator.settings.rules[element.name]) || {};
            }
            return rules;
        },

        normalizeRules: function(rules, element) {
            // handle dependency check
            $.each(rules, function(prop, val) {
                // ignore rule when param is explicitly false, eg. required:false
                if (val === false) {
                    delete rules[prop];
                    return;
                }
                if (val.param || val.depends) {
                    var keepRule = true;
                    switch (typeof val.depends) {
                        case "string":
                            keepRule = !! $(val.depends, element.form).length;
                            break;
                        case "function":
                            keepRule = val.depends.call(element, element);
                            break;
                    }
                    if (keepRule) {
                        rules[prop] = val.param !== undefined ? val.param : true;
                    } else {
                        delete rules[prop];
                    }
                }
            });

            // evaluate parameters
            $.each(rules, function(rule, parameter) {
                rules[rule] = $.isFunction(parameter) ? parameter(element) : parameter;
            });

            // clean number parameters
            $.each(["minlength", "maxlength"], function() {
                if (rules[this]) {
                    rules[this] = Number(rules[this]);
                }
            });
            $.each(["rangelength", "range"], function() {
                var parts;
                if (rules[this]) {
                    if ($.isArray(rules[this])) {
                        rules[this] = [Number(rules[this][0]), Number(rules[this][1])];
                    } else if (typeof rules[this] === "string") {
                        parts = rules[this].replace(/[\[\]]/g, "").split(/[\s,]+/);
                        rules[this] = [Number(parts[0]), Number(parts[1])];
                    }
                }
            });

            if ($.validator.autoCreateRanges) {
                // auto-create ranges
                if (rules.min != null && rules.max != null) {
                    rules.range = [rules.min, rules.max];
                    delete rules.min;
                    delete rules.max;
                }
                if (rules.minlength != null && rules.maxlength != null) {
                    rules.rangelength = [rules.minlength, rules.maxlength];
                    delete rules.minlength;
                    delete rules.maxlength;
                }
            }

            return rules;
        },

        // Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
        normalizeRule: function(data) {
            if (typeof data === "string") {
                var transformed = {};
                $.each(data.split(/\s/), function() {
                    transformed[this] = true;
                });
                data = transformed;
            }
            return data;
        },

        // http://jqueryvalidation.org/jQuery.validator.addMethod/
        addMethod: function(name, method, message) {
            $.validator.methods[name] = method;
            $.validator.messages[name] = message !== undefined ? message : $.validator.messages[name];
            if (method.length < 3) {
                $.validator.addClassRules(name, $.validator.normalizeRule(name));
            }
        },

        methods: {

            // http://jqueryvalidation.org/required-method/
            required: function(value, element, param) {
                // check if dependency is met
                if (!this.depend(param, element)) {
                    return "dependency-mismatch";
                }
                if (element.nodeName.toLowerCase() === "select") {
                    // could be an array for select-multiple or a string, both are fine this way
                    var val = $(element).val();
                    return val && val.length > 0;
                }
                if (this.checkable(element)) {
                    return this.getLength(value, element) > 0;
                }
                return $.trim(value).length > 0;
            },

            phone: function(value, element, param) {
                return this.optional(element) || /^([+]?[0-9]{1,2})?([0-9]{3})([\d]{7})$/.test(value);
            },

            phoneUA: function(value, element, param) {
                return this.optional(element) || /^([+]38)?([0-9]{3})([\d]{7})$/.test(value);
            },

            validTrue: function(value, element, param) {
                if ($(element).data('valid') === true) {
                    return true;
                } else {
                    return false;
                }
            },

            filesize: function(value, element, param) {
                // param = size (en bytes) 
                return this.optional(element) || (element.files[0].size <= param);
            },

            word: function(value, element) {
                return this.optional(element) || /^[a-zA-Zа-яА-ЯіІїЇєЄґҐ\-\s]*$/.test(value);
            },

            login: function(value, element) {
                return this.optional(element) || /^[a-zA-Zа-яА-ЯіІїЇєЄґҐ][0-9a-zA-Zа-яА-ЯіІїЇєЄґҐ\-\._| ]+$/.test(value);
            },

            // http://jqueryvalidation.org/email-method/
            email: function(value, element) {
                return this.optional(element) || /^([a-zA-Z0-9_\.\-]{2,})+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/.test(value);
            },

            // http://jqueryvalidation.org/url-method/
            url: function(value, element) {
                // contributed by Scott Gonzalez: http://projects.scottsplayground.com/iri/
                return this.optional(element) || /^((https?|s?ftp):\/\/)?(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
            },

            // http://jqueryvalidation.org/date-method/
            date: function(value, element) {
                return this.optional(element) || !/Invalid|NaN/.test(new Date(value).toString());
            },

            // http://jqueryvalidation.org/dateISO-method/
            dateISO: function(value, element) {
                return this.optional(element) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(value);
            },

            // http://jqueryvalidation.org/number-method/
            number: function(value, element) {
                return this.optional(element) || /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value);
            },

            // http://jqueryvalidation.org/digits-method/
            digits: function(value, element) {
                return this.optional(element) || /^\d+$/.test(value);
            },

            // http://jqueryvalidation.org/digits-method/
            creditccard: function(value, element) {
                return this.optional(element) || /^([0-9]{4}[\-]{0,1})([0-9]{4}[\-]{0,1})([0-9]{4}[\-]{0,1})([0-9]{4})$/.test(value);
            },

            // http://jqueryvalidation.org/creditcard-method/
            // based on http://en.wikipedia.org/wiki/Luhn_algorithm
            creditcard: function(value, element) {
                if (this.optional(element)) {
                    return "dependency-mismatch";
                }
                // accept only spaces, digits and dashes
                if (/[^0-9 \-]+/.test(value)) {
                    return false;
                }
                var nCheck = 0,
                    nDigit = 0,
                    bEven = false,
                    n, cDigit;

                value = value.replace(/\D/g, "");

                // Basing min and max length on
                // http://developer.ean.com/general_info/Valid_Credit_Card_Types
                if (value.length < 13 || value.length > 19) {
                    return false;
                }

                for (n = value.length - 1; n >= 0; n--) {
                    cDigit = value.charAt(n);
                    nDigit = parseInt(cDigit, 10);
                    if (bEven) {
                        if ((nDigit *= 2) > 9) {
                            nDigit -= 9;
                        }
                    }
                    nCheck += nDigit;
                    bEven = !bEven;
                }

                return (nCheck % 10) === 0;
            },

            // http://jqueryvalidation.org/minlength-method/
            minlength: function(value, element, param) {
                var length = $.isArray(value) ? value.length : this.getLength(value, element);
                return this.optional(element) || length >= param;
            },

            // http://jqueryvalidation.org/maxlength-method/
            maxlength: function(value, element, param) {
                var length = $.isArray(value) ? value.length : this.getLength(value, element);
                return this.optional(element) || length <= param;
            },

            // http://jqueryvalidation.org/rangelength-method/
            rangelength: function(value, element, param) {
                var length = $.isArray(value) ? value.length : this.getLength(value, element);
                return this.optional(element) || (length >= param[0] && length <= param[1]);
            },

            // http://jqueryvalidation.org/min-method/
            min: function(value, element, param) {
                return this.optional(element) || value >= param;
            },

            // http://jqueryvalidation.org/max-method/
            max: function(value, element, param) {
                return this.optional(element) || value <= param;
            },

            // http://jqueryvalidation.org/range-method/
            range: function(value, element, param) {
                return this.optional(element) || (value >= param[0] && value <= param[1]);
            },

            // http://jqueryvalidation.org/equalTo-method/
            equalTo: function(value, element, param) {
                // bind to the blur event of the target in order to revalidate whenever the target field is updated
                // TODO find a way to bind the event just once, avoiding the unbind-rebind overhead
                var target = $(param);
                if (this.settings.onfocusout) {
                    target.unbind(".validate-equalTo").bind("blur.validate-equalTo", function() {
                        $(element).valid();
                    });
                }
                return value === target.val();
            },

            // http://jqueryvalidation.org/remote-method/
            remote: function(value, element, param) {
                if (this.optional(element)) {
                    return "dependency-mismatch";
                }

                var previous = this.previousValue(element),
                    validator, data;

                if (!this.settings.messages[element.name]) {
                    this.settings.messages[element.name] = {};
                }
                previous.originalMessage = this.settings.messages[element.name].remote;
                this.settings.messages[element.name].remote = previous.message;

                param = typeof param === "string" && {
                    url: param
                } || param;

                if (previous.old === value) {
                    return previous.valid;
                }

                previous.old = value;
                validator = this;
                this.startRequest(element);
                data = {};
                data[element.name] = value;
                $.ajax($.extend(true, {
                    url: param,
                    mode: "abort",
                    port: "validate" + element.name,
                    dataType: "json",
                    data: data,
                    context: validator.currentForm,
                    success: function(response) {
                        var valid = response === true || response === "true",
                            errors, message, submitted;

                        validator.settings.messages[element.name].remote = previous.originalMessage;
                        if (valid) {
                            submitted = validator.formSubmitted;
                            validator.prepareElement(element);
                            validator.formSubmitted = submitted;
                            validator.successList.push(element);
                            delete validator.invalid[element.name];
                            validator.showErrors();
                        } else {
                            errors = {};
                            message = response || validator.defaultMessage(element, "remote");
                            errors[element.name] = previous.message = $.isFunction(message) ? message(value) : message;
                            validator.invalid[element.name] = true;
                            validator.showErrors(errors);
                        }
                        previous.valid = valid;
                        validator.stopRequest(element, valid);
                    }
                }, param));
                return "pending";
            }

        }

    });
    if ($('html').attr('lang').split('-').shift() === 'ru') {
        $.extend($.validator.messages, {
            required: "Это поле необходимо заполнить.",
            remote: "Пожалуйста, введите правильное значение.",
            email: "Пожалуйста, введите корректный адрес электронной почты.",
            url: "Пожалуйста, введите корректный URL.",
            date: "Пожалуйста, введите корректную дату.",
            dateISO: "Пожалуйста, введите корректную дату в формате ISO.",
            number: "Пожалуйста, введите число.",
            digits: "Пожалуйста, вводите только цифры.",
            creditcard: "Пожалуйста, введите правильный номер кредитной карты.",
            equalTo: "Пожалуйста, введите такое же значение ещё раз.",
            extension: "Пожалуйста, выберите файл с правильным расширением.",
            maxlength: $.validator.format("Пожалуйста, введите не больше {0} символов."),
            minlength: $.validator.format("Пожалуйста, введите не меньше {0} символов."),
            rangelength: $.validator.format("Пожалуйста, введите значение длиной от {0} до {1} символов."),
            range: $.validator.format("Пожалуйста, введите число от {0} до {1}."),
            max: $.validator.format("Пожалуйста, введите число, меньшее или равное {0}."),
            min: $.validator.format("Пожалуйста, введите число, большее или равное {0}.")
        });
    }

    $.format = function deprecated() {
        throw "$.format has been deprecated. Please use $.validator.format instead.";
    };
/*-------------------------------  Magnific  ------------------------------------*/
    /*! Magnific Popup - v0.9.9 - 2014-09-06
     * http://dimsemenov.com/plugins/magnific-popup/
     * Copyright (c) 2014 Dmitry Semenov; */
    ;
    (function($) {

        /*>>core*/
        /**
         *
         * Magnific Popup Core JS file
         *
         */


        /**
         * Private static constants
         */
        var CLOSE_EVENT = 'Close',
            BEFORE_CLOSE_EVENT = 'BeforeClose',
            AFTER_CLOSE_EVENT = 'AfterClose',
            BEFORE_APPEND_EVENT = 'BeforeAppend',
            MARKUP_PARSE_EVENT = 'MarkupParse',
            OPEN_EVENT = 'Open',
            CHANGE_EVENT = 'Change',
            NS = 'mfp',
            EVENT_NS = '.' + NS,
            READY_CLASS = 'mfp-ready',
            REMOVING_CLASS = 'mfp-removing',
            PREVENT_CLOSE_CLASS = 'mfp-prevent-close';


        /**
         * Private vars
         */
        var mfp, // As we have only one instance of MagnificPopup object, we define it locally to not to use 'this'
            MagnificPopup = function() {},
            _isJQ = !! (window.jQuery),
            _prevStatus,
            _window = $(window),
            _body,
            _document,
            _prevContentType,
            _wrapClasses,
            _currPopupType;


        /**
         * Private functions
         */
        var _mfpOn = function(name, f) {
            mfp.ev.on(NS + name + EVENT_NS, f);
        },
            _getEl = function(className, appendTo, html, raw) {
                var el = document.createElement('div');
                el.className = 'mfp-' + className;
                if (html) {
                    el.innerHTML = html;
                }
                if (!raw) {
                    el = $(el);
                    if (appendTo) {
                        el.appendTo(appendTo);
                    }
                } else if (appendTo) {
                    appendTo.appendChild(el);
                }
                return el;
            },
            _mfpTrigger = function(e, data) {
                mfp.ev.triggerHandler(NS + e, data);

                if (mfp.st.callbacks) {
                    // converts "mfpEventName" to "eventName" callback and triggers it if it's present
                    e = e.charAt(0).toLowerCase() + e.slice(1);
                    if (mfp.st.callbacks[e]) {
                        mfp.st.callbacks[e].apply(mfp, $.isArray(data) ? data : [data]);
                    }
                }
            },
            _getCloseBtn = function(type) {
                if (type !== _currPopupType || !mfp.currTemplate.closeBtn) {
                    mfp.currTemplate.closeBtn = $(mfp.st.closeMarkup.replace('%title%', mfp.st.tClose));
                    _currPopupType = type;
                }
                return mfp.currTemplate.closeBtn;
            },
            // Initialize Magnific Popup only when called at least once
            _checkInstance = function() {
                if (!$.magnificPopup.instance) {
                    mfp = new MagnificPopup();
                    mfp.init();
                    $.magnificPopup.instance = mfp;
                }
            },
            // CSS transition detection, http://stackoverflow.com/questions/7264899/detect-css-transitions-using-javascript-and-without-modernizr
            supportsTransitions = function() {
                var s = document.createElement('p').style, // 's' for style. better to create an element if body yet to exist
                    v = ['ms', 'O', 'Moz', 'Webkit']; // 'v' for vendor

                if (s['transition'] !== undefined) {
                    return true;
                }

                while (v.length) {
                    if (v.pop() + 'Transition' in s) {
                        return true;
                    }
                }

                return false;
            };



        /**
         * Public functions
         */
        MagnificPopup.prototype = {

            constructor: MagnificPopup,

            /**
             * Initializes Magnific Popup plugin.
             * This function is triggered only once when $.fn.magnificPopup or $.magnificPopup is executed
             */
            init: function() {
                var appVersion = navigator.appVersion;
                mfp.isIE7 = appVersion.indexOf("MSIE 7.") !== -1;
                mfp.isIE8 = appVersion.indexOf("MSIE 8.") !== -1;
                mfp.isLowIE = mfp.isIE7 || mfp.isIE8;
                mfp.isAndroid = (/android/gi).test(appVersion);
                mfp.isIOS = (/iphone|ipad|ipod/gi).test(appVersion);
                mfp.supportsTransition = supportsTransitions();

                // We disable fixed positioned lightbox on devices that don't handle it nicely.
                // If you know a better way of detecting this - let me know.
                mfp.probablyMobile = (mfp.isAndroid || mfp.isIOS || /(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent));
                _document = $(document);

                mfp.popupsCache = {};
            },

            /**
             * Opens popup
             * @param  data [description]
             */
            open: function(data) {

                if (!_body) {
                    _body = $(document.body);
                }

                var i;

                if (data.isObj === false) {
                    // convert jQuery collection to array to avoid conflicts later
                    mfp.items = data.items.toArray();

                    mfp.index = 0;
                    var items = data.items,
                        item;
                    for (i = 0; i < items.length; i++) {
                        item = items[i];
                        if (item.parsed) {
                            item = item.el[0];
                        }
                        if (item === data.el[0]) {
                            mfp.index = i;
                            break;
                        }
                    }
                } else {
                    mfp.items = $.isArray(data.items) ? data.items : [data.items];
                    mfp.index = data.index || 0;
                }

                // if popup is already opened - we just update the content
                if (mfp.isOpen) {
                    mfp.updateItemHTML();
                    return;
                }

                mfp.types = [];
                _wrapClasses = '';
                if (data.mainEl && data.mainEl.length) {
                    mfp.ev = data.mainEl.eq(0);
                } else {
                    mfp.ev = _document;
                }

                if (data.key) {
                    if (!mfp.popupsCache[data.key]) {
                        mfp.popupsCache[data.key] = {};
                    }
                    mfp.currTemplate = mfp.popupsCache[data.key];
                } else {
                    mfp.currTemplate = {};
                }



                mfp.st = $.extend(true, {}, $.magnificPopup.defaults, data);
                mfp.fixedContentPos = mfp.st.fixedContentPos === 'auto' ? !mfp.probablyMobile : mfp.st.fixedContentPos;

                if (mfp.st.modal) {
                    mfp.st.closeOnContentClick = false;
                    mfp.st.closeOnBgClick = false;
                    mfp.st.showCloseBtn = false;
                    mfp.st.enableEscapeKey = false;
                }


                // Building markup
                // main containers are created only once
                if (!mfp.bgOverlay) {

                    // Dark overlay
                    mfp.bgOverlay = _getEl('bg').on('click' + EVENT_NS, function() {
                        mfp.close();
                    });

                    mfp.wrap = _getEl('wrap').attr('tabindex', -1).on('click' + EVENT_NS, function(e) {
                        if (mfp._checkIfClose(e.target)) {
                            mfp.close();
                        }
                    });

                    mfp.container = _getEl('container', mfp.wrap);
                }

                mfp.contentContainer = _getEl('content');
                if (mfp.st.preloader) {
                    mfp.preloader = _getEl('preloader', mfp.container, mfp.st.tLoading);
                }


                // Initializing modules
                var modules = $.magnificPopup.modules;
                for (i = 0; i < modules.length; i++) {
                    var n = modules[i];
                    n = n.charAt(0).toUpperCase() + n.slice(1);
                    mfp['init' + n].call(mfp);
                }
                _mfpTrigger('BeforeOpen');


                if (mfp.st.showCloseBtn) {
                    // Close button
                    if (!mfp.st.closeBtnInside) {
                        mfp.wrap.append(_getCloseBtn());
                    } else {
                        _mfpOn(MARKUP_PARSE_EVENT, function(e, template, values, item) {
                            values.close_replaceWith = _getCloseBtn(item.type);
                        });
                        _wrapClasses += ' mfp-close-btn-in';
                    }
                }

                if (mfp.st.alignTop) {
                    _wrapClasses += ' mfp-align-top';
                }



                if (mfp.fixedContentPos) {
                    mfp.wrap.css({
                        overflow: mfp.st.overflowY,
                        overflowX: 'hidden',
                        overflowY: mfp.st.overflowY
                    });
                } else {
                    mfp.wrap.css({
                        top: _window.scrollTop(),
                        position: 'absolute'
                    });
                }
                if (mfp.st.fixedBgPos === false || (mfp.st.fixedBgPos === 'auto' && !mfp.fixedContentPos)) {
                    mfp.bgOverlay.css({
                        height: _document.height(),
                        position: 'absolute'
                    });
                }



                if (mfp.st.enableEscapeKey) {
                    // Close on ESC key
                    _document.on('keyup' + EVENT_NS, function(e) {
                        if (e.keyCode === 27) {
                            mfp.close();
                        }
                    });
                }

                _window.on('resize' + EVENT_NS, function() {
                    mfp.updateSize();
                });


                if (!mfp.st.closeOnContentClick) {
                    _wrapClasses += ' mfp-auto-cursor';
                }

                if (_wrapClasses)
                    mfp.wrap.addClass(_wrapClasses);


                // this triggers recalculation of layout, so we get it once to not to trigger twice
                var windowHeight = mfp.wH = _window.height();


                var windowStyles = {};

                if (mfp.fixedContentPos) {
                    if (mfp._hasScrollBar(windowHeight)) {
                        var s = mfp._getScrollbarSize();
                        if (s) {
                            windowStyles.marginRight = s;
                        }
                    }
                }

                if (mfp.fixedContentPos) {
                    if (!mfp.isIE7) {
                        windowStyles.overflow = 'hidden';
                    } else {
                        // ie7 double-scroll bug
                        $('body, html').css('overflow', 'hidden');
                    }
                }



                var classesToadd = mfp.st.mainClass;
                if (mfp.isIE7) {
                    classesToadd += ' mfp-ie7';
                }
                if (classesToadd) {
                    mfp._addClassToMFP(classesToadd);
                }

                // add content
                mfp.updateItemHTML();

                _mfpTrigger('BuildControls');

                // remove scrollbar, add margin e.t.c
                $('html').css(windowStyles);

                // add everything to DOM
                mfp.bgOverlay.add(mfp.wrap).prependTo(mfp.st.prependTo || _body);

                // Save last focused element
                mfp._lastFocusedEl = document.activeElement;

                // Wait for next cycle to allow CSS transition
                setTimeout(function() {

                    if (mfp.content) {
                        mfp._addClassToMFP(READY_CLASS);
                        mfp._setFocus();
                    } else {
                        // if content is not defined (not loaded e.t.c) we add class only for BG
                        mfp.bgOverlay.addClass(READY_CLASS);
                    }

                    // Trap the focus in popup
                    _document.on('focusin' + EVENT_NS, mfp._onFocusIn);

                }, 16);

                mfp.isOpen = true;
                mfp.updateSize(windowHeight);
                _mfpTrigger(OPEN_EVENT);

                return data;
            },

            /**
             * Closes the popup
             */
            close: function() {
                if (!mfp.isOpen) return;
                _mfpTrigger(BEFORE_CLOSE_EVENT);

                mfp.isOpen = false;
                // for CSS3 animation
                if (mfp.st.removalDelay && !mfp.isLowIE && mfp.supportsTransition) {
                    mfp._addClassToMFP(REMOVING_CLASS);
                    setTimeout(function() {
                        mfp._close();
                    }, mfp.st.removalDelay);
                } else {
                    mfp._close();
                }
            },

            /**
             * Helper for close() function
             */
            _close: function() {
                _mfpTrigger(CLOSE_EVENT);

                var classesToRemove = REMOVING_CLASS + ' ' + READY_CLASS + ' ';

                mfp.bgOverlay.detach();
                mfp.wrap.detach();
                mfp.container.empty();

                if (mfp.st.mainClass) {
                    classesToRemove += mfp.st.mainClass + ' ';
                }

                mfp._removeClassFromMFP(classesToRemove);

                if (mfp.fixedContentPos) {
                    var windowStyles = {
                        marginRight: ''
                    };
                    if (mfp.isIE7) {
                        $('body, html').css('overflow', '');
                    } else {
                        windowStyles.overflow = '';
                    }
                    $('html').css(windowStyles);
                }

                _document.off('keyup' + EVENT_NS + ' focusin' + EVENT_NS);
                mfp.ev.off(EVENT_NS);

                // clean up DOM elements that aren't removed
                mfp.wrap.attr('class', 'mfp-wrap').removeAttr('style');
                mfp.bgOverlay.attr('class', 'mfp-bg');
                mfp.container.attr('class', 'mfp-container');

                // remove close button from target element
                if (mfp.st.showCloseBtn &&
                    (!mfp.st.closeBtnInside || mfp.currTemplate[mfp.currItem.type] === true)) {
                    if (mfp.currTemplate.closeBtn)
                        mfp.currTemplate.closeBtn.detach();
                }


                if (mfp._lastFocusedEl) {
                    $(mfp._lastFocusedEl).focus(); // put tab focus back
                }
                mfp.currItem = null;
                mfp.content = null;
                mfp.currTemplate = null;
                mfp.prevHeight = 0;

                _mfpTrigger(AFTER_CLOSE_EVENT);
            },

            updateSize: function(winHeight) {

                if (mfp.isIOS) {
                    // fixes iOS nav bars https://github.com/dimsemenov/Magnific-Popup/issues/2
                    var zoomLevel = document.documentElement.clientWidth / window.innerWidth;
                    var height = window.innerHeight * zoomLevel;
                    mfp.wrap.css('height', height);
                    mfp.wH = height;
                } else {
                    mfp.wH = winHeight || _window.height();
                }
                // Fixes #84: popup incorrectly positioned with position:relative on body
                if (!mfp.fixedContentPos) {
                    mfp.wrap.css('height', mfp.wH);
                }

                _mfpTrigger('Resize');

            },

            /**
             * Set content of popup based on current index
             */
            updateItemHTML: function() {
                var item = mfp.items[mfp.index];

                // Detach and perform modifications
                mfp.contentContainer.detach();

                if (mfp.content)
                    mfp.content.detach();

                if (!item.parsed) {
                    item = mfp.parseEl(mfp.index);
                }

                var type = item.type;

                _mfpTrigger('BeforeChange', [mfp.currItem ? mfp.currItem.type : '', type]);
                // BeforeChange event works like so:
                // _mfpOn('BeforeChange', function(e, prevType, newType) { });

                mfp.currItem = item;





                if (!mfp.currTemplate[type]) {
                    var markup = mfp.st[type] ? mfp.st[type].markup : false;

                    // allows to modify markup
                    _mfpTrigger('FirstMarkupParse', markup);

                    if (markup) {
                        mfp.currTemplate[type] = $(markup);
                    } else {
                        // if there is no markup found we just define that template is parsed
                        mfp.currTemplate[type] = true;
                    }
                }

                if (_prevContentType && _prevContentType !== item.type) {
                    mfp.container.removeClass('mfp-' + _prevContentType + '-holder');
                }

                var newContent = mfp['get' + type.charAt(0).toUpperCase() + type.slice(1)](item, mfp.currTemplate[type]);
                mfp.appendContent(newContent, type);

                item.preloaded = true;

                _mfpTrigger(CHANGE_EVENT, item);
                _prevContentType = item.type;

                // Append container back after its content changed
                mfp.container.prepend(mfp.contentContainer);

                _mfpTrigger('AfterChange');
            },


            /**
             * Set HTML content of popup
             */
            appendContent: function(newContent, type) {
                mfp.content = newContent;

                if (newContent) {
                    if (mfp.st.showCloseBtn && mfp.st.closeBtnInside &&
                        mfp.currTemplate[type] === true) {
                        // if there is no markup, we just append close button element inside
                        if (!mfp.content.find('.mfp-close').length) {
                            mfp.content.append(_getCloseBtn());
                        }
                    } else {
                        mfp.content = newContent;
                    }
                } else {
                    mfp.content = '';
                }

                _mfpTrigger(BEFORE_APPEND_EVENT);
                mfp.container.addClass('mfp-' + type + '-holder');

                mfp.contentContainer.append(mfp.content);
            },




            /**
             * Creates Magnific Popup data object based on given data
             * @param  {int} index Index of item to parse
             */
            parseEl: function(index) {
                var item = mfp.items[index],
                    type;

                if (item.tagName) {
                    item = {
                        el: $(item)
                    };
                } else {
                    type = item.type;
                    item = {
                        data: item,
                        src: item.src
                    };
                }

                if (item.el) {
                    var types = mfp.types;

                    // check for 'mfp-TYPE' class
                    for (var i = 0; i < types.length; i++) {
                        if (item.el.hasClass('mfp-' + types[i])) {
                            type = types[i];
                            break;
                        }
                    }

                    item.src = item.el.attr('data-mfp-src');
                    if (!item.src) {
                        item.src = item.el.attr('href');
                    }
                }

                item.type = type || mfp.st.type || 'inline';
                item.index = index;
                item.parsed = true;
                mfp.items[index] = item;
                _mfpTrigger('ElementParse', item);

                return mfp.items[index];
            },


            /**
             * Initializes single popup or a group of popups
             */
            addGroup: function(el, options) {
                var eHandler = function(e) {
                    e.mfpEl = this;
                    mfp._openClick(e, el, options);
                };

                if (!options) {
                    options = {};
                }

                var eName = 'click.magnificPopup';
                options.mainEl = el;

                if (options.items) {
                    options.isObj = true;
                    el.off(eName).on(eName, eHandler);
                } else {
                    options.isObj = false;
                    if (options.delegate) {
                        el.off(eName).on(eName, options.delegate, eHandler);
                    } else {
                        options.items = el;
                        el.off(eName).on(eName, eHandler);
                    }
                }
            },
            _openClick: function(e, el, options) {
                var midClick = options.midClick !== undefined ? options.midClick : $.magnificPopup.defaults.midClick;


                if (!midClick && (e.which === 2 || e.ctrlKey || e.metaKey)) {
                    return;
                }

                var disableOn = options.disableOn !== undefined ? options.disableOn : $.magnificPopup.defaults.disableOn;

                if (disableOn) {
                    if ($.isFunction(disableOn)) {
                        if (!disableOn.call(mfp)) {
                            return true;
                        }
                    } else { // else it's number
                        if (_window.width() < disableOn) {
                            return true;
                        }
                    }
                }

                if (e.type) {
                    e.preventDefault();

                    // This will prevent popup from closing if element is inside and popup is already opened
                    if (mfp.isOpen) {
                        e.stopPropagation();
                    }
                }


                options.el = $(e.mfpEl);
                if (options.delegate) {
                    options.items = el.find(options.delegate);
                }
                mfp.open(options);
            },


            /**
             * Updates text on preloader
             */
            updateStatus: function(status, text) {

                if (mfp.preloader) {
                    if (_prevStatus !== status) {
                        mfp.container.removeClass('mfp-s-' + _prevStatus);
                    }

                    if (!text && status === 'loading') {
                        text = mfp.st.tLoading;
                    }

                    var data = {
                        status: status,
                        text: text
                    };
                    // allows to modify status
                    _mfpTrigger('UpdateStatus', data);

                    status = data.status;
                    text = data.text;

                    mfp.preloader.html(text);

                    mfp.preloader.find('a').on('click', function(e) {
                        e.stopImmediatePropagation();
                    });

                    mfp.container.addClass('mfp-s-' + status);
                    _prevStatus = status;
                }
            },


            /*
                "Private" helpers that aren't private at all
             */
            // Check to close popup or not
            // "target" is an element that was clicked
            _checkIfClose: function(target) {

                if ($(target).hasClass(PREVENT_CLOSE_CLASS)) {
                    return;
                }

                var closeOnContent = mfp.st.closeOnContentClick;
                var closeOnBg = mfp.st.closeOnBgClick;

                if (closeOnContent && closeOnBg) {
                    return true;
                } else {

                    // We close the popup if click is on close button or on preloader. Or if there is no content.
                    if (!mfp.content || $(target).hasClass('mfp-close') || (mfp.preloader && target === mfp.preloader[0])) {
                        return true;
                    }

                    // if click is outside the content
                    if ((target !== mfp.content[0] && !$.contains(mfp.content[0], target))) {
                        if (closeOnBg) {
                            // last check, if the clicked element is in DOM, (in case it's removed onclick)
                            if ($.contains(document, target)) {
                                return true;
                            }
                        }
                    } else if (closeOnContent) {
                        return true;
                    }

                }
                return false;
            },
            _addClassToMFP: function(cName) {
                mfp.bgOverlay.addClass(cName);
                mfp.wrap.addClass(cName);
            },
            _removeClassFromMFP: function(cName) {
                this.bgOverlay.removeClass(cName);
                mfp.wrap.removeClass(cName);
            },
            _hasScrollBar: function(winHeight) {
                return ((mfp.isIE7 ? _document.height() : document.body.scrollHeight) > (winHeight || _window.height()));
            },
            _setFocus: function() {
                (mfp.st.focus ? mfp.content.find(mfp.st.focus).eq(0) : mfp.wrap).focus();
            },
            _onFocusIn: function(e) {
                if (e.target !== mfp.wrap[0] && !$.contains(mfp.wrap[0], e.target)) {
                    mfp._setFocus();
                    return false;
                }
            },
            _parseMarkup: function(template, values, item) {
                var arr;
                if (item.data) {
                    values = $.extend(item.data, values);
                }
                _mfpTrigger(MARKUP_PARSE_EVENT, [template, values, item]);

                $.each(values, function(key, value) {
                    if (value === undefined || value === false) {
                        return true;
                    }
                    arr = key.split('_');
                    if (arr.length > 1) {
                        var el = template.find(EVENT_NS + '-' + arr[0]);

                        if (el.length > 0) {
                            var attr = arr[1];
                            if (attr === 'replaceWith') {
                                if (el[0] !== value[0]) {
                                    el.replaceWith(value);
                                }
                            } else if (attr === 'img') {
                                if (el.is('img')) {
                                    el.attr('src', value);
                                } else {
                                    el.replaceWith('<img src="' + value + '" class="' + el.attr('class') + '" />');
                                }
                            } else {
                                el.attr(arr[1], value);
                            }
                        }

                    } else {
                        template.find(EVENT_NS + '-' + key).html(value);
                    }
                });
            },

            _getScrollbarSize: function() {
                // thx David
                if (mfp.scrollbarSize === undefined) {
                    var scrollDiv = document.createElement("div");
                    scrollDiv.style.cssText = 'width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;';
                    document.body.appendChild(scrollDiv);
                    mfp.scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
                    document.body.removeChild(scrollDiv);
                }
                return mfp.scrollbarSize;
            }

        }; /* MagnificPopup core prototype end */




        /**
         * Public static functions
         */
        $.magnificPopup = {
            instance: null,
            proto: MagnificPopup.prototype,
            modules: [],

            open: function(options, index) {
                _checkInstance();

                if (!options) {
                    options = {};
                } else {
                    options = $.extend(true, {}, options);
                }


                options.isObj = true;
                options.index = index || 0;
                return this.instance.open(options);
            },

            close: function() {
                return $.magnificPopup.instance && $.magnificPopup.instance.close();
            },

            registerModule: function(name, module) {
                if (module.options) {
                    $.magnificPopup.defaults[name] = module.options;
                }
                $.extend(this.proto, module.proto);
                this.modules.push(name);
            },

            defaults: {

                // Info about options is in docs:
                // http://dimsemenov.com/plugins/magnific-popup/documentation.html#options

                disableOn: 0,

                key: null,

                midClick: false,

                mainClass: '',

                preloader: true,

                focus: '', // CSS selector of input to focus after popup is opened

                closeOnContentClick: false,

                closeOnBgClick: true,

                closeBtnInside: true,

                showCloseBtn: true,

                enableEscapeKey: true,

                modal: false,

                alignTop: false,

                removalDelay: 0,

                prependTo: null,

                fixedContentPos: 'auto',

                fixedBgPos: 'auto',

                overflowY: 'auto',

                closeMarkup: '<button title="%title%" type="button" class="mfp-close">&times;</button>',

                tClose: 'Close (Esc)',

                tLoading: 'Loading...'

            }
        };



        $.fn.magnificPopup = function(options) {
            _checkInstance();

            var jqEl = $(this);

            // We call some API method of first param is a string
            if (typeof options === "string") {

                if (options === 'open') {
                    var items,
                        itemOpts = _isJQ ? jqEl.data('magnificPopup') : jqEl[0].magnificPopup,
                        index = parseInt(arguments[1], 10) || 0;

                    if (itemOpts.items) {
                        items = itemOpts.items[index];
                    } else {
                        items = jqEl;
                        if (itemOpts.delegate) {
                            items = items.find(itemOpts.delegate);
                        }
                        items = items.eq(index);
                    }
                    mfp._openClick({
                        mfpEl: items
                    }, jqEl, itemOpts);
                } else {
                    if (mfp.isOpen)
                        mfp[options].apply(mfp, Array.prototype.slice.call(arguments, 1));
                }

            } else {
                // clone options obj
                options = $.extend(true, {}, options);

                /*
                 * As Zepto doesn't support .data() method for objects
                 * and it works only in normal browsers
                 * we assign "options" object directly to the DOM element. FTW!
                 */
                if (_isJQ) {
                    jqEl.data('magnificPopup', options);
                } else {
                    jqEl[0].magnificPopup = options;
                }

                mfp.addGroup(jqEl, options);

            }
            return jqEl;
        };


        //Quick benchmark
        /*
        var start = performance.now(),
            i,
            rounds = 1000;

        for(i = 0; i < rounds; i++) {

        }
        console.log('Test #1:', performance.now() - start);

        start = performance.now();
        for(i = 0; i < rounds; i++) {

        }
        console.log('Test #2:', performance.now() - start);
        */


        /*>>core*/

        /*>>inline*/

        var INLINE_NS = 'inline',
            _hiddenClass,
            _inlinePlaceholder,
            _lastInlineElement,
            _putInlineElementsBack = function() {
                if (_lastInlineElement) {
                    _inlinePlaceholder.after(_lastInlineElement.addClass(_hiddenClass)).detach();
                    _lastInlineElement = null;
                }
            };

        $.magnificPopup.registerModule(INLINE_NS, {
            options: {
                hiddenClass: 'hide', // will be appended with `mfp-` prefix
                markup: '',
                tNotFound: 'Content not found'
            },
            proto: {

                initInline: function() {
                    mfp.types.push(INLINE_NS);

                    _mfpOn(CLOSE_EVENT + '.' + INLINE_NS, function() {
                        _putInlineElementsBack();
                    });
                },

                getInline: function(item, template) {

                    _putInlineElementsBack();

                    if (item.src) {
                        var inlineSt = mfp.st.inline,
                            el = $(item.src);

                        if (el.length) {

                            // If target element has parent - we replace it with placeholder and put it back after popup is closed
                            var parent = el[0].parentNode;
                            if (parent && parent.tagName) {
                                if (!_inlinePlaceholder) {
                                    _hiddenClass = inlineSt.hiddenClass;
                                    _inlinePlaceholder = _getEl(_hiddenClass);
                                    _hiddenClass = 'mfp-' + _hiddenClass;
                                }
                                // replace target inline element with placeholder
                                _lastInlineElement = el.after(_inlinePlaceholder).detach().removeClass(_hiddenClass);
                            }

                            mfp.updateStatus('ready');
                        } else {
                            mfp.updateStatus('error', inlineSt.tNotFound);
                            el = $('<div>');
                        }

                        item.inlineElement = el;
                        return el;
                    }

                    mfp.updateStatus('ready');
                    mfp._parseMarkup(template, {}, item);
                    return template;
                }
            }
        });

        /*>>inline*/

        /*>>ajax*/
        var AJAX_NS = 'ajax',
            _ajaxCur,
            _removeAjaxCursor = function() {
                if (_ajaxCur) {
                    _body.removeClass(_ajaxCur);
                }
            },
            _destroyAjaxRequest = function() {
                _removeAjaxCursor();
                if (mfp.req) {
                    mfp.req.abort();
                }
            };

        $.magnificPopup.registerModule(AJAX_NS, {

            options: {
                settings: null,
                cursor: 'mfp-ajax-cur',
                tError: '<a href="%url%">The content</a> could not be loaded.'
            },

            proto: {
                initAjax: function() {
                    mfp.types.push(AJAX_NS);
                    _ajaxCur = mfp.st.ajax.cursor;

                    _mfpOn(CLOSE_EVENT + '.' + AJAX_NS, _destroyAjaxRequest);
                    _mfpOn('BeforeChange.' + AJAX_NS, _destroyAjaxRequest);
                },
                getAjax: function(item) {

                    if (_ajaxCur)
                        _body.addClass(_ajaxCur);

                    mfp.updateStatus('loading');

                    var opts = $.extend({
                        url: item.src,
                        success: function(data, textStatus, jqXHR) {
                            var temp = {
                                data: data,
                                xhr: jqXHR
                            };

                            _mfpTrigger('ParseAjax', temp);

                            mfp.appendContent($(temp.data), AJAX_NS);

                            item.finished = true;

                            _removeAjaxCursor();

                            mfp._setFocus();

                            setTimeout(function() {
                                mfp.wrap.addClass(READY_CLASS);
                            }, 16);

                            mfp.updateStatus('ready');

                            _mfpTrigger('AjaxContentAdded');
                        },
                        error: function() {
                            _removeAjaxCursor();
                            item.finished = item.loadError = true;
                            mfp.updateStatus('error', mfp.st.ajax.tError.replace('%url%', item.src));
                        }
                    }, mfp.st.ajax.settings);

                    mfp.req = $.ajax(opts);

                    return '';
                }
            }
        });







        /*>>ajax*/

        /*>>image*/
        var _imgInterval,
            _getTitle = function(item) {
                if (item.data && item.data.title !== undefined)
                    return item.data.title;

                var src = mfp.st.image.titleSrc;

                if (src) {
                    if ($.isFunction(src)) {
                        return src.call(mfp, item);
                    } else if (item.el) {
                        return item.el.attr(src) || '';
                    }
                }
                return '';
            };

        $.magnificPopup.registerModule('image', {

            options: {
                markup: '<div class="mfp-figure">' +
                    '<div class="mfp-close"></div>' +
                    '<figure>' +
                    '<div class="mfp-img"></div>' +
                    '<figcaption>' +
                    '<div class="mfp-bottom-bar">' +
                    '<div class="mfp-title"></div>' +
                    '<div class="mfp-counter"></div>' +
                    '</div>' +
                    '</figcaption>' +
                    '</figure>' +
                    '</div>',
                cursor: 'mfp-zoom-out-cur',
                titleSrc: 'title',
                verticalFit: true,
                tError: '<a href="%url%">The image</a> could not be loaded.'
            },

            proto: {
                initImage: function() {
                    var imgSt = mfp.st.image,
                        ns = '.image';

                    mfp.types.push('image');

                    _mfpOn(OPEN_EVENT + ns, function() {
                        if (mfp.currItem.type === 'image' && imgSt.cursor) {
                            _body.addClass(imgSt.cursor);
                        }
                    });

                    _mfpOn(CLOSE_EVENT + ns, function() {
                        if (imgSt.cursor) {
                            _body.removeClass(imgSt.cursor);
                        }
                        _window.off('resize' + EVENT_NS);
                    });

                    _mfpOn('Resize' + ns, mfp.resizeImage);
                    if (mfp.isLowIE) {
                        _mfpOn('AfterChange', mfp.resizeImage);
                    }
                },
                resizeImage: function() {
                    var item = mfp.currItem;
                    if (!item || !item.img) return;

                    if (mfp.st.image.verticalFit) {
                        var decr = 0;
                        // fix box-sizing in ie7/8
                        if (mfp.isLowIE) {
                            decr = parseInt(item.img.css('padding-top'), 10) + parseInt(item.img.css('padding-bottom'), 10);
                        }
                        item.img.css('max-height', mfp.wH - decr);
                    }
                },
                _onImageHasSize: function(item) {
                    if (item.img) {

                        item.hasSize = true;

                        if (_imgInterval) {
                            clearInterval(_imgInterval);
                        }

                        item.isCheckingImgSize = false;

                        _mfpTrigger('ImageHasSize', item);

                        if (item.imgHidden) {
                            if (mfp.content)
                                mfp.content.removeClass('mfp-loading');

                            item.imgHidden = false;
                        }

                    }
                },

                /**
                 * Function that loops until the image has size to display elements that rely on it asap
                 */
                findImageSize: function(item) {

                    var counter = 0,
                        img = item.img[0],
                        mfpSetInterval = function(delay) {

                            if (_imgInterval) {
                                clearInterval(_imgInterval);
                            }
                            // decelerating interval that checks for size of an image
                            _imgInterval = setInterval(function() {
                                if (img.naturalWidth > 0) {
                                    mfp._onImageHasSize(item);
                                    return;
                                }

                                if (counter > 200) {
                                    clearInterval(_imgInterval);
                                }

                                counter++;
                                if (counter === 3) {
                                    mfpSetInterval(10);
                                } else if (counter === 40) {
                                    mfpSetInterval(50);
                                } else if (counter === 100) {
                                    mfpSetInterval(500);
                                }
                            }, delay);
                        };

                    mfpSetInterval(1);
                },

                getImage: function(item, template) {

                    var guard = 0,

                        // image load complete handler
                        onLoadComplete = function() {
                            if (item) {
                                if (item.img[0].complete) {
                                    item.img.off('.mfploader');

                                    if (item === mfp.currItem) {
                                        mfp._onImageHasSize(item);

                                        mfp.updateStatus('ready');
                                    }

                                    item.hasSize = true;
                                    item.loaded = true;

                                    _mfpTrigger('ImageLoadComplete');

                                } else {
                                    // if image complete check fails 200 times (20 sec), we assume that there was an error.
                                    guard++;
                                    if (guard < 200) {
                                        setTimeout(onLoadComplete, 100);
                                    } else {
                                        onLoadError();
                                    }
                                }
                            }
                        },

                        // image error handler
                        onLoadError = function() {
                            if (item) {
                                item.img.off('.mfploader');
                                if (item === mfp.currItem) {
                                    mfp._onImageHasSize(item);
                                    mfp.updateStatus('error', imgSt.tError.replace('%url%', item.src));
                                }

                                item.hasSize = true;
                                item.loaded = true;
                                item.loadError = true;
                            }
                        },
                        imgSt = mfp.st.image;


                    var el = template.find('.mfp-img');
                    if (el.length) {
                        var img = document.createElement('img');
                        img.className = 'mfp-img';
                        item.img = $(img).on('load.mfploader', onLoadComplete).on('error.mfploader', onLoadError);
                        img.src = item.src;

                        // without clone() "error" event is not firing when IMG is replaced by new IMG
                        // TODO: find a way to avoid such cloning
                        if (el.is('img')) {
                            item.img = item.img.clone();
                        }

                        img = item.img[0];
                        if (img.naturalWidth > 0) {
                            item.hasSize = true;
                        } else if (!img.width) {
                            item.hasSize = false;
                        }
                    }

                    mfp._parseMarkup(template, {
                        title: _getTitle(item),
                        img_replaceWith: item.img
                    }, item);

                    mfp.resizeImage();

                    if (item.hasSize) {
                        if (_imgInterval) clearInterval(_imgInterval);

                        if (item.loadError) {
                            template.addClass('mfp-loading');
                            mfp.updateStatus('error', imgSt.tError.replace('%url%', item.src));
                        } else {
                            template.removeClass('mfp-loading');
                            mfp.updateStatus('ready');
                        }
                        return template;
                    }

                    mfp.updateStatus('loading');
                    item.loading = true;

                    if (!item.hasSize) {
                        item.imgHidden = true;
                        template.addClass('mfp-loading');
                        mfp.findImageSize(item);
                    }

                    return template;
                }
            }
        });



        /*>>image*/

        /*>>zoom*/
        var hasMozTransform,
            getHasMozTransform = function() {
                if (hasMozTransform === undefined) {
                    hasMozTransform = document.createElement('p').style.MozTransform !== undefined;
                }
                return hasMozTransform;
            };

        $.magnificPopup.registerModule('zoom', {

            options: {
                enabled: false,
                easing: 'ease-in-out',
                duration: 300,
                opener: function(element) {
                    return element.is('img') ? element : element.find('img');
                }
            },

            proto: {

                initZoom: function() {
                    var zoomSt = mfp.st.zoom,
                        ns = '.zoom',
                        image;

                    if (!zoomSt.enabled || !mfp.supportsTransition) {
                        return;
                    }

                    var duration = zoomSt.duration,
                        getElToAnimate = function(image) {
                            var newImg = image.clone().removeAttr('style').removeAttr('class').addClass('mfp-animated-image'),
                                transition = 'all ' + (zoomSt.duration / 1000) + 's ' + zoomSt.easing,
                                cssObj = {
                                    position: 'fixed',
                                    zIndex: 9999,
                                    left: 0,
                                    top: 0,
                                    '-webkit-backface-visibility': 'hidden'
                                },
                                t = 'transition';

                            cssObj['-webkit-' + t] = cssObj['-moz-' + t] = cssObj['-o-' + t] = cssObj[t] = transition;

                            newImg.css(cssObj);
                            return newImg;
                        },
                        showMainContent = function() {
                            mfp.content.css('visibility', 'visible');
                        },
                        openTimeout,
                        animatedImg;

                    _mfpOn('BuildControls' + ns, function() {
                        if (mfp._allowZoom()) {

                            clearTimeout(openTimeout);
                            mfp.content.css('visibility', 'hidden');

                            // Basically, all code below does is clones existing image, puts in on top of the current one and animated it

                            image = mfp._getItemToZoom();

                            if (!image) {
                                showMainContent();
                                return;
                            }

                            animatedImg = getElToAnimate(image);

                            animatedImg.css(mfp._getOffset());

                            mfp.wrap.append(animatedImg);

                            openTimeout = setTimeout(function() {
                                animatedImg.css(mfp._getOffset(true));
                                openTimeout = setTimeout(function() {

                                    showMainContent();

                                    setTimeout(function() {
                                        animatedImg.remove();
                                        image = animatedImg = null;
                                        _mfpTrigger('ZoomAnimationEnded');
                                    }, 16); // avoid blink when switching images 

                                }, duration); // this timeout equals animation duration

                            }, 16); // by adding this timeout we avoid short glitch at the beginning of animation


                            // Lots of timeouts...
                        }
                    });
                    _mfpOn(BEFORE_CLOSE_EVENT + ns, function() {
                        if (mfp._allowZoom()) {

                            clearTimeout(openTimeout);

                            mfp.st.removalDelay = duration;

                            if (!image) {
                                image = mfp._getItemToZoom();
                                if (!image) {
                                    return;
                                }
                                animatedImg = getElToAnimate(image);
                            }


                            animatedImg.css(mfp._getOffset(true));
                            mfp.wrap.append(animatedImg);
                            mfp.content.css('visibility', 'hidden');

                            setTimeout(function() {
                                animatedImg.css(mfp._getOffset());
                            }, 16);
                        }

                    });

                    _mfpOn(CLOSE_EVENT + ns, function() {
                        if (mfp._allowZoom()) {
                            showMainContent();
                            if (animatedImg) {
                                animatedImg.remove();
                            }
                            image = null;
                        }
                    });
                },

                _allowZoom: function() {
                    return mfp.currItem.type === 'image';
                },

                _getItemToZoom: function() {
                    if (mfp.currItem.hasSize) {
                        return mfp.currItem.img;
                    } else {
                        return false;
                    }
                },

                // Get element postion relative to viewport
                _getOffset: function(isLarge) {
                    var el;
                    if (isLarge) {
                        el = mfp.currItem.img;
                    } else {
                        el = mfp.st.zoom.opener(mfp.currItem.el || mfp.currItem);
                    }

                    var offset = el.offset();
                    var paddingTop = parseInt(el.css('padding-top'), 10);
                    var paddingBottom = parseInt(el.css('padding-bottom'), 10);
                    offset.top -= ($(window).scrollTop() - paddingTop);


                    /*
                    
                    Animating left + top + width/height looks glitchy in Firefox, but perfect in Chrome. And vice-versa.

                     */
                    var obj = {
                        width: el.width(),
                        // fix Zepto height+padding issue
                        height: (_isJQ ? el.innerHeight() : el[0].offsetHeight) - paddingBottom - paddingTop
                    };

                    // I hate to do this, but there is no another option
                    if (getHasMozTransform()) {
                        obj['-moz-transform'] = obj['transform'] = 'translate(' + offset.left + 'px,' + offset.top + 'px)';
                    } else {
                        obj.left = offset.left;
                        obj.top = offset.top;
                    }
                    return obj;
                }

            }
        });



        /*>>zoom*/

        /*>>iframe*/

        var IFRAME_NS = 'iframe',
            _emptyPage = '//about:blank',

            _fixIframeBugs = function(isShowing) {
                if (mfp.currTemplate[IFRAME_NS]) {
                    var el = mfp.currTemplate[IFRAME_NS].find('iframe');
                    if (el.length) {
                        // reset src after the popup is closed to avoid "video keeps playing after popup is closed" bug
                        if (!isShowing) {
                            el[0].src = _emptyPage;
                        }

                        // IE8 black screen bug fix
                        if (mfp.isIE8) {
                            el.css('display', isShowing ? 'block' : 'none');
                        }
                    }
                }
            };

        $.magnificPopup.registerModule(IFRAME_NS, {

            options: {
                markup: '<div class="mfp-iframe-scaler">' +
                    '<div class="mfp-close"></div>' +
                    '<iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe>' +
                    '</div>',

                srcAction: 'iframe_src',

                // we don't care and support only one default type of URL by default
                patterns: {
                    youtube: {
                        index: 'youtube.com',
                        id: 'v=',
                        src: '//www.youtube.com/embed/%id%?autoplay=1'
                    },
                    vimeo: {
                        index: 'vimeo.com/',
                        id: '/',
                        src: '//player.vimeo.com/video/%id%?autoplay=1'
                    },
                    gmaps: {
                        index: '//maps.google.',
                        src: '%id%&output=embed'
                    }
                }
            },

            proto: {
                initIframe: function() {
                    mfp.types.push(IFRAME_NS);

                    _mfpOn('BeforeChange', function(e, prevType, newType) {
                        if (prevType !== newType) {
                            if (prevType === IFRAME_NS) {
                                _fixIframeBugs(); // iframe if removed
                            } else if (newType === IFRAME_NS) {
                                _fixIframeBugs(true); // iframe is showing
                            }
                        } // else {
                        // iframe source is switched, don't do anything
                        //}
                    });

                    _mfpOn(CLOSE_EVENT + '.' + IFRAME_NS, function() {
                        _fixIframeBugs();
                    });
                },

                getIframe: function(item, template) {
                    var embedSrc = item.src;
                    var iframeSt = mfp.st.iframe;

                    $.each(iframeSt.patterns, function() {
                        if (embedSrc.indexOf(this.index) > -1) {
                            if (this.id) {
                                if (typeof this.id === 'string') {
                                    embedSrc = embedSrc.substr(embedSrc.lastIndexOf(this.id) + this.id.length, embedSrc.length);
                                } else {
                                    embedSrc = this.id.call(this, embedSrc);
                                }
                            }
                            embedSrc = this.src.replace('%id%', embedSrc);
                            return false; // break;
                        }
                    });

                    var dataObj = {};
                    if (iframeSt.srcAction) {
                        dataObj[iframeSt.srcAction] = embedSrc;
                    }
                    mfp._parseMarkup(template, dataObj, item);

                    mfp.updateStatus('ready');

                    return template;
                }
            }
        });



        /*>>iframe*/

        /*>>gallery*/
        /**
         * Get looped index depending on number of slides
         */
        var _getLoopedId = function(index) {
            var numSlides = mfp.items.length;
            if (index > numSlides - 1) {
                return index - numSlides;
            } else if (index < 0) {
                return numSlides + index;
            }
            return index;
        },
            _replaceCurrTotal = function(text, curr, total) {
                return text.replace(/%curr%/gi, curr + 1).replace(/%total%/gi, total);
            };

        $.magnificPopup.registerModule('gallery', {

            options: {
                enabled: false,
                arrowMarkup: '<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',
                preload: [0, 2],
                navigateByImgClick: true,
                arrows: true,

                tPrev: 'Previous (Left arrow key)',
                tNext: 'Next (Right arrow key)',
                tCounter: '%curr% of %total%'
            },

            proto: {
                initGallery: function() {

                    var gSt = mfp.st.gallery,
                        ns = '.mfp-gallery',
                        supportsFastClick = Boolean($.fn.mfpFastClick);

                    mfp.direction = true; // true - next, false - prev

                    if (!gSt || !gSt.enabled) return false;

                    _wrapClasses += ' mfp-gallery';

                    _mfpOn(OPEN_EVENT + ns, function() {

                        if (gSt.navigateByImgClick) {
                            mfp.wrap.on('click' + ns, '.mfp-img', function() {
                                if (mfp.items.length > 1) {
                                    mfp.next();
                                    return false;
                                }
                            });
                        }

                        _document.on('keydown' + ns, function(e) {
                            if (e.keyCode === 37) {
                                mfp.prev();
                            } else if (e.keyCode === 39) {
                                mfp.next();
                            }
                        });
                    });

                    _mfpOn('UpdateStatus' + ns, function(e, data) {
                        if (data.text) {
                            data.text = _replaceCurrTotal(data.text, mfp.currItem.index, mfp.items.length);
                        }
                    });

                    _mfpOn(MARKUP_PARSE_EVENT + ns, function(e, element, values, item) {
                        var l = mfp.items.length;
                        values.counter = l > 1 ? _replaceCurrTotal(gSt.tCounter, item.index, l) : '';
                    });

                    _mfpOn('BuildControls' + ns, function() {
                        if (mfp.items.length > 1 && gSt.arrows && !mfp.arrowLeft) {
                            var markup = gSt.arrowMarkup,
                                arrowLeft = mfp.arrowLeft = $(markup.replace(/%title%/gi, gSt.tPrev).replace(/%dir%/gi, 'left')).addClass(PREVENT_CLOSE_CLASS),
                                arrowRight = mfp.arrowRight = $(markup.replace(/%title%/gi, gSt.tNext).replace(/%dir%/gi, 'right')).addClass(PREVENT_CLOSE_CLASS);

                            var eName = supportsFastClick ? 'mfpFastClick' : 'click';
                            arrowLeft[eName](function() {
                                mfp.prev();
                            });
                            arrowRight[eName](function() {
                                mfp.next();
                            });

                            // Polyfill for :before and :after (adds elements with classes mfp-a and mfp-b)
                            if (mfp.isIE7) {
                                _getEl('b', arrowLeft[0], false, true);
                                _getEl('a', arrowLeft[0], false, true);
                                _getEl('b', arrowRight[0], false, true);
                                _getEl('a', arrowRight[0], false, true);
                            }

                            mfp.container.append(arrowLeft.add(arrowRight));
                        }
                    });

                    _mfpOn(CHANGE_EVENT + ns, function() {
                        if (mfp._preloadTimeout) clearTimeout(mfp._preloadTimeout);

                        mfp._preloadTimeout = setTimeout(function() {
                            mfp.preloadNearbyImages();
                            mfp._preloadTimeout = null;
                        }, 16);
                    });


                    _mfpOn(CLOSE_EVENT + ns, function() {
                        _document.off(ns);
                        mfp.wrap.off('click' + ns);

                        if (mfp.arrowLeft && supportsFastClick) {
                            mfp.arrowLeft.add(mfp.arrowRight).destroyMfpFastClick();
                        }
                        mfp.arrowRight = mfp.arrowLeft = null;
                    });

                },
                next: function() {
                    mfp.direction = true;
                    mfp.index = _getLoopedId(mfp.index + 1);
                    mfp.updateItemHTML();
                },
                prev: function() {
                    mfp.direction = false;
                    mfp.index = _getLoopedId(mfp.index - 1);
                    mfp.updateItemHTML();
                },
                goTo: function(newIndex) {
                    mfp.direction = (newIndex >= mfp.index);
                    mfp.index = newIndex;
                    mfp.updateItemHTML();
                },
                preloadNearbyImages: function() {
                    var p = mfp.st.gallery.preload,
                        preloadBefore = Math.min(p[0], mfp.items.length),
                        preloadAfter = Math.min(p[1], mfp.items.length),
                        i;

                    for (i = 1; i <= (mfp.direction ? preloadAfter : preloadBefore); i++) {
                        mfp._preloadItem(mfp.index + i);
                    }
                    for (i = 1; i <= (mfp.direction ? preloadBefore : preloadAfter); i++) {
                        mfp._preloadItem(mfp.index - i);
                    }
                },
                _preloadItem: function(index) {
                    index = _getLoopedId(index);

                    if (mfp.items[index].preloaded) {
                        return;
                    }

                    var item = mfp.items[index];
                    if (!item.parsed) {
                        item = mfp.parseEl(index);
                    }

                    _mfpTrigger('LazyLoad', item);

                    if (item.type === 'image') {
                        item.img = $('<img class="mfp-img" />').on('load.mfploader', function() {
                            item.hasSize = true;
                        }).on('error.mfploader', function() {
                            item.hasSize = true;
                            item.loadError = true;
                            _mfpTrigger('LazyLoadError', item);
                        }).attr('src', item.src);
                    }


                    item.preloaded = true;
                }
            }
        });

        /*
        Touch Support that might be implemented some day

        addSwipeGesture: function() {
            var startX,
                moved,
                multipleTouches;

                return;

            var namespace = '.mfp',
                addEventNames = function(pref, down, move, up, cancel) {
                    mfp._tStart = pref + down + namespace;
                    mfp._tMove = pref + move + namespace;
                    mfp._tEnd = pref + up + namespace;
                    mfp._tCancel = pref + cancel + namespace;
                };

            if(window.navigator.msPointerEnabled) {
                addEventNames('MSPointer', 'Down', 'Move', 'Up', 'Cancel');
            } else if('ontouchstart' in window) {
                addEventNames('touch', 'start', 'move', 'end', 'cancel');
            } else {
                return;
            }
            _window.on(mfp._tStart, function(e) {
                var oE = e.originalEvent;
                multipleTouches = moved = false;
                startX = oE.pageX || oE.changedTouches[0].pageX;
            }).on(mfp._tMove, function(e) {
                if(e.originalEvent.touches.length > 1) {
                    multipleTouches = e.originalEvent.touches.length;
                } else {
                    //e.preventDefault();
                    moved = true;
                }
            }).on(mfp._tEnd + ' ' + mfp._tCancel, function(e) {
                if(moved && !multipleTouches) {
                    var oE = e.originalEvent,
                        diff = startX - (oE.pageX || oE.changedTouches[0].pageX);

                    if(diff > 20) {
                        mfp.next();
                    } else if(diff < -20) {
                        mfp.prev();
                    }
                }
            });
        },
        */


        /*>>gallery*/

        /*>>retina*/

        var RETINA_NS = 'retina';

        $.magnificPopup.registerModule(RETINA_NS, {
            options: {
                replaceSrc: function(item) {
                    return item.src.replace(/\.\w+$/, function(m) {
                        return '@2x' + m;
                    });
                },
                ratio: 1 // Function or number.  Set to 1 to disable.
            },
            proto: {
                initRetina: function() {
                    if (window.devicePixelRatio > 1) {

                        var st = mfp.st.retina,
                            ratio = st.ratio;

                        ratio = !isNaN(ratio) ? ratio : ratio();

                        if (ratio > 1) {
                            _mfpOn('ImageHasSize' + '.' + RETINA_NS, function(e, item) {
                                item.img.css({
                                    'max-width': item.img[0].naturalWidth / ratio,
                                    'width': '100%'
                                });
                            });
                            _mfpOn('ElementParse' + '.' + RETINA_NS, function(e, item) {
                                item.src = st.replaceSrc(item, ratio);
                            });
                        }
                    }

                }
            }
        });

        /*>>retina*/

        /*>>fastclick*/
        /**
         * FastClick event implementation. (removes 300ms delay on touch devices)
         * Based on https://developers.google.com/mobile/articles/fast_buttons
         *
         * You may use it outside the Magnific Popup by calling just:
         *
         * $('.your-el').mfpFastClick(function() {
         *     console.log('Clicked!');
         * });
         *
         * To unbind:
         * $('.your-el').destroyMfpFastClick();
         *
         *
         * Note that it's a very basic and simple implementation, it blocks ghost click on the same element where it was bound.
         * If you need something more advanced, use plugin by FT Labs https://github.com/ftlabs/fastclick
         *
         */

        (function() {
            var ghostClickDelay = 1000,
                supportsTouch = 'ontouchstart' in window,
                unbindTouchMove = function() {
                    _window.off('touchmove' + ns + ' touchend' + ns);
                },
                eName = 'mfpFastClick',
                ns = '.' + eName;


            // As Zepto.js doesn't have an easy way to add custom events (like jQuery), so we implement it in this way
            $.fn.mfpFastClick = function(callback) {

                return $(this).each(function() {

                    var elem = $(this),
                        lock;

                    if (supportsTouch) {

                        var timeout,
                            startX,
                            startY,
                            pointerMoved,
                            point,
                            numPointers;

                        elem.on('touchstart' + ns, function(e) {
                            pointerMoved = false;
                            numPointers = 1;

                            point = e.originalEvent ? e.originalEvent.touches[0] : e.touches[0];
                            startX = point.clientX;
                            startY = point.clientY;

                            _window.on('touchmove' + ns, function(e) {
                                point = e.originalEvent ? e.originalEvent.touches : e.touches;
                                numPointers = point.length;
                                point = point[0];
                                if (Math.abs(point.clientX - startX) > 10 ||
                                    Math.abs(point.clientY - startY) > 10) {
                                    pointerMoved = true;
                                    unbindTouchMove();
                                }
                            }).on('touchend' + ns, function(e) {
                                unbindTouchMove();
                                if (pointerMoved || numPointers > 1) {
                                    return;
                                }
                                lock = true;
                                e.preventDefault();
                                clearTimeout(timeout);
                                timeout = setTimeout(function() {
                                    lock = false;
                                }, ghostClickDelay);
                                callback();
                            });
                        });

                    }

                    elem.on('click' + ns, function() {
                        if (!lock) {
                            callback();
                        }
                    });
                });
            };

            $.fn.destroyMfpFastClick = function() {
                $(this).off('touchstart' + ns + ' click' + ns);
                if (supportsTouch) _window.off('touchmove' + ns + ' touchend' + ns);
            };
        })();

        /*>>fastclick*/
        _checkInstance();
    })(window.jQuery || window.Zepto);
/*-------------------------------  FRED  ------------------------------------*/
    /*
     *  jQuery carouFredSel 6.2.0
     *  Demo's and documentation:
     *  caroufredsel.dev7studios.com
     *
     *  Copyright (c) 2013 Fred Heusschen
     *  www.frebsite.nl
     *
     *  Dual licensed under the MIT and GPL licenses.
     *  http://en.wikipedia.org/wiki/MIT_License
     *  http://en.wikipedia.org/wiki/GNU_General_Public_License
     */


    (function($) {


        //  LOCAL

        if ( $.fn.carouFredSel )
        {
            return;
        }

        $.fn.caroufredsel = $.fn.carouFredSel = function(options, configs)
        {

            //  no element
            if (this.length == 0)
            {
                debug( true, 'No element found for "' + this.selector + '".' );
                return this;
            }

            //  multiple elements
            if (this.length > 1)
            {
                return this.each(function() {
                    $(this).carouFredSel(options, configs);
                });
            }


            var $cfs = this,
                $tt0 = this[0],
                starting_position = false;

            if ($cfs.data('_cfs_isCarousel'))
            {
                starting_position = $cfs.triggerHandler('_cfs_triggerEvent', 'currentPosition');
                $cfs.trigger('_cfs_triggerEvent', ['destroy', true]);
            }

            var FN = {};

            FN._cfs_init = function(o, setOrig, start)
            {
                o = go_getObject($tt0, o);

                o.items = go_getItemsObject($tt0, o.items);
                o.scroll = go_getScrollObject($tt0, o.scroll);
                o.auto = go_getAutoObject($tt0, o.auto);
                o.prev = go_getPrevNextObject($tt0, o.prev);
                o.next = go_getPrevNextObject($tt0, o.next);
                o.pagination = go_getPaginationObject($tt0, o.pagination);
                o.swipe = go_getSwipeObject($tt0, o.swipe);
                o.mousewheel = go_getMousewheelObject($tt0, o.mousewheel);

                if (setOrig)
                {
                    opts_orig = $.extend(true, {}, $.fn.carouFredSel.defaults, o);
                }

                opts = $.extend(true, {}, $.fn.carouFredSel.defaults, o);
                opts.d = cf_getDimensions(opts);

                crsl.direction = (opts.direction == 'up' || opts.direction == 'left') ? 'next' : 'prev';

                var a_itm = $cfs.children(),
                    avail_primary = ms_getParentSize($wrp, opts, 'width');

                if (is_true(opts.cookie))
                {
                    opts.cookie = 'caroufredsel_cookie_' + conf.serialNumber;
                }

                opts.maxDimension = ms_getMaxDimension(opts, avail_primary);

                //  complement items and sizes
                opts.items = in_complementItems(opts.items, opts, a_itm, start);
                opts[opts.d['width']] = in_complementPrimarySize(opts[opts.d['width']], opts, a_itm);
                opts[opts.d['height']] = in_complementSecondarySize(opts[opts.d['height']], opts, a_itm);

                //  primary size not set for a responsive carousel
                if (opts.responsive)
                {
                    if (!is_percentage(opts[opts.d['width']]))
                    {
                        opts[opts.d['width']] = '100%';
                    }
                }

                //  primary size is percentage
                if (is_percentage(opts[opts.d['width']]))
                {
                    crsl.upDateOnWindowResize = true;
                    crsl.primarySizePercentage = opts[opts.d['width']];
                    opts[opts.d['width']] = ms_getPercentage(avail_primary, crsl.primarySizePercentage);
                    if (!opts.items.visible)
                    {
                        opts.items.visibleConf.variable = true;
                    }
                }

                if (opts.responsive)
                {
                    opts.usePadding = false;
                    opts.padding = [0, 0, 0, 0];
                    opts.align = false;
                    opts.items.visibleConf.variable = false;
                }
                else
                {
                    //  visible-items not set
                    if (!opts.items.visible)
                    {
                        opts = in_complementVisibleItems(opts, avail_primary);
                    }

                    //  primary size not set -> calculate it or set to "variable"
                    if (!opts[opts.d['width']])
                    {
                        if (!opts.items.visibleConf.variable && is_number(opts.items[opts.d['width']]) && opts.items.filter == '*')
                        {
                            opts[opts.d['width']] = opts.items.visible * opts.items[opts.d['width']];
                            opts.align = false;
                        }
                        else
                        {
                            opts[opts.d['width']] = 'variable';
                        }
                    }
                    //  align not set -> set to center if primary size is number
                    if (is_undefined(opts.align))
                    {
                        opts.align = (is_number(opts[opts.d['width']]))
                            ? 'center'
                            : false;
                    }
                    //  set variabe visible-items
                    if (opts.items.visibleConf.variable)
                    {
                        opts.items.visible = gn_getVisibleItemsNext(a_itm, opts, 0);
                    }
                }

                //  set visible items by filter
                if (opts.items.filter != '*' && !opts.items.visibleConf.variable)
                {
                    opts.items.visibleConf.org = opts.items.visible;
                    opts.items.visible = gn_getVisibleItemsNextFilter(a_itm, opts, 0);
                }

                opts.items.visible = cf_getItemsAdjust(opts.items.visible, opts, opts.items.visibleConf.adjust, $tt0);
                opts.items.visibleConf.old = opts.items.visible;

                if (opts.responsive)
                {
                    if (!opts.items.visibleConf.min)
                    {
                        opts.items.visibleConf.min = opts.items.visible;
                    }
                    if (!opts.items.visibleConf.max)
                    {
                        opts.items.visibleConf.max = opts.items.visible;
                    }
                    opts = in_getResponsiveValues(opts, a_itm, avail_primary);
                }
                else
                {
                    opts.padding = cf_getPadding(opts.padding);

                    if (opts.align == 'top')
                    {
                        opts.align = 'left';
                    }
                    else if (opts.align == 'bottom')
                    {
                        opts.align = 'right';
                    }

                    switch (opts.align)
                    {
                        //  align: center, left or right
                        case 'center':
                        case 'left':
                        case 'right':
                            if (opts[opts.d['width']] != 'variable')
                            {
                                opts = in_getAlignPadding(opts, a_itm);
                                opts.usePadding = true;
                            }
                            break;

                        //  padding
                        default:
                            opts.align = false;
                            opts.usePadding = (
                                opts.padding[0] == 0 && 
                                opts.padding[1] == 0 && 
                                opts.padding[2] == 0 && 
                                opts.padding[3] == 0
                            ) ? false : true;
                            break;
                    }
                }

                if (!is_number(opts.scroll.duration))
                {
                    opts.scroll.duration = 500;
                }
                if (is_undefined(opts.scroll.items))
                {
                    opts.scroll.items = (opts.responsive || opts.items.visibleConf.variable || opts.items.filter != '*') 
                        ? 'visible'
                        : opts.items.visible;
                }

                opts.auto = $.extend(true, {}, opts.scroll, opts.auto);
                opts.prev = $.extend(true, {}, opts.scroll, opts.prev);
                opts.next = $.extend(true, {}, opts.scroll, opts.next);
                opts.pagination = $.extend(true, {}, opts.scroll, opts.pagination);
                //  swipe and mousewheel extend later on, per direction

                opts.auto = go_complementAutoObject($tt0, opts.auto);
                opts.prev = go_complementPrevNextObject($tt0, opts.prev);
                opts.next = go_complementPrevNextObject($tt0, opts.next);
                opts.pagination = go_complementPaginationObject($tt0, opts.pagination);
                opts.swipe = go_complementSwipeObject($tt0, opts.swipe);
                opts.mousewheel = go_complementMousewheelObject($tt0, opts.mousewheel);

                if (opts.synchronise)
                {
                    opts.synchronise = cf_getSynchArr(opts.synchronise);
                }


                //  DEPRECATED
                if (opts.auto.onPauseStart)
                {
                    opts.auto.onTimeoutStart = opts.auto.onPauseStart;
                    deprecated('auto.onPauseStart', 'auto.onTimeoutStart');
                }
                if (opts.auto.onPausePause)
                {
                    opts.auto.onTimeoutPause = opts.auto.onPausePause;
                    deprecated('auto.onPausePause', 'auto.onTimeoutPause');
                }
                if (opts.auto.onPauseEnd)
                {
                    opts.auto.onTimeoutEnd = opts.auto.onPauseEnd;
                    deprecated('auto.onPauseEnd', 'auto.onTimeoutEnd');
                }
                if (opts.auto.pauseDuration)
                {
                    opts.auto.timeoutDuration = opts.auto.pauseDuration;
                    deprecated('auto.pauseDuration', 'auto.timeoutDuration');
                }
                //  /DEPRECATED


            };  //  /init


            FN._cfs_build = function() {
                $cfs.data('_cfs_isCarousel', true);

                var a_itm = $cfs.children(),
                    orgCSS = in_mapCss($cfs, ['textAlign', 'float', 'position', 'top', 'right', 'bottom', 'left', 'zIndex', 'width', 'height', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft']),
                    newPosition = 'relative';

                switch (orgCSS.position)
                {
                    case 'absolute':
                    case 'fixed':
                        newPosition = orgCSS.position;
                        break;
                }

                if (conf.wrapper == 'parent')
                {
                    sz_storeOrigCss($wrp);
                }
                else
                {
                    $wrp.css(orgCSS);
                }
                $wrp.css({
                    'overflow'      : 'hidden',
                    'position'      : newPosition
                });

                sz_storeOrigCss($cfs);
                $cfs.data('_cfs_origCssZindex', orgCSS.zIndex);
                $cfs.css({
                    'textAlign'     : 'left',
                    'float'         : 'none',
                    'position'      : 'absolute',
                    'top'           : 0,
                    'right'         : 'auto',
                    'bottom'        : 'auto',
                    'left'          : 0,
                    'marginTop'     : 0,
                    'marginRight'   : 0,
                    'marginBottom'  : 0,
                    'marginLeft'    : 0
                });

                sz_storeMargin(a_itm, opts);
                sz_storeOrigCss(a_itm);
                if (opts.responsive)
                {
                    sz_setResponsiveSizes(opts, a_itm);
                }

            };  //  /build


            FN._cfs_bind_events = function() {
                FN._cfs_unbind_events();


                //  stop event
                $cfs.bind(cf_e('stop', conf), function(e, imm) {
                    e.stopPropagation();

                    //  button
                    if (!crsl.isStopped)
                    {
                        if (opts.auto.button)
                        {
                            opts.auto.button.addClass(cf_c('stopped', conf));
                        }
                    }

                    //  set stopped
                    crsl.isStopped = true;

                    if (opts.auto.play)
                    {
                        opts.auto.play = false;
                        $cfs.trigger(cf_e('pause', conf), imm);
                    }
                    return true;
                });


                //  finish event
                $cfs.bind(cf_e('finish', conf), function(e) {
                    e.stopPropagation();
                    if (crsl.isScrolling)
                    {
                        sc_stopScroll(scrl);
                    }
                    return true;
                });


                //  pause event
                $cfs.bind(cf_e('pause', conf), function(e, imm, res) {
                    e.stopPropagation();
                    tmrs = sc_clearTimers(tmrs);

                    //  immediately pause
                    if (imm && crsl.isScrolling)
                    {
                        scrl.isStopped = true;
                        var nst = getTime() - scrl.startTime;
                        scrl.duration -= nst;
                        if (scrl.pre)
                        {
                            scrl.pre.duration -= nst;
                        }
                        if (scrl.post)
                        {
                            scrl.post.duration -= nst;
                        }
                        sc_stopScroll(scrl, false);
                    }

                    //  update remaining pause-time
                    if (!crsl.isPaused && !crsl.isScrolling)
                    {
                        if (res)
                        {
                            tmrs.timePassed += getTime() - tmrs.startTime;
                        }
                    }

                    //  button
                    if (!crsl.isPaused)
                    {
                        if (opts.auto.button)
                        {
                            opts.auto.button.addClass(cf_c('paused', conf));
                        }
                    }

                    //  set paused
                    crsl.isPaused = true;

                    //  pause pause callback
                    if (opts.auto.onTimeoutPause)
                    {
                        var dur1 = opts.auto.timeoutDuration - tmrs.timePassed,
                            perc = 100 - Math.ceil( dur1 * 100 / opts.auto.timeoutDuration );

                        opts.auto.onTimeoutPause.call($tt0, perc, dur1);
                    }
                    return true;
                });


                //  play event
                $cfs.bind(cf_e('play', conf), function(e, dir, del, res) {
                    e.stopPropagation();
                    tmrs = sc_clearTimers(tmrs);

                    //  sort params
                    var v = [dir, del, res],
                        t = ['string', 'number', 'boolean'],
                        a = cf_sortParams(v, t);

                    dir = a[0];
                    del = a[1];
                    res = a[2];

                    if (dir != 'prev' && dir != 'next')
                    {
                        dir = crsl.direction;
                    }
                    if (!is_number(del))
                    {
                        del = 0;
                    }
                    if (!is_boolean(res))
                    {
                        res = false;
                    }

                    //  stopped?
                    if (res)
                    {
                        crsl.isStopped = false;
                        opts.auto.play = true;
                    }
                    if (!opts.auto.play)
                    {
                        e.stopImmediatePropagation();
                        return debug(conf, 'Carousel stopped: Not scrolling.');
                    }

                    //  button
                    if (crsl.isPaused)
                    {
                        if (opts.auto.button)
                        {
                            opts.auto.button.removeClass(cf_c('stopped', conf));
                            opts.auto.button.removeClass(cf_c('paused', conf));
                        }
                    }

                    //  set playing
                    crsl.isPaused = false;
                    tmrs.startTime = getTime();

                    //  timeout the scrolling
                    var dur1 = opts.auto.timeoutDuration + del;
                        dur2 = dur1 - tmrs.timePassed;
                        perc = 100 - Math.ceil(dur2 * 100 / dur1);

                    if (opts.auto.progress)
                    {
                        tmrs.progress = setInterval(function() {
                            var pasd = getTime() - tmrs.startTime + tmrs.timePassed,
                                perc = Math.ceil(pasd * 100 / dur1);
                            opts.auto.progress.updater.call(opts.auto.progress.bar[0], perc);
                        }, opts.auto.progress.interval);
                    }

                    tmrs.auto = setTimeout(function() {
                        if (opts.auto.progress)
                        {
                            opts.auto.progress.updater.call(opts.auto.progress.bar[0], 100);
                        }
                        if (opts.auto.onTimeoutEnd)
                        {
                            opts.auto.onTimeoutEnd.call($tt0, perc, dur2);
                        }
                        if (crsl.isScrolling)
                        {
                            $cfs.trigger(cf_e('play', conf), dir);
                        }
                        else
                        {
                            $cfs.trigger(cf_e(dir, conf), opts.auto);
                        }
                    }, dur2);

                    //  pause start callback
                    if (opts.auto.onTimeoutStart)
                    {
                        opts.auto.onTimeoutStart.call($tt0, perc, dur2);
                    }

                    return true;
                });


                //  resume event
                $cfs.bind(cf_e('resume', conf), function(e) {
                    e.stopPropagation();
                    if (scrl.isStopped)
                    {
                        scrl.isStopped = false;
                        crsl.isPaused = false;
                        crsl.isScrolling = true;
                        scrl.startTime = getTime();
                        sc_startScroll(scrl, conf);
                    }
                    else
                    {
                        $cfs.trigger(cf_e('play', conf));
                    }
                    return true;
                });


                //  prev + next events
                $cfs.bind(cf_e('prev', conf)+' '+cf_e('next', conf), function(e, obj, num, clb, que) {
                    e.stopPropagation();

                    //  stopped or hidden carousel, don't scroll, don't queue
                    if (crsl.isStopped || $cfs.is(':hidden'))
                    {
                        e.stopImmediatePropagation();
                        return debug(conf, 'Carousel stopped or hidden: Not scrolling.');
                    }

                    //  not enough items
                    var minimum = (is_number(opts.items.minimum)) ? opts.items.minimum : opts.items.visible + 1;
                    if (minimum > itms.total)
                    {
                        e.stopImmediatePropagation();
                        return debug(conf, 'Not enough items ('+itms.total+' total, '+minimum+' needed): Not scrolling.');
                    }

                    //  get config
                    var v = [obj, num, clb, que],
                        t = ['object', 'number/string', 'function', 'boolean'],
                        a = cf_sortParams(v, t);

                    obj = a[0];
                    num = a[1];
                    clb = a[2];
                    que = a[3];

                    var eType = e.type.slice(conf.events.prefix.length);

                    if (!is_object(obj))
                    {
                        obj = {};
                    }
                    if (is_function(clb))
                    {
                        obj.onAfter = clb;
                    }
                    if (is_boolean(que))
                    {
                        obj.queue = que;
                    }
                    obj = $.extend(true, {}, opts[eType], obj);

                    //  test conditions callback
                    if (obj.conditions && !obj.conditions.call($tt0, eType))
                    {
                        e.stopImmediatePropagation();
                        return debug(conf, 'Callback "conditions" returned false.');
                    }

                    if (!is_number(num))
                    {
                        if (opts.items.filter != '*')
                        {
                            num = 'visible';
                        }
                        else
                        {
                            var arr = [num, obj.items, opts[eType].items];
                            for (var a = 0, l = arr.length; a < l; a++)
                            {
                                if (is_number(arr[a]) || arr[a] == 'page' || arr[a] == 'visible') {
                                    num = arr[a];
                                    break;
                                }
                            }
                        }
                        switch(num) {
                            case 'page':
                                e.stopImmediatePropagation();
                                return $cfs.triggerHandler(cf_e(eType+'Page', conf), [obj, clb]);
                                break;

                            case 'visible':
                                if (!opts.items.visibleConf.variable && opts.items.filter == '*')
                                {
                                    num = opts.items.visible;
                                }
                                break;
                        }
                    }

                    //  resume animation, add current to queue
                    if (scrl.isStopped)
                    {
                        $cfs.trigger(cf_e('resume', conf));
                        $cfs.trigger(cf_e('queue', conf), [eType, [obj, num, clb]]);
                        e.stopImmediatePropagation();
                        return debug(conf, 'Carousel resumed scrolling.');
                    }

                    //  queue if scrolling
                    if (obj.duration > 0)
                    {
                        if (crsl.isScrolling)
                        {
                            if (obj.queue)
                            {
                                if (obj.queue == 'last')
                                {
                                    queu = [];
                                }
                                if (obj.queue != 'first' || queu.length == 0)
                                {
                                    $cfs.trigger(cf_e('queue', conf), [eType, [obj, num, clb]]);
                                }
                            }
                            e.stopImmediatePropagation();
                            return debug(conf, 'Carousel currently scrolling.');
                        }
                    }

                    tmrs.timePassed = 0;
                    $cfs.trigger(cf_e('slide_'+eType, conf), [obj, num]);

                    //  synchronise
                    if (opts.synchronise)
                    {
                        var s = opts.synchronise,
                            c = [obj, num];

                        for (var j = 0, l = s.length; j < l; j++) {
                            var d = eType;
                            if (!s[j][2])
                            {
                                d = (d == 'prev') ? 'next' : 'prev';
                            }
                            if (!s[j][1])
                            {
                                c[0] = s[j][0].triggerHandler('_cfs_triggerEvent', ['configuration', d]);
                            }
                            c[1] = num + s[j][3];
                            s[j][0].trigger('_cfs_triggerEvent', ['slide_'+d, c]);
                        }
                    }
                    return true;
                });


                //  prev event
                $cfs.bind(cf_e('slide_prev', conf), function(e, sO, nI) {
                    e.stopPropagation();
                    var a_itm = $cfs.children();

                    //  non-circular at start, scroll to end
                    if (!opts.circular)
                    {
                        if (itms.first == 0)
                        {
                            if (opts.infinite)
                            {
                                $cfs.trigger(cf_e('next', conf), itms.total-1);
                            }
                            return e.stopImmediatePropagation();
                        }
                    }

                    sz_resetMargin(a_itm, opts);

                    //  find number of items to scroll
                    if (!is_number(nI))
                    {
                        if (opts.items.visibleConf.variable)
                        {
                            nI = gn_getVisibleItemsPrev(a_itm, opts, itms.total-1);
                        }
                        else if (opts.items.filter != '*')
                        {
                            var xI = (is_number(sO.items)) ? sO.items : gn_getVisibleOrg($cfs, opts);
                            nI = gn_getScrollItemsPrevFilter(a_itm, opts, itms.total-1, xI);
                        }
                        else
                        {
                            nI = opts.items.visible;
                        }
                        nI = cf_getAdjust(nI, opts, sO.items, $tt0);
                    }

                    //  prevent non-circular from scrolling to far
                    if (!opts.circular)
                    {
                        if (itms.total - nI < itms.first)
                        {
                            nI = itms.total - itms.first;
                        }
                    }

                    //  set new number of visible items
                    opts.items.visibleConf.old = opts.items.visible;
                    if (opts.items.visibleConf.variable)
                    {
                        var vI = cf_getItemsAdjust(gn_getVisibleItemsNext(a_itm, opts, itms.total-nI), opts, opts.items.visibleConf.adjust, $tt0);
                        if (opts.items.visible+nI <= vI && nI < itms.total)
                        {
                            nI++;
                            vI = cf_getItemsAdjust(gn_getVisibleItemsNext(a_itm, opts, itms.total-nI), opts, opts.items.visibleConf.adjust, $tt0);
                        }
                        opts.items.visible = vI;
                    }
                    else if (opts.items.filter != '*')
                    {
                        var vI = gn_getVisibleItemsNextFilter(a_itm, opts, itms.total-nI);
                        opts.items.visible = cf_getItemsAdjust(vI, opts, opts.items.visibleConf.adjust, $tt0);
                    }

                    sz_resetMargin(a_itm, opts, true);

                    //  scroll 0, don't scroll
                    if (nI == 0)
                    {
                        e.stopImmediatePropagation();
                        return debug(conf, '0 items to scroll: Not scrolling.');
                    }
                    debug(conf, 'Scrolling '+nI+' items backward.');


                    //  save new config
                    itms.first += nI;
                    while (itms.first >= itms.total)
                    {
                        itms.first -= itms.total;
                    }

                    //  non-circular callback
                    if (!opts.circular)
                    {
                        if (itms.first == 0 && sO.onEnd)
                        {
                            sO.onEnd.call($tt0, 'prev');
                        }
                        if (!opts.infinite)
                        {
                            nv_enableNavi(opts, itms.first, conf);
                        }
                    }

                    //  rearrange items
                    $cfs.children().slice(itms.total-nI, itms.total).prependTo($cfs);
                    if (itms.total < opts.items.visible + nI)
                    {
                        $cfs.children().slice(0, (opts.items.visible+nI)-itms.total).clone(true).appendTo($cfs);
                    }

                    //  the needed items
                    var a_itm = $cfs.children(),
                        i_old = gi_getOldItemsPrev(a_itm, opts, nI),
                        i_new = gi_getNewItemsPrev(a_itm, opts),
                        i_cur_l = a_itm.eq(nI-1),
                        i_old_l = i_old.last(),
                        i_new_l = i_new.last();

                    sz_resetMargin(a_itm, opts);

                    var pL = 0,
                        pR = 0;

                    if (opts.align)
                    {
                        var p = cf_getAlignPadding(i_new, opts);
                        pL = p[0];
                        pR = p[1];
                    }
                    var oL = (pL < 0) ? opts.padding[opts.d[3]] : 0;

                    //  hide items for fx directscroll
                    var hiddenitems = false,
                        i_skp = $();
                    if (opts.items.visible < nI)
                    {
                        i_skp = a_itm.slice(opts.items.visibleConf.old, nI);
                        if (sO.fx == 'directscroll')
                        {
                            var orgW = opts.items[opts.d['width']];
                            hiddenitems = i_skp;
                            i_cur_l = i_new_l;
                            sc_hideHiddenItems(hiddenitems);
                            opts.items[opts.d['width']] = 'variable';
                        }
                    }

                    //  save new sizes
                    var $cf2 = false,
                        i_siz = ms_getTotalSize(a_itm.slice(0, nI), opts, 'width'),
                        w_siz = cf_mapWrapperSizes(ms_getSizes(i_new, opts, true), opts, !opts.usePadding),
                        i_siz_vis = 0,
                        a_cfs = {},
                        a_wsz = {},
                        a_cur = {},
                        a_old = {},
                        a_new = {},
                        a_lef = {},
                        a_lef_vis = {},
                        a_dur = sc_getDuration(sO, opts, nI, i_siz);

                    switch(sO.fx)
                    {
                        case 'cover':
                        case 'cover-fade':
                            i_siz_vis = ms_getTotalSize(a_itm.slice(0, opts.items.visible), opts, 'width');
                            break;
                    }

                    if (hiddenitems)
                    {
                        opts.items[opts.d['width']] = orgW;
                    }

                    sz_resetMargin(a_itm, opts, true);
                    if (pR >= 0)
                    {
                        sz_resetMargin(i_old_l, opts, opts.padding[opts.d[1]]);
                    }
                    if (pL >= 0)
                    {
                        sz_resetMargin(i_cur_l, opts, opts.padding[opts.d[3]]);
                    }

                    if (opts.align)
                    {
                        opts.padding[opts.d[1]] = pR;
                        opts.padding[opts.d[3]] = pL;
                    }

                    a_lef[opts.d['left']] = -(i_siz - oL);
                    a_lef_vis[opts.d['left']] = -(i_siz_vis - oL);
                    a_wsz[opts.d['left']] = w_siz[opts.d['width']];

                    //  scrolling functions
                    var _s_wrapper = function() {},
                        _a_wrapper = function() {},
                        _s_paddingold = function() {},
                        _a_paddingold = function() {},
                        _s_paddingnew = function() {},
                        _a_paddingnew = function() {},
                        _s_paddingcur = function() {},
                        _a_paddingcur = function() {},
                        _onafter = function() {},
                        _moveitems = function() {},
                        _position = function() {};

                    //  clone carousel
                    switch(sO.fx)
                    {
                        case 'crossfade':
                        case 'cover':
                        case 'cover-fade':
                        case 'uncover':
                        case 'uncover-fade':
                            $cf2 = $cfs.clone(true).appendTo($wrp);
                            break;
                    }
                    switch(sO.fx)
                    {
                        case 'crossfade':
                        case 'uncover':
                        case 'uncover-fade':
                            $cf2.children().slice(0, nI).remove();
                            $cf2.children().slice(opts.items.visibleConf.old).remove();
                            break;

                        case 'cover':
                        case 'cover-fade':
                            $cf2.children().slice(opts.items.visible).remove();
                            $cf2.css(a_lef_vis);
                            break;
                    }

                    $cfs.css(a_lef);

                    //  reset all scrolls
                    scrl = sc_setScroll(a_dur, sO.easing, conf);

                    //  animate / set carousel
                    a_cfs[opts.d['left']] = (opts.usePadding) ? opts.padding[opts.d[3]] : 0;

                    //  animate / set wrapper
                    if (opts[opts.d['width']] == 'variable' || opts[opts.d['height']] == 'variable')
                    {
                        _s_wrapper = function() {
                            $wrp.css(w_siz);
                        };
                        _a_wrapper = function() {
                            scrl.anims.push([$wrp, w_siz]);
                        };
                    }

                    //  animate / set items
                    if (opts.usePadding)
                    {
                        if (i_new_l.not(i_cur_l).length)
                        {
                            a_cur[opts.d['marginRight']] = i_cur_l.data('_cfs_origCssMargin');

                            if (pL < 0)
                            {
                                i_cur_l.css(a_cur);
                            }
                            else
                            {
                                _s_paddingcur = function() {
                                    i_cur_l.css(a_cur);
                                };
                                _a_paddingcur = function() {
                                    scrl.anims.push([i_cur_l, a_cur]);
                                };
                            }
                        }
                        switch(sO.fx)
                        {
                            case 'cover':
                            case 'cover-fade':
                                $cf2.children().eq(nI-1).css(a_cur);
                                break;
                        }

                        if (i_new_l.not(i_old_l).length)
                        {
                            a_old[opts.d['marginRight']] = i_old_l.data('_cfs_origCssMargin');
                            _s_paddingold = function() {
                                i_old_l.css(a_old);
                            };
                            _a_paddingold = function() {
                                scrl.anims.push([i_old_l, a_old]);
                            };
                        }

                        if (pR >= 0)
                        {
                            a_new[opts.d['marginRight']] = i_new_l.data('_cfs_origCssMargin') + opts.padding[opts.d[1]];
                            _s_paddingnew = function() {
                                i_new_l.css(a_new);
                            };
                            _a_paddingnew = function() {
                                scrl.anims.push([i_new_l, a_new]);
                            };
                        }
                    }

                    //  set position
                    _position = function() {
                        $cfs.css(a_cfs);
                    };


                    var overFill = opts.items.visible+nI-itms.total;

                    //  rearrange items
                    _moveitems = function() {
                        if (overFill > 0)
                        {
                            $cfs.children().slice(itms.total).remove();
                            i_old = $( $cfs.children().slice(itms.total-(opts.items.visible-overFill)).get().concat( $cfs.children().slice(0, overFill).get() ) );
                        }
                        sc_showHiddenItems(hiddenitems);

                        if (opts.usePadding)
                        {
                            var l_itm = $cfs.children().eq(opts.items.visible+nI-1);
                            l_itm.css(opts.d['marginRight'], l_itm.data('_cfs_origCssMargin'));
                        }
                    };


                    var cb_arguments = sc_mapCallbackArguments(i_old, i_skp, i_new, nI, 'prev', a_dur, w_siz);

                    //  fire onAfter callbacks
                    _onafter = function() {
                        sc_afterScroll($cfs, $cf2, sO);
                        crsl.isScrolling = false;
                        clbk.onAfter = sc_fireCallbacks($tt0, sO, 'onAfter', cb_arguments, clbk);
                        queu = sc_fireQueue($cfs, queu, conf);

                        if (!crsl.isPaused)
                        {
                            $cfs.trigger(cf_e('play', conf));
                        }
                    };

                    //  fire onBefore callback
                    crsl.isScrolling = true;
                    tmrs = sc_clearTimers(tmrs);
                    clbk.onBefore = sc_fireCallbacks($tt0, sO, 'onBefore', cb_arguments, clbk);

                    switch(sO.fx)
                    {
                        case 'none':
                            $cfs.css(a_cfs);
                            _s_wrapper();
                            _s_paddingold();
                            _s_paddingnew();
                            _s_paddingcur();
                            _position();
                            _moveitems();
                            _onafter();
                            break;

                        case 'fade':
                            scrl.anims.push([$cfs, { 'opacity': 0 }, function() {
                                _s_wrapper();
                                _s_paddingold();
                                _s_paddingnew();
                                _s_paddingcur();
                                _position();
                                _moveitems();
                                scrl = sc_setScroll(a_dur, sO.easing, conf);
                                scrl.anims.push([$cfs, { 'opacity': 1 }, _onafter]);
                                sc_startScroll(scrl, conf);
                            }]);
                            break;

                        case 'crossfade':
                            $cfs.css({ 'opacity': 0 });
                            scrl.anims.push([$cf2, { 'opacity': 0 }]);
                            scrl.anims.push([$cfs, { 'opacity': 1 }, _onafter]);
                            _a_wrapper();
                            _s_paddingold();
                            _s_paddingnew();
                            _s_paddingcur();
                            _position();
                            _moveitems();
                            break;

                        case 'cover':
                            scrl.anims.push([$cf2, a_cfs, function() {
                                _s_paddingold();
                                _s_paddingnew();
                                _s_paddingcur();
                                _position();
                                _moveitems();
                                _onafter();
                            }]);
                            _a_wrapper();
                            break;

                        case 'cover-fade':
                            scrl.anims.push([$cfs, { 'opacity': 0 }]);
                            scrl.anims.push([$cf2, a_cfs, function() {
                                $cfs.css({ 'opacity': 1 });
                                _s_paddingold();
                                _s_paddingnew();
                                _s_paddingcur();
                                _position();
                                _moveitems();
                                _onafter();
                            }]);
                            _a_wrapper();
                            break;

                        case 'uncover':
                            scrl.anims.push([$cf2, a_wsz, _onafter]);
                            _a_wrapper();
                            _s_paddingold();
                            _s_paddingnew();
                            _s_paddingcur();
                            _position();
                            _moveitems();
                            break;

                        case 'uncover-fade':
                            $cfs.css({ 'opacity': 0 });
                            scrl.anims.push([$cfs, { 'opacity': 1 }]);
                            scrl.anims.push([$cf2, a_wsz, _onafter]);
                            _a_wrapper();
                            _s_paddingold();
                            _s_paddingnew();
                            _s_paddingcur();
                            _position();
                            _moveitems();
                            break;

                        default:
                            scrl.anims.push([$cfs, a_cfs, function() {
                                _moveitems();
                                _onafter();
                            }]);
                            _a_wrapper();
                            _a_paddingold();
                            _a_paddingnew();
                            _a_paddingcur();
                            break;
                    }

                    sc_startScroll(scrl, conf);
                    cf_setCookie(opts.cookie, $cfs, conf);

                    $cfs.trigger(cf_e('updatePageStatus', conf), [false, w_siz]);

                    return true;
                });


                //  next event
                $cfs.bind(cf_e('slide_next', conf), function(e, sO, nI) {
                    e.stopPropagation();
                    var a_itm = $cfs.children();

                    //  non-circular at end, scroll to start
                    if (!opts.circular)
                    {
                        if (itms.first == opts.items.visible)
                        {
                            if (opts.infinite)
                            {
                                $cfs.trigger(cf_e('prev', conf), itms.total-1);
                            }
                            return e.stopImmediatePropagation();
                        }
                    }

                    sz_resetMargin(a_itm, opts);

                    //  find number of items to scroll
                    if (!is_number(nI))
                    {
                        if (opts.items.filter != '*')
                        {
                            var xI = (is_number(sO.items)) ? sO.items : gn_getVisibleOrg($cfs, opts);
                            nI = gn_getScrollItemsNextFilter(a_itm, opts, 0, xI);
                        }
                        else
                        {
                            nI = opts.items.visible;
                        }
                        nI = cf_getAdjust(nI, opts, sO.items, $tt0);
                    }

                    var lastItemNr = (itms.first == 0) ? itms.total : itms.first;

                    //  prevent non-circular from scrolling to far
                    if (!opts.circular)
                    {
                        if (opts.items.visibleConf.variable)
                        {
                            var vI = gn_getVisibleItemsNext(a_itm, opts, nI),
                                xI = gn_getVisibleItemsPrev(a_itm, opts, lastItemNr-1);
                        }
                        else
                        {
                            var vI = opts.items.visible,
                                xI = opts.items.visible;
                        }

                        if (nI + vI > lastItemNr)
                        {
                            nI = lastItemNr - xI;
                        }
                    }

                    //  set new number of visible items
                    opts.items.visibleConf.old = opts.items.visible;
                    if (opts.items.visibleConf.variable)
                    {
                        var vI = cf_getItemsAdjust(gn_getVisibleItemsNextTestCircular(a_itm, opts, nI, lastItemNr), opts, opts.items.visibleConf.adjust, $tt0);
                        while (opts.items.visible-nI >= vI && nI < itms.total)
                        {
                            nI++;
                            vI = cf_getItemsAdjust(gn_getVisibleItemsNextTestCircular(a_itm, opts, nI, lastItemNr), opts, opts.items.visibleConf.adjust, $tt0);
                        }
                        opts.items.visible = vI;
                    }
                    else if (opts.items.filter != '*')
                    {
                        var vI = gn_getVisibleItemsNextFilter(a_itm, opts, nI);
                        opts.items.visible = cf_getItemsAdjust(vI, opts, opts.items.visibleConf.adjust, $tt0);
                    }

                    sz_resetMargin(a_itm, opts, true);

                    //  scroll 0, don't scroll
                    if (nI == 0)
                    {
                        e.stopImmediatePropagation();
                        return debug(conf, '0 items to scroll: Not scrolling.');
                    }
                    debug(conf, 'Scrolling '+nI+' items forward.');


                    //  save new config
                    itms.first -= nI;
                    while (itms.first < 0)
                    {
                        itms.first += itms.total;
                    }

                    //  non-circular callback
                    if (!opts.circular)
                    {
                        if (itms.first == opts.items.visible && sO.onEnd)
                        {
                            sO.onEnd.call($tt0, 'next');
                        }
                        if (!opts.infinite)
                        {
                            nv_enableNavi(opts, itms.first, conf);
                        }
                    }

                    //  rearrange items
                    if (itms.total < opts.items.visible+nI)
                    {
                        $cfs.children().slice(0, (opts.items.visible+nI)-itms.total).clone(true).appendTo($cfs);
                    }

                    //  the needed items
                    var a_itm = $cfs.children(),
                        i_old = gi_getOldItemsNext(a_itm, opts),
                        i_new = gi_getNewItemsNext(a_itm, opts, nI),
                        i_cur_l = a_itm.eq(nI-1),
                        i_old_l = i_old.last(),
                        i_new_l = i_new.last();

                    sz_resetMargin(a_itm, opts);

                    var pL = 0,
                        pR = 0;

                    if (opts.align)
                    {
                        var p = cf_getAlignPadding(i_new, opts);
                        pL = p[0];
                        pR = p[1];
                    }

                    //  hide items for fx directscroll
                    var hiddenitems = false,
                        i_skp = $();
                    if (opts.items.visibleConf.old < nI)
                    {
                        i_skp = a_itm.slice(opts.items.visibleConf.old, nI);
                        if (sO.fx == 'directscroll')
                        {
                            var orgW = opts.items[opts.d['width']];
                            hiddenitems = i_skp;
                            i_cur_l = i_old_l;
                            sc_hideHiddenItems(hiddenitems);
                            opts.items[opts.d['width']] = 'variable';
                        }
                    }

                    //  save new sizes
                    var $cf2 = false,
                        i_siz = ms_getTotalSize(a_itm.slice(0, nI), opts, 'width'),
                        w_siz = cf_mapWrapperSizes(ms_getSizes(i_new, opts, true), opts, !opts.usePadding),
                        i_siz_vis = 0,
                        a_cfs = {},
                        a_cfs_vis = {},
                        a_cur = {},
                        a_old = {},
                        a_lef = {},
                        a_dur = sc_getDuration(sO, opts, nI, i_siz);

                    switch(sO.fx)
                    {
                        case 'uncover':
                        case 'uncover-fade':
                            i_siz_vis = ms_getTotalSize(a_itm.slice(0, opts.items.visibleConf.old), opts, 'width');
                            break;
                    }

                    if (hiddenitems)
                    {
                        opts.items[opts.d['width']] = orgW;
                    }

                    if (opts.align)
                    {
                        if (opts.padding[opts.d[1]] < 0)
                        {
                            opts.padding[opts.d[1]] = 0;
                        }
                    }
                    sz_resetMargin(a_itm, opts, true);
                    sz_resetMargin(i_old_l, opts, opts.padding[opts.d[1]]);

                    if (opts.align)
                    {
                        opts.padding[opts.d[1]] = pR;
                        opts.padding[opts.d[3]] = pL;
                    }

                    a_lef[opts.d['left']] = (opts.usePadding) ? opts.padding[opts.d[3]] : 0;

                    //  scrolling functions
                    var _s_wrapper = function() {},
                        _a_wrapper = function() {},
                        _s_paddingold = function() {},
                        _a_paddingold = function() {},
                        _s_paddingcur = function() {},
                        _a_paddingcur = function() {},
                        _onafter = function() {},
                        _moveitems = function() {},
                        _position = function() {};

                    //  clone carousel
                    switch(sO.fx)
                    {
                        case 'crossfade':
                        case 'cover':
                        case 'cover-fade':
                        case 'uncover':
                        case 'uncover-fade':
                            $cf2 = $cfs.clone(true).appendTo($wrp);
                            $cf2.children().slice(opts.items.visibleConf.old).remove();
                            break;
                    }
                    switch(sO.fx)
                    {
                        case 'crossfade':
                        case 'cover':
                        case 'cover-fade':
                            $cfs.css('zIndex', 1);
                            $cf2.css('zIndex', 0);
                            break;
                    }

                    //  reset all scrolls
                    scrl = sc_setScroll(a_dur, sO.easing, conf);

                    //  animate / set carousel
                    a_cfs[opts.d['left']] = -i_siz;
                    a_cfs_vis[opts.d['left']] = -i_siz_vis;

                    if (pL < 0)
                    {
                        a_cfs[opts.d['left']] += pL;
                    }

                    //  animate / set wrapper
                    if (opts[opts.d['width']] == 'variable' || opts[opts.d['height']] == 'variable')
                    {
                        _s_wrapper = function() {
                            $wrp.css(w_siz);
                        };
                        _a_wrapper = function() {
                            scrl.anims.push([$wrp, w_siz]);
                        };
                    }

                    //  animate / set items
                    if (opts.usePadding)
                    {
                        var i_new_l_m = i_new_l.data('_cfs_origCssMargin');

                        if (pR >= 0)
                        {
                            i_new_l_m += opts.padding[opts.d[1]];
                        }
                        i_new_l.css(opts.d['marginRight'], i_new_l_m);

                        if (i_cur_l.not(i_old_l).length)
                        {
                            a_old[opts.d['marginRight']] = i_old_l.data('_cfs_origCssMargin');
                        }
                        _s_paddingold = function() {
                            i_old_l.css(a_old);
                        };
                        _a_paddingold = function() {
                            scrl.anims.push([i_old_l, a_old]);
                        };

                        var i_cur_l_m = i_cur_l.data('_cfs_origCssMargin');
                        if (pL > 0)
                        {
                            i_cur_l_m += opts.padding[opts.d[3]];
                        }

                        a_cur[opts.d['marginRight']] = i_cur_l_m;

                        _s_paddingcur = function() {
                            i_cur_l.css(a_cur);
                        };
                        _a_paddingcur = function() {
                            scrl.anims.push([i_cur_l, a_cur]);
                        };
                    }

                    //  set position
                    _position = function() {
                        $cfs.css(a_lef);
                    };


                    var overFill = opts.items.visible+nI-itms.total;

                    //  rearrange items
                    _moveitems = function() {
                        if (overFill > 0)
                        {
                            $cfs.children().slice(itms.total).remove();
                        }
                        var l_itm = $cfs.children().slice(0, nI).appendTo($cfs).last();
                        if (overFill > 0)
                        {
                            i_new = gi_getCurrentItems(a_itm, opts);
                        }
                        sc_showHiddenItems(hiddenitems);

                        if (opts.usePadding)
                        {
                            if (itms.total < opts.items.visible+nI) {
                                var i_cur_l = $cfs.children().eq(opts.items.visible-1);
                                i_cur_l.css(opts.d['marginRight'], i_cur_l.data('_cfs_origCssMargin') + opts.padding[opts.d[1]]);
                            }
                            l_itm.css(opts.d['marginRight'], l_itm.data('_cfs_origCssMargin'));
                        }
                    };


                    var cb_arguments = sc_mapCallbackArguments(i_old, i_skp, i_new, nI, 'next', a_dur, w_siz);

                    //  fire onAfter callbacks
                    _onafter = function() {
                        $cfs.css('zIndex', $cfs.data('_cfs_origCssZindex'));
                        sc_afterScroll($cfs, $cf2, sO);
                        crsl.isScrolling = false;
                        clbk.onAfter = sc_fireCallbacks($tt0, sO, 'onAfter', cb_arguments, clbk);
                        queu = sc_fireQueue($cfs, queu, conf);
                        
                        if (!crsl.isPaused)
                        {
                            $cfs.trigger(cf_e('play', conf));
                        }
                    };

                    //  fire onBefore callbacks
                    crsl.isScrolling = true;
                    tmrs = sc_clearTimers(tmrs);
                    clbk.onBefore = sc_fireCallbacks($tt0, sO, 'onBefore', cb_arguments, clbk);

                    switch(sO.fx)
                    {
                        case 'none':
                            $cfs.css(a_cfs);
                            _s_wrapper();
                            _s_paddingold();
                            _s_paddingcur();
                            _position();
                            _moveitems();
                            _onafter();
                            break;

                        case 'fade':
                            scrl.anims.push([$cfs, { 'opacity': 0 }, function() {
                                _s_wrapper();
                                _s_paddingold();
                                _s_paddingcur();
                                _position();
                                _moveitems();
                                scrl = sc_setScroll(a_dur, sO.easing, conf);
                                scrl.anims.push([$cfs, { 'opacity': 1 }, _onafter]);
                                sc_startScroll(scrl, conf);
                            }]);
                            break;

                        case 'crossfade':
                            $cfs.css({ 'opacity': 0 });
                            scrl.anims.push([$cf2, { 'opacity': 0 }]);
                            scrl.anims.push([$cfs, { 'opacity': 1 }, _onafter]);
                            _a_wrapper();
                            _s_paddingold();
                            _s_paddingcur();
                            _position();
                            _moveitems();
                            break;

                        case 'cover':
                            $cfs.css(opts.d['left'], $wrp[opts.d['width']]());
                            scrl.anims.push([$cfs, a_lef, _onafter]);
                            _a_wrapper();
                            _s_paddingold();
                            _s_paddingcur();
                            _moveitems();
                            break;

                        case 'cover-fade':
                            $cfs.css(opts.d['left'], $wrp[opts.d['width']]());
                            scrl.anims.push([$cf2, { 'opacity': 0 }]);
                            scrl.anims.push([$cfs, a_lef, _onafter]);
                            _a_wrapper();
                            _s_paddingold();
                            _s_paddingcur();
                            _moveitems();
                            break;

                        case 'uncover':
                            scrl.anims.push([$cf2, a_cfs_vis, _onafter]);
                            _a_wrapper();
                            _s_paddingold();
                            _s_paddingcur();
                            _position();
                            _moveitems();
                            break;

                        case 'uncover-fade':
                            $cfs.css({ 'opacity': 0 });
                            scrl.anims.push([$cfs, { 'opacity': 1 }]);
                            scrl.anims.push([$cf2, a_cfs_vis, _onafter]);
                            _a_wrapper();
                            _s_paddingold();
                            _s_paddingcur();
                            _position();
                            _moveitems();
                            break;

                        default:
                            scrl.anims.push([$cfs, a_cfs, function() {
                                _position();
                                _moveitems();
                                _onafter();
                            }]);
                            _a_wrapper();
                            _a_paddingold();
                            _a_paddingcur();
                            break;
                    }

                    sc_startScroll(scrl, conf);
                    cf_setCookie(opts.cookie, $cfs, conf);

                    $cfs.trigger(cf_e('updatePageStatus', conf), [false, w_siz]);

                    return true;
                });


                //  slideTo event
                $cfs.bind(cf_e('slideTo', conf), function(e, num, dev, org, obj, dir, clb) {
                    e.stopPropagation();

                    var v = [num, dev, org, obj, dir, clb],
                        t = ['string/number/object', 'number', 'boolean', 'object', 'string', 'function'],
                        a = cf_sortParams(v, t);

                    obj = a[3];
                    dir = a[4];
                    clb = a[5];

                    num = gn_getItemIndex(a[0], a[1], a[2], itms, $cfs);

                    if (num == 0)
                    {
                        return false;
                    }
                    if (!is_object(obj))
                    {
                        obj = false;
                    }

                    if (dir != 'prev' && dir != 'next')
                    {
                        if (opts.circular)
                        {
                            dir = (num <= itms.total / 2) ? 'next' : 'prev';
                        }
                        else
                        {
                            dir = (itms.first == 0 || itms.first > num) ? 'next' : 'prev';
                        }
                    }

                    if (dir == 'prev')
                    {
                        num = itms.total-num;
                    }
                    $cfs.trigger(cf_e(dir, conf), [obj, num, clb]);

                    return true;
                });


                //  prevPage event
                $cfs.bind(cf_e('prevPage', conf), function(e, obj, clb) {
                    e.stopPropagation();
                    var cur = $cfs.triggerHandler(cf_e('currentPage', conf));
                    return $cfs.triggerHandler(cf_e('slideToPage', conf), [cur-1, obj, 'prev', clb]);
                });


                //  nextPage event
                $cfs.bind(cf_e('nextPage', conf), function(e, obj, clb) {
                    e.stopPropagation();
                    var cur = $cfs.triggerHandler(cf_e('currentPage', conf));
                    return $cfs.triggerHandler(cf_e('slideToPage', conf), [cur+1, obj, 'next', clb]);
                });


                //  slideToPage event
                $cfs.bind(cf_e('slideToPage', conf), function(e, pag, obj, dir, clb) {
                    e.stopPropagation();
                    if (!is_number(pag))
                    {
                        pag = $cfs.triggerHandler(cf_e('currentPage', conf));
                    }
                    var ipp = opts.pagination.items || opts.items.visible,
                        max = Math.ceil(itms.total / ipp)-1;

                    if (pag < 0)
                    {
                        pag = max;
                    }
                    if (pag > max)
                    {
                        pag = 0;
                    }
                    return $cfs.triggerHandler(cf_e('slideTo', conf), [pag*ipp, 0, true, obj, dir, clb]);
                });

                //  jumpToStart event
                $cfs.bind(cf_e('jumpToStart', conf), function(e, s) {
                    e.stopPropagation();
                    if (s)
                    {
                        s = gn_getItemIndex(s, 0, true, itms, $cfs);
                    }
                    else
                    {
                        s = 0;
                    }

                    s += itms.first;
                    if (s != 0)
                    {
                        if (itms.total > 0)
                        {
                            while (s > itms.total)
                            {
                                s -= itms.total;
                            }
                        }
                        $cfs.prepend($cfs.children().slice(s, itms.total));
                    }
                    return true;
                });


                //  synchronise event
                $cfs.bind(cf_e('synchronise', conf), function(e, s) {
                    e.stopPropagation();
                    if (s)
                    {
                        s = cf_getSynchArr(s);
                    }
                    else if (opts.synchronise)
                    {
                        s = opts.synchronise;
                    }
                    else
                    {
                        return debug(conf, 'No carousel to synchronise.');
                    }

                    var n = $cfs.triggerHandler(cf_e('currentPosition', conf)),
                        x = true;

                    for (var j = 0, l = s.length; j < l; j++)
                    {
                        if (!s[j][0].triggerHandler(cf_e('slideTo', conf), [n, s[j][3], true]))
                        {
                            x = false;
                        }
                    }
                    return x;
                });


                //  queue event
                $cfs.bind(cf_e('queue', conf), function(e, dir, opt) {
                    e.stopPropagation();
                    if (is_function(dir))
                    {
                        dir.call($tt0, queu);
                    }
                    else if (is_array(dir))
                    {
                        queu = dir;
                    }
                    else if (!is_undefined(dir))
                    {
                        queu.push([dir, opt]);
                    }
                    return queu;
                });


                //  insertItem event
                $cfs.bind(cf_e('insertItem', conf), function(e, itm, num, org, dev) {
                    e.stopPropagation();

                    var v = [itm, num, org, dev],
                        t = ['string/object', 'string/number/object', 'boolean', 'number'],
                        a = cf_sortParams(v, t);

                    itm = a[0];
                    num = a[1];
                    org = a[2];
                    dev = a[3];

                    if (is_object(itm) && !is_jquery(itm))
                    { 
                        itm = $(itm);
                    }
                    else if (is_string(itm))
                    {
                        itm = $(itm);
                    }
                    if (!is_jquery(itm) || itm.length == 0)
                    {
                        return debug(conf, 'Not a valid object.');
                    }

                    if (is_undefined(num))
                    {
                        num = 'end';
                    }

                    sz_storeMargin(itm, opts);
                    sz_storeOrigCss(itm);

                    var orgNum = num,
                        before = 'before';

                    if (num == 'end')
                    {
                        if (org)
                        {
                            if (itms.first == 0)
                            {
                                num = itms.total-1;
                                before = 'after';
                            }
                            else
                            {
                                num = itms.first;
                                itms.first += itm.length;
                            }
                            if (num < 0)
                            {
                                num = 0;
                            }
                        }
                        else
                        {
                            num = itms.total-1;
                            before = 'after';
                        }
                    }
                    else
                    {
                        num = gn_getItemIndex(num, dev, org, itms, $cfs);
                    }

                    var $cit = $cfs.children().eq(num);
                    if ($cit.length)
                    {
                        $cit[before](itm);
                    }
                    else
                    {
                        debug(conf, 'Correct insert-position not found! Appending item to the end.');
                        $cfs.append(itm);
                    }

                    if (orgNum != 'end' && !org)
                    {
                        if (num < itms.first)
                        {
                            itms.first += itm.length;
                        }
                    }
                    itms.total = $cfs.children().length;
                    if (itms.first >= itms.total)
                    {
                        itms.first -= itms.total;
                    }

                    $cfs.trigger(cf_e('updateSizes', conf));
                    $cfs.trigger(cf_e('linkAnchors', conf));

                    return true;
                });


                //  removeItem event
                $cfs.bind(cf_e('removeItem', conf), function(e, num, org, dev) {
                    e.stopPropagation();

                    var v = [num, org, dev],
                        t = ['string/number/object', 'boolean', 'number'],
                        a = cf_sortParams(v, t);

                    num = a[0];
                    org = a[1];
                    dev = a[2];

                    var removed = false;

                    if (num instanceof $ && num.length > 1)
                    {
                        $removed = $();
                        num.each(function(i, el) {
                            var $rem = $cfs.trigger(cf_e('removeItem', conf), [$(this), org, dev]);
                            if ( $rem ) 
                            {
                                $removed = $removed.add($rem);
                            }
                        });
                        return $removed;
                    }

                    if (is_undefined(num) || num == 'end')
                    {
                        $removed = $cfs.children().last();
                    }
                    else
                    {
                        num = gn_getItemIndex(num, dev, org, itms, $cfs);
                        var $removed = $cfs.children().eq(num);
                        if ( $removed.length )
                        {
                            if (num < itms.first)
                            {
                                itms.first -= $removed.length;
                            }
                        }
                    }
                    if ( $removed && $removed.length )
                    {
                        $removed.detach();
                        itms.total = $cfs.children().length;
                        $cfs.trigger(cf_e('updateSizes', conf));
                    }

                    return $removed;
                });


                //  onBefore and onAfter event
                $cfs.bind(cf_e('onBefore', conf)+' '+cf_e('onAfter', conf), function(e, fn) {
                    e.stopPropagation();
                    var eType = e.type.slice(conf.events.prefix.length);
                    if (is_array(fn))
                    {
                        clbk[eType] = fn;
                    }
                    if (is_function(fn))
                    {
                        clbk[eType].push(fn);
                    }
                    return clbk[eType];
                });


                //  currentPosition event
                $cfs.bind(cf_e('currentPosition', conf), function(e, fn) {
                    e.stopPropagation();
                    if (itms.first == 0)
                    {
                        var val = 0;
                    }
                    else
                    {
                        var val = itms.total - itms.first;
                    }
                    if (is_function(fn))
                    {
                        fn.call($tt0, val);
                    }
                    return val;
                });


                //  currentPage event
                $cfs.bind(cf_e('currentPage', conf), function(e, fn) {
                    e.stopPropagation();
                    var ipp = opts.pagination.items || opts.items.visible,
                        max = Math.ceil(itms.total/ipp-1),
                        nr;
                    if (itms.first == 0)
                    {
                        nr = 0;
                    }
                    else if (itms.first < itms.total % ipp)
                    {
                        nr = 0;
                    }
                    else if (itms.first == ipp && !opts.circular)
                    {
                        nr = max;
                    }
                    else 
                    {
                         nr = Math.round((itms.total-itms.first)/ipp);
                    }
                    if (nr < 0)
                    {
                        nr = 0;
                    }
                    if (nr > max)
                    {
                        nr = max;
                    }
                    if (is_function(fn))
                    {
                        fn.call($tt0, nr);
                    }
                    return nr;
                });


                //  currentVisible event
                $cfs.bind(cf_e('currentVisible', conf), function(e, fn) {
                    e.stopPropagation();
                    var $i = gi_getCurrentItems($cfs.children(), opts);
                    if (is_function(fn))
                    {
                        fn.call($tt0, $i);
                    }
                    return $i;
                });


                //  slice event
                $cfs.bind(cf_e('slice', conf), function(e, f, l, fn) {
                    e.stopPropagation();

                    if (itms.total == 0)
                    {
                        return false;
                    }

                    var v = [f, l, fn],
                        t = ['number', 'number', 'function'],
                        a = cf_sortParams(v, t);

                    f = (is_number(a[0])) ? a[0] : 0;
                    l = (is_number(a[1])) ? a[1] : itms.total;
                    fn = a[2];

                    f += itms.first;
                    l += itms.first;

                    if (items.total > 0)
                    {
                        while (f > itms.total)
                        {
                            f -= itms.total;
                        }
                        while (l > itms.total)
                        {
                            l -= itms.total;
                        }
                        while (f < 0)
                        {
                            f += itms.total;
                        }
                        while (l < 0)
                        {
                            l += itms.total;
                        }
                    }
                    var $iA = $cfs.children(),
                        $i;

                    if (l > f)
                    {
                        $i = $iA.slice(f, l);
                    }
                    else
                    {
                        $i = $( $iA.slice(f, itms.total).get().concat( $iA.slice(0, l).get() ) );
                    }

                    if (is_function(fn))
                    {
                        fn.call($tt0, $i);
                    }
                    return $i;
                });


                //  isPaused, isStopped and isScrolling events
                $cfs.bind(cf_e('isPaused', conf)+' '+cf_e('isStopped', conf)+' '+cf_e('isScrolling', conf), function(e, fn) {
                    e.stopPropagation();
                    var eType = e.type.slice(conf.events.prefix.length),
                        value = crsl[eType];
                    if (is_function(fn))
                    {
                        fn.call($tt0, value);
                    }
                    return value;
                });


                //  configuration event
                $cfs.bind(cf_e('configuration', conf), function(e, a, b, c) {
                    e.stopPropagation();
                    var reInit = false;

                    //  return entire configuration-object
                    if (is_function(a))
                    {
                        a.call($tt0, opts);
                    }
                    //  set multiple options via object
                    else if (is_object(a))
                    {
                        opts_orig = $.extend(true, {}, opts_orig, a);
                        if (b !== false) reInit = true;
                        else opts = $.extend(true, {}, opts, a);

                    }
                    else if (!is_undefined(a))
                    {

                        //  callback function for specific option
                        if (is_function(b))
                        {
                            var val = eval('opts.'+a);
                            if (is_undefined(val))
                            {
                                val = '';
                            }
                            b.call($tt0, val);
                        }
                        //  set individual option
                        else if (!is_undefined(b))
                        {
                            if (typeof c !== 'boolean') c = true;
                            eval('opts_orig.'+a+' = b');
                            if (c !== false) reInit = true;
                            else eval('opts.'+a+' = b');
                        }
                        //  return value for specific option
                        else
                        {
                            return eval('opts.'+a);
                        }
                    }
                    if (reInit)
                    {
                        sz_resetMargin($cfs.children(), opts);
                        FN._cfs_init(opts_orig);
                        FN._cfs_bind_buttons();
                        var sz = sz_setSizes($cfs, opts);
                        $cfs.trigger(cf_e('updatePageStatus', conf), [true, sz]);
                    }
                    return opts;
                });


                //  linkAnchors event
                $cfs.bind(cf_e('linkAnchors', conf), function(e, $con, sel) {
                    e.stopPropagation();

                    if (is_undefined($con))
                    {
                        $con = $('body');
                    }
                    else if (is_string($con))
                    {
                        $con = $($con);
                    }
                    if (!is_jquery($con) || $con.length == 0)
                    {
                        return debug(conf, 'Not a valid object.');
                    }
                    if (!is_string(sel))
                    {
                        sel = 'a.caroufredsel';
                    }

                    $con.find(sel).each(function() {
                        var h = this.hash || '';
                        if (h.length > 0 && $cfs.children().index($(h)) != -1)
                        {
                            $(this).unbind('click').click(function(e) {
                                e.preventDefault();
                                $cfs.trigger(cf_e('slideTo', conf), h);
                            });
                        }
                    });
                    return true;
                });


                //  updatePageStatus event
                $cfs.bind(cf_e('updatePageStatus', conf), function(e, build, sizes) {
                    e.stopPropagation();
                    if (!opts.pagination.container)
                    {
                        return;
                    }

                    var ipp = opts.pagination.items || opts.items.visible,
                        pgs = Math.ceil(itms.total/ipp);

                    if (build)
                    {
                        if (opts.pagination.anchorBuilder)
                        {
                            opts.pagination.container.children().remove();
                            opts.pagination.container.each(function() {
                                for (var a = 0; a < pgs; a++)
                                {
                                    var i = $cfs.children().eq( gn_getItemIndex(a*ipp, 0, true, itms, $cfs) );
                                    $(this).append(opts.pagination.anchorBuilder.call(i[0], a+1));
                                }
                            });
                        }
                        opts.pagination.container.each(function() {
                            $(this).children().unbind(opts.pagination.event).each(function(a) {
                                $(this).bind(opts.pagination.event, function(e) {
                                    e.preventDefault();
                                    $cfs.trigger(cf_e('slideTo', conf), [a*ipp, -opts.pagination.deviation, true, opts.pagination]);
                                });
                            });
                        });
                    }

                    var selected = $cfs.triggerHandler(cf_e('currentPage', conf)) + opts.pagination.deviation;
                    if (selected >= pgs)
                    {
                        selected = 0;
                    }
                    if (selected < 0)
                    {
                        selected = pgs-1;
                    }
                    opts.pagination.container.each(function() {
                        $(this).children().removeClass(cf_c('selected', conf)).eq(selected).addClass(cf_c('selected', conf));
                    });
                    return true;
                });


                //  updateSizes event
                $cfs.bind(cf_e('updateSizes', conf), function(e) {
                    var vI = opts.items.visible,
                        a_itm = $cfs.children(),
                        avail_primary = ms_getParentSize($wrp, opts, 'width');

                    itms.total = a_itm.length;

                    if (crsl.primarySizePercentage)
                    {
                        opts.maxDimension = avail_primary;
                        opts[opts.d['width']] = ms_getPercentage(avail_primary, crsl.primarySizePercentage);
                    }
                    else
                    {
                        opts.maxDimension = ms_getMaxDimension(opts, avail_primary);
                    }

                    if (opts.responsive)
                    {
                        opts.items.width = opts.items.sizesConf.width;
                        opts.items.height = opts.items.sizesConf.height;
                        opts = in_getResponsiveValues(opts, a_itm, avail_primary);
                        vI = opts.items.visible;
                        sz_setResponsiveSizes(opts, a_itm);
                    }
                    else if (opts.items.visibleConf.variable)
                    {
                        vI = gn_getVisibleItemsNext(a_itm, opts, 0);
                    }
                    else if (opts.items.filter != '*')
                    {
                        vI = gn_getVisibleItemsNextFilter(a_itm, opts, 0);
                    }

                    if (!opts.circular && itms.first != 0 && vI > itms.first) {
                        if (opts.items.visibleConf.variable)
                        {
                            var nI = gn_getVisibleItemsPrev(a_itm, opts, itms.first) - itms.first;
                        }
                        else if (opts.items.filter != '*')
                        {
                            var nI = gn_getVisibleItemsPrevFilter(a_itm, opts, itms.first) - itms.first;
                        }
                        else
                        {
                            var nI = opts.items.visible - itms.first;
                        }
                        debug(conf, 'Preventing non-circular: sliding '+nI+' items backward.');
                        $cfs.trigger(cf_e('prev', conf), nI);
                    }

                    opts.items.visible = cf_getItemsAdjust(vI, opts, opts.items.visibleConf.adjust, $tt0);
                    opts.items.visibleConf.old = opts.items.visible;
                    opts = in_getAlignPadding(opts, a_itm);

                    var sz = sz_setSizes($cfs, opts);
                    $cfs.trigger(cf_e('updatePageStatus', conf), [true, sz]);
                    nv_showNavi(opts, itms.total, conf);
                    nv_enableNavi(opts, itms.first, conf);

                    return sz;
                });


                //  destroy event
                $cfs.bind(cf_e('destroy', conf), function(e, orgOrder) {
                    e.stopPropagation();
                    tmrs = sc_clearTimers(tmrs);

                    $cfs.data('_cfs_isCarousel', false);
                    $cfs.trigger(cf_e('finish', conf));
                    if (orgOrder)
                    {
                        $cfs.trigger(cf_e('jumpToStart', conf));
                    }
                    sz_restoreOrigCss($cfs.children());
                    sz_restoreOrigCss($cfs);
                    FN._cfs_unbind_events();
                    FN._cfs_unbind_buttons();
                    if (conf.wrapper == 'parent')
                    {
                        sz_restoreOrigCss($wrp);
                    }
                    else
                    {
                        $wrp.replaceWith($cfs);
                    }

                    return true;
                });


                //  debug event
                $cfs.bind(cf_e('debug', conf), function(e) {
                    debug(conf, 'Carousel width: ' + opts.width);
                    debug(conf, 'Carousel height: ' + opts.height);
                    debug(conf, 'Item widths: ' + opts.items.width);
                    debug(conf, 'Item heights: ' + opts.items.height);
                    debug(conf, 'Number of items visible: ' + opts.items.visible);
                    if (opts.auto.play)
                    {
                        debug(conf, 'Number of items scrolled automatically: ' + opts.auto.items);
                    }
                    if (opts.prev.button)
                    {
                        debug(conf, 'Number of items scrolled backward: ' + opts.prev.items);
                    }
                    if (opts.next.button)
                    {
                        debug(conf, 'Number of items scrolled forward: ' + opts.next.items);
                    }
                    return conf.debug;
                });


                //  triggerEvent, making prefixed and namespaced events accessible from outside
                $cfs.bind('_cfs_triggerEvent', function(e, n, o) {
                    e.stopPropagation();
                    return $cfs.triggerHandler(cf_e(n, conf), o);
                });
            };  //  /bind_events


            FN._cfs_unbind_events = function() {
                $cfs.unbind(cf_e('', conf));
                $cfs.unbind(cf_e('', conf, false));
                $cfs.unbind('_cfs_triggerEvent');
            };  //  /unbind_events


            FN._cfs_bind_buttons = function() {
                FN._cfs_unbind_buttons();
                nv_showNavi(opts, itms.total, conf);
                nv_enableNavi(opts, itms.first, conf);

                if (opts.auto.pauseOnHover)
                {
                    var pC = bt_pauseOnHoverConfig(opts.auto.pauseOnHover);
                    $wrp.bind(cf_e('mouseenter', conf, false), function() { $cfs.trigger(cf_e('pause', conf), pC);  })
                        .bind(cf_e('mouseleave', conf, false), function() { $cfs.trigger(cf_e('resume', conf));     });
                }

                //  play button
                if (opts.auto.button)
                {
                    opts.auto.button.bind(cf_e(opts.auto.event, conf, false), function(e) {
                        e.preventDefault();
                        var ev = false,
                            pC = null;

                        if (crsl.isPaused)
                        {
                            ev = 'play';
                        }
                        else if (opts.auto.pauseOnEvent)
                        {
                            ev = 'pause';
                            pC = bt_pauseOnHoverConfig(opts.auto.pauseOnEvent);
                        }
                        if (ev)
                        {
                            $cfs.trigger(cf_e(ev, conf), pC);
                        }
                    });
                }

                //  prev button
                if (opts.prev.button)
                {
                    opts.prev.button.bind(cf_e(opts.prev.event, conf, false), function(e) {
                        e.preventDefault();
                        $cfs.trigger(cf_e('prev', conf));
                    });
                    if (opts.prev.pauseOnHover)
                    {
                        var pC = bt_pauseOnHoverConfig(opts.prev.pauseOnHover);
                        opts.prev.button.bind(cf_e('mouseenter', conf, false), function() { $cfs.trigger(cf_e('pause', conf), pC);  })
                                        .bind(cf_e('mouseleave', conf, false), function() { $cfs.trigger(cf_e('resume', conf));     });
                    }
                }

                //  next butotn
                if (opts.next.button)
                {
                    opts.next.button.bind(cf_e(opts.next.event, conf, false), function(e) {
                        e.preventDefault();
                        $cfs.trigger(cf_e('next', conf));
                    });
                    if (opts.next.pauseOnHover)
                    {
                        var pC = bt_pauseOnHoverConfig(opts.next.pauseOnHover);
                        opts.next.button.bind(cf_e('mouseenter', conf, false), function() { $cfs.trigger(cf_e('pause', conf), pC);  })
                                        .bind(cf_e('mouseleave', conf, false), function() { $cfs.trigger(cf_e('resume', conf));     });
                    }
                }

                //  pagination
                if (opts.pagination.container)
                {
                    if (opts.pagination.pauseOnHover)
                    {
                        var pC = bt_pauseOnHoverConfig(opts.pagination.pauseOnHover);
                        opts.pagination.container.bind(cf_e('mouseenter', conf, false), function() { $cfs.trigger(cf_e('pause', conf), pC); })
                                                 .bind(cf_e('mouseleave', conf, false), function() { $cfs.trigger(cf_e('resume', conf));    });
                    }
                }

                //  prev/next keys
                if (opts.prev.key || opts.next.key)
                {
                    $(document).bind(cf_e('keyup', conf, false, true, true), function(e) {
                        var k = e.keyCode;
                        if (k == opts.next.key)
                        {
                            e.preventDefault();
                            $cfs.trigger(cf_e('next', conf));
                        }
                        if (k == opts.prev.key)
                        {
                            e.preventDefault();
                            $cfs.trigger(cf_e('prev', conf));
                        }
                    });
                }

                //  pagination keys
                if (opts.pagination.keys)
                {
                    $(document).bind(cf_e('keyup', conf, false, true, true), function(e) {
                        var k = e.keyCode;
                        if (k >= 49 && k < 58)
                        {
                            k = (k-49) * opts.items.visible;
                            if (k <= itms.total)
                            {
                                e.preventDefault();
                                $cfs.trigger(cf_e('slideTo', conf), [k, 0, true, opts.pagination]);
                            }
                        }
                    });
                }

                //  swipe
                if ($.fn.swipe)
                {
                    var isTouch = 'ontouchstart' in window;
                    if ((isTouch && opts.swipe.onTouch) || (!isTouch && opts.swipe.onMouse))
                    {
                        var scP = $.extend(true, {}, opts.prev, opts.swipe),
                            scN = $.extend(true, {}, opts.next, opts.swipe),
                            swP = function() { $cfs.trigger(cf_e('prev', conf), [scP]) },
                            swN = function() { $cfs.trigger(cf_e('next', conf), [scN]) };

                        switch (opts.direction)
                        {
                            case 'up':
                            case 'down':
                                opts.swipe.options.swipeUp = swN;
                                opts.swipe.options.swipeDown = swP;
                                break;
                            default:
                                opts.swipe.options.swipeLeft = swN;
                                opts.swipe.options.swipeRight = swP;
                        }
                        if (crsl.swipe)
                        {
                            $cfs.swipe('destroy');
                        }
                        $wrp.swipe(opts.swipe.options);
                        $wrp.css('cursor', 'move');
                        crsl.swipe = true;
                    }
                }

                //  mousewheel
                if ($.fn.mousewheel)
                {

                    if (opts.mousewheel)
                    {
                        var mcP = $.extend(true, {}, opts.prev, opts.mousewheel),
                            mcN = $.extend(true, {}, opts.next, opts.mousewheel);

                        if (crsl.mousewheel)
                        {
                            $wrp.unbind(cf_e('mousewheel', conf, false));
                        }
                        $wrp.bind(cf_e('mousewheel', conf, false), function(e, delta) { 
                            e.preventDefault();
                            if (delta > 0)
                            {
                                $cfs.trigger(cf_e('prev', conf), [mcP]);
                            }
                            else
                            {
                                $cfs.trigger(cf_e('next', conf), [mcN]);
                            }
                        });
                        crsl.mousewheel = true;
                    }
                }

                if (opts.auto.play)
                {
                    $cfs.trigger(cf_e('play', conf), opts.auto.delay);
                }

                if (crsl.upDateOnWindowResize)
                {
                    var resizeFn = function(e) {
                        $cfs.trigger(cf_e('finish', conf));
                        if (opts.auto.pauseOnResize && !crsl.isPaused)
                        {
                            $cfs.trigger(cf_e('play', conf));
                        }
                        sz_resetMargin($cfs.children(), opts);
                        $cfs.trigger(cf_e('updateSizes', conf));
                    };

                    var $w = $(window),
                        onResize = null;

                    if ($.debounce && conf.onWindowResize == 'debounce')
                    {
                        onResize = $.debounce(200, resizeFn);
                    }
                    else if ($.throttle && conf.onWindowResize == 'throttle')
                    {
                        onResize = $.throttle(300, resizeFn);
                    }
                    else
                    {
                        var _windowWidth = 0,
                            _windowHeight = 0;

                        onResize = function() {
                            var nw = $w.width(),
                                nh = $w.height();

                            if (nw != _windowWidth || nh != _windowHeight)
                            {
                                resizeFn();
                                _windowWidth = nw;
                                _windowHeight = nh;
                            }
                        };
                    }
                    $w.bind(cf_e('resize', conf, false, true, true), onResize);
                }
            };  //  /bind_buttons


            FN._cfs_unbind_buttons = function() {
                var ns1 = cf_e('', conf),
                    ns2 = cf_e('', conf, false);
                    ns3 = cf_e('', conf, false, true, true);

                $(document).unbind(ns3);
                $(window).unbind(ns3);
                $wrp.unbind(ns2);

                if (opts.auto.button)
                {
                    opts.auto.button.unbind(ns2);
                }
                if (opts.prev.button)
                {
                    opts.prev.button.unbind(ns2);
                }
                if (opts.next.button)
                {
                    opts.next.button.unbind(ns2);
                }
                if (opts.pagination.container)
                {
                    opts.pagination.container.unbind(ns2);
                    if (opts.pagination.anchorBuilder)
                    {
                        opts.pagination.container.children().remove();
                    }
                }
                if (crsl.swipe)
                {
                    $cfs.swipe('destroy');
                    $wrp.css('cursor', 'default');
                    crsl.swipe = false;
                }
                if (crsl.mousewheel)
                {
                    crsl.mousewheel = false;
                }

                nv_showNavi(opts, 'hide', conf);
                nv_enableNavi(opts, 'removeClass', conf);

            };  //  /unbind_buttons



            //  START

            if (is_boolean(configs))
            {
                configs = {
                    'debug': configs
                };
            }

            //  set vars
            var crsl = {
                    'direction'     : 'next',
                    'isPaused'      : true,
                    'isScrolling'   : false,
                    'isStopped'     : false,
                    'mousewheel'    : false,
                    'swipe'         : false
                },
                itms = {
                    'total'         : $cfs.children().length,
                    'first'         : 0
                },
                tmrs = {
                    'auto'          : null,
                    'progress'      : null,
                    'startTime'     : getTime(),
                    'timePassed'    : 0
                },
                scrl = {
                    'isStopped'     : false,
                    'duration'      : 0,
                    'startTime'     : 0,
                    'easing'        : '',
                    'anims'         : []
                },
                clbk = {
                    'onBefore'      : [],
                    'onAfter'       : []
                },
                queu = [],
                conf = $.extend(true, {}, $.fn.carouFredSel.configs, configs),
                opts = {},
                opts_orig = $.extend(true, {}, options),
                $wrp = (conf.wrapper == 'parent')
                    ? $cfs.parent()
                    : $cfs.wrap('<'+conf.wrapper.element+' class="'+conf.wrapper.classname+'" />').parent();


            conf.selector       = $cfs.selector;
            conf.serialNumber   = $.fn.carouFredSel.serialNumber++;

            conf.transition = (conf.transition && $.fn.transition) ? 'transition' : 'animate';

            //  create carousel
            FN._cfs_init(opts_orig, true, starting_position);
            FN._cfs_build();
            FN._cfs_bind_events();
            FN._cfs_bind_buttons();

            //  find item to start
            if (is_array(opts.items.start))
            {
                var start_arr = opts.items.start;
            }
            else
            {
                var start_arr = [];
                if (opts.items.start != 0)
                {
                    start_arr.push(opts.items.start);
                }
            }
            if (opts.cookie)
            {
                start_arr.unshift(parseInt(cf_getCookie(opts.cookie), 10));
            }

            if (start_arr.length > 0)
            {
                for (var a = 0, l = start_arr.length; a < l; a++)
                {
                    var s = start_arr[a];
                    if (s == 0)
                    {
                        continue;
                    }
                    if (s === true)
                    {
                        s = window.location.hash;
                        if (s.length < 1)
                        {
                            continue;
                        }
                    }
                    else if (s === 'random')
                    {
                        s = Math.floor(Math.random()*itms.total);
                    }
                    if ($cfs.triggerHandler(cf_e('slideTo', conf), [s, 0, true, { fx: 'none' }]))
                    {
                        break;
                    }
                }
            }
            var siz = sz_setSizes($cfs, opts),
                itm = gi_getCurrentItems($cfs.children(), opts);

            if (opts.onCreate)
            {
                opts.onCreate.call($tt0, {
                    'width': siz.width,
                    'height': siz.height,
                    'items': itm
                });
            }

            $cfs.trigger(cf_e('updatePageStatus', conf), [true, siz]);
            $cfs.trigger(cf_e('linkAnchors', conf));

            if (conf.debug)
            {
                $cfs.trigger(cf_e('debug', conf));
            }

            return $cfs;
        };



        //  GLOBAL PUBLIC

        $.fn.carouFredSel.serialNumber = 1;
        $.fn.carouFredSel.defaults = {
            'synchronise'   : false,
            'infinite'      : true,
            'circular'      : true,
            'responsive'    : false,
            'direction'     : 'left',
            'items'         : {
                'start'         : 0
            },
            'scroll'        : {
                'easing'        : 'swing',
                'duration'      : 500,
                'pauseOnHover'  : false,
                'event'         : 'click',
                'queue'         : false
            }
        };
        $.fn.carouFredSel.configs = {
            'debug'         : false,
            'transition'    : false,
            'onWindowResize': 'throttle',
            'events'        : {
                'prefix'        : '',
                'namespace'     : 'cfs'
            },
            'wrapper'       : {
                'element'       : 'div',
                'classname'     : 'caroufredsel_wrapper'
            },
            'classnames'    : {}
        };
        $.fn.carouFredSel.pageAnchorBuilder = function(nr) {
            return '<a href="#"><span>'+nr+'</span></a>';
        };
        $.fn.carouFredSel.progressbarUpdater = function(perc) {
            $(this).css('width', perc+'%');
        };

        $.fn.carouFredSel.cookie = {
            get: function(n) {
                n += '=';
                var ca = document.cookie.split(';');
                for (var a = 0, l = ca.length; a < l; a++)
                {
                    var c = ca[a];
                    while (c.charAt(0) == ' ')
                    {
                        c = c.slice(1);
                    }
                    if (c.indexOf(n) == 0)
                    {
                        return c.slice(n.length);
                    }
                }
                return 0;
            },
            set: function(n, v, d) {
                var e = "";
                if (d)
                {
                    var date = new Date();
                    date.setTime(date.getTime() + (d * 24 * 60 * 60 * 1000));
                    e = "; expires=" + date.toGMTString();
                }
                document.cookie = n + '=' + v + e + '; path=/';
            },
            remove: function(n) {
                $.fn.carouFredSel.cookie.set(n, "", -1);
            }
        };


        //  GLOBAL PRIVATE

        //  scrolling functions
        function sc_setScroll(d, e, c) {
            if (c.transition == 'transition')
            {
                if (e == 'swing')
                {
                    e = 'ease';
                }
            }
            return {
                anims: [],
                duration: d,
                orgDuration: d,
                easing: e,
                startTime: getTime()
            };
        }
        function sc_startScroll(s, c) {
            for (var a = 0, l = s.anims.length; a < l; a++)
            {
                var b = s.anims[a];
                if (!b)
                {
                    continue;
                }
                b[0][c.transition](b[1], s.duration, s.easing, b[2]);
            }
        }
        function sc_stopScroll(s, finish) {
            if (!is_boolean(finish))
            {
                finish = true;
            }
            if (is_object(s.pre))
            {
                sc_stopScroll(s.pre, finish);
            }
            for (var a = 0, l = s.anims.length; a < l; a++)
            {
                var b = s.anims[a];
                b[0].stop(true);
                if (finish)
                {
                    b[0].css(b[1]);
                    if (is_function(b[2]))
                    {
                        b[2]();
                    }
                }
            }
            if (is_object(s.post))
            {
                sc_stopScroll(s.post, finish);
            }
        }
        function sc_afterScroll( $c, $c2, o ) {
            if ($c2)
            {
                $c2.remove();
            }

            switch(o.fx) {
                case 'fade':
                case 'crossfade':
                case 'cover-fade':
                case 'uncover-fade':
                    $c.css('filter', '');
                    $c.css('opacity', 1);
                    break;
            }
        }
        function sc_fireCallbacks($t, o, b, a, c) {
            if (o[b])
            {
                o[b].call($t, a);
            }
            if (c[b].length)
            {
                for (var i = 0, l = c[b].length; i < l; i++)
                {
                    c[b][i].call($t, a);
                }
            }
            return [];
        }
        function sc_fireQueue($c, q, c) {

            if (q.length)
            {
                $c.trigger(cf_e(q[0][0], c), q[0][1]);
                q.shift();
            }
            return q;
        }
        function sc_hideHiddenItems(hiddenitems) {
            hiddenitems.each(function() {
                var hi = $(this);
                hi.data('_cfs_isHidden', hi.is(':hidden')).hide();
            });
        }
        function sc_showHiddenItems(hiddenitems) {
            if (hiddenitems)
            {
                hiddenitems.each(function() {
                    var hi = $(this);
                    if (!hi.data('_cfs_isHidden'))
                    {
                        hi.show();
                    }
                });
            }
        }
        function sc_clearTimers(t) {
            if (t.auto)
            {
                clearTimeout(t.auto);
            }
            if (t.progress)
            {
                clearInterval(t.progress);
            }
            return t;
        }
        function sc_mapCallbackArguments(i_old, i_skp, i_new, s_itm, s_dir, s_dur, w_siz) {
            return {
                'width': w_siz.width,
                'height': w_siz.height,
                'items': {
                    'old': i_old,
                    'skipped': i_skp,
                    'visible': i_new
                },
                'scroll': {
                    'items': s_itm,
                    'direction': s_dir,
                    'duration': s_dur
                }
            };
        }
        function sc_getDuration( sO, o, nI, siz ) {
            var dur = sO.duration;
            if (sO.fx == 'none')
            {
                return 0;
            }
            if (dur == 'auto')
            {
                dur = o.scroll.duration / o.scroll.items * nI;
            }
            else if (dur < 10)
            {
                dur = siz / dur;
            }
            if (dur < 1)
            {
                return 0;
            }
            if (sO.fx == 'fade')
            {
                dur = dur / 2;
            }
            return Math.round(dur);
        }

        //  navigation functions
        function nv_showNavi(o, t, c) {
            var minimum = (is_number(o.items.minimum)) ? o.items.minimum : o.items.visible + 1;
            if (t == 'show' || t == 'hide')
            {
                var f = t;
            }
            else if (minimum > t)
            {
                debug(c, 'Not enough items ('+t+' total, '+minimum+' needed): Hiding navigation.');
                var f = 'hide';
            }
            else
            {
                var f = 'show';
            }
            var s = (f == 'show') ? 'removeClass' : 'addClass',
                h = cf_c('hidden', c);

            if (o.auto.button)
            {
                o.auto.button[f]()[s](h);
            }
            if (o.prev.button)
            {
                o.prev.button[f]()[s](h);
            }
            if (o.next.button)
            {
                o.next.button[f]()[s](h);
            }
            if (o.pagination.container)
            {
                o.pagination.container[f]()[s](h);
            }
        }
        function nv_enableNavi(o, f, c) {
            if (o.circular || o.infinite) return;
            var fx = (f == 'removeClass' || f == 'addClass') ? f : false,
                di = cf_c('disabled', c);

            if (o.auto.button && fx)
            {
                o.auto.button[fx](di);
            }
            if (o.prev.button)
            {
                var fn = fx || (f == 0) ? 'addClass' : 'removeClass';
                o.prev.button[fn](di);
            }
            if (o.next.button)
            {
                var fn = fx || (f == o.items.visible) ? 'addClass' : 'removeClass';
                o.next.button[fn](di);
            }
        }

        //  get object functions
        function go_getObject($tt, obj) {
            if (is_function(obj))
            {
                obj = obj.call($tt);
            }
            else if (is_undefined(obj))
            {
                obj = {};
            }
            return obj;
        }
        function go_getItemsObject($tt, obj) {
            obj = go_getObject($tt, obj);
            if (is_number(obj))
            {
                obj = {
                    'visible': obj
                };
            }
            else if (obj == 'variable')
            {
                obj = {
                    'visible': obj,
                    'width': obj, 
                    'height': obj
                };
            }
            else if (!is_object(obj))
            {
                obj = {};
            }
            return obj;
        }
        function go_getScrollObject($tt, obj) {
            obj = go_getObject($tt, obj);
            if (is_number(obj))
            {
                if (obj <= 50)
                {
                    obj = {
                        'items': obj
                    };
                }
                else
                {
                    obj = {
                        'duration': obj
                    };
                }
            }
            else if (is_string(obj))
            {
                obj = {
                    'easing': obj
                };
            }
            else if (!is_object(obj))
            {
                obj = {};
            }
            return obj;
        }
        function go_getNaviObject($tt, obj) {
            obj = go_getObject($tt, obj);
            if (is_string(obj))
            {
                var temp = cf_getKeyCode(obj);
                if (temp == -1)
                {
                    obj = $(obj);
                }
                else
                {
                    obj = temp;
                }
            }
            return obj;
        }

        function go_getAutoObject($tt, obj) {
            obj = go_getNaviObject($tt, obj);
            if (is_jquery(obj))
            {
                obj = {
                    'button': obj
                };
            }
            else if (is_boolean(obj))
            {
                obj = {
                    'play': obj
                };
            }
            else if (is_number(obj))
            {
                obj = {
                    'timeoutDuration': obj
                };
            }
            if (obj.progress)
            {
                if (is_string(obj.progress) || is_jquery(obj.progress))
                {
                    obj.progress = {
                        'bar': obj.progress
                    };
                }
            }
            return obj;
        }
        function go_complementAutoObject($tt, obj) {
            if (is_function(obj.button))
            {
                obj.button = obj.button.call($tt);
            }
            if (is_string(obj.button))
            {
                obj.button = $(obj.button);
            }
            if (!is_boolean(obj.play))
            {
                obj.play = true;
            }
            if (!is_number(obj.delay))
            {
                obj.delay = 0;
            }
            if (is_undefined(obj.pauseOnEvent))
            {
                obj.pauseOnEvent = true;
            }
            if (!is_boolean(obj.pauseOnResize))
            {
                obj.pauseOnResize = true;
            }
            if (!is_number(obj.timeoutDuration))
            {
                obj.timeoutDuration = (obj.duration < 10)
                    ? 2500
                    : obj.duration * 5;
            }
            if (obj.progress)
            {
                if (is_function(obj.progress.bar))
                {
                    obj.progress.bar = obj.progress.bar.call($tt);
                }
                if (is_string(obj.progress.bar))
                {
                    obj.progress.bar = $(obj.progress.bar);
                }
                if (obj.progress.bar)
                {
                    if (!is_function(obj.progress.updater))
                    {
                        obj.progress.updater = $.fn.carouFredSel.progressbarUpdater;
                    }
                    if (!is_number(obj.progress.interval))
                    {
                        obj.progress.interval = 50;
                    }
                }
                else
                {
                    obj.progress = false;
                }
            }
            return obj;
        }

        function go_getPrevNextObject($tt, obj) {
            obj = go_getNaviObject($tt, obj);
            if (is_jquery(obj))
            {
                obj = {
                    'button': obj
                };
            }
            else if (is_number(obj))
            {
                obj = {
                    'key': obj
                };
            }
            return obj;
        }
        function go_complementPrevNextObject($tt, obj) {
            if (is_function(obj.button))
            {
                obj.button = obj.button.call($tt);
            }
            if (is_string(obj.button))
            {
                obj.button = $(obj.button);
            }
            if (is_string(obj.key))
            {
                obj.key = cf_getKeyCode(obj.key);
            }
            return obj;
        }

        function go_getPaginationObject($tt, obj) {
            obj = go_getNaviObject($tt, obj);
            if (is_jquery(obj))
            {
                obj = {
                    'container': obj
                };
            }
            else if (is_boolean(obj))
            {
                obj = {
                    'keys': obj
                };
            }
            return obj;
        }
        function go_complementPaginationObject($tt, obj) {
            if (is_function(obj.container))
            {
                obj.container = obj.container.call($tt);
            }
            if (is_string(obj.container))
            {
                obj.container = $(obj.container);
            }
            if (!is_number(obj.items))
            {
                obj.items = false;
            }
            if (!is_boolean(obj.keys))
            {
                obj.keys = false;
            }
            if (!is_function(obj.anchorBuilder) && !is_false(obj.anchorBuilder))
            {
                obj.anchorBuilder = $.fn.carouFredSel.pageAnchorBuilder;
            }
            if (!is_number(obj.deviation))
            {
                obj.deviation = 0;
            }
            return obj;
        }

        function go_getSwipeObject($tt, obj) {
            if (is_function(obj))
            {
                obj = obj.call($tt);
            }
            if (is_undefined(obj))
            {
                obj = {
                    'onTouch': false
                };
            }
            if (is_true(obj))
            {
                obj = {
                    'onTouch': obj
                };
            }
            else if (is_number(obj))
            {
                obj = {
                    'items': obj
                };
            }
            return obj;
        }
        function go_complementSwipeObject($tt, obj) {
            if (!is_boolean(obj.onTouch))
            {
                obj.onTouch = true;
            }
            if (!is_boolean(obj.onMouse))
            {
                obj.onMouse = false;
            }
            if (!is_object(obj.options))
            {
                obj.options = {};
            }
            if (!is_boolean(obj.options.triggerOnTouchEnd))
            {
                obj.options.triggerOnTouchEnd = false;
            }
            return obj;
        }
        function go_getMousewheelObject($tt, obj) {
            if (is_function(obj))
            {
                obj = obj.call($tt);
            }
            if (is_true(obj))
            {
                obj = {};
            }
            else if (is_number(obj))
            {
                obj = {
                    'items': obj
                };
            }
            else if (is_undefined(obj))
            {
                obj = false;
            }
            return obj;
        }
        function go_complementMousewheelObject($tt, obj) {
            return obj;
        }

        //  get number functions
        function gn_getItemIndex(num, dev, org, items, $cfs) {
            if (is_string(num))
            {
                num = $(num, $cfs);
            }

            if (is_object(num))
            {
                num = $(num, $cfs);
            }
            if (is_jquery(num))
            {
                num = $cfs.children().index(num);
                if (!is_boolean(org))
                {
                    org = false;
                }
            }
            else
            {
                if (!is_boolean(org))
                {
                    org = true;
                }
            }
            if (!is_number(num))
            {
                num = 0;
            }
            if (!is_number(dev))
            {
                dev = 0;
            }

            if (org)
            {
                num += items.first;
            }
            num += dev;
            if (items.total > 0)
            {
                while (num >= items.total)
                {
                    num -= items.total;
                }
                while (num < 0)
                {
                    num += items.total;
                }
            }
            return num;
        }

        //  items prev
        function gn_getVisibleItemsPrev(i, o, s) {
            var t = 0,
                x = 0;

            for (var a = s; a >= 0; a--)
            {
                var j = i.eq(a);
                t += (j.is(':visible')) ? j[o.d['outerWidth']](true) : 0;
                if (t > o.maxDimension)
                {
                    return x;
                }
                if (a == 0)
                {
                    a = i.length;
                }
                x++;
            }
        }
        function gn_getVisibleItemsPrevFilter(i, o, s) {
            return gn_getItemsPrevFilter(i, o.items.filter, o.items.visibleConf.org, s);
        }
        function gn_getScrollItemsPrevFilter(i, o, s, m) {
            return gn_getItemsPrevFilter(i, o.items.filter, m, s);
        }
        function gn_getItemsPrevFilter(i, f, m, s) {
            var t = 0,
                x = 0;

            for (var a = s, l = i.length; a >= 0; a--)
            {
                x++;
                if (x == l)
                {
                    return x;
                }

                var j = i.eq(a);
                if (j.is(f))
                {
                    t++;
                    if (t == m)
                    {
                        return x;
                    }
                }
                if (a == 0)
                {
                    a = l;
                }
            }
        }

        function gn_getVisibleOrg($c, o) {
            return o.items.visibleConf.org || $c.children().slice(0, o.items.visible).filter(o.items.filter).length;
        }

        //  items next
        function gn_getVisibleItemsNext(i, o, s) {
            var t = 0,
                x = 0;

            for (var a = s, l = i.length-1; a <= l; a++)
            {
                var j = i.eq(a);

                t += (j.is(':visible')) ? j[o.d['outerWidth']](true) : 0;
                if (t > o.maxDimension)
                {
                    return x;
                }

                x++;
                if (x == l+1)
                {
                    return x;
                }
                if (a == l)
                {
                    a = -1;
                }
            }
        }
        function gn_getVisibleItemsNextTestCircular(i, o, s, l) {
            var v = gn_getVisibleItemsNext(i, o, s);
            if (!o.circular)
            {
                if (s + v > l)
                {
                    v = l - s;
                }
            }
            return v;
        }
        function gn_getVisibleItemsNextFilter(i, o, s) {
            return gn_getItemsNextFilter(i, o.items.filter, o.items.visibleConf.org, s, o.circular);
        }
        function gn_getScrollItemsNextFilter(i, o, s, m) {
            return gn_getItemsNextFilter(i, o.items.filter, m+1, s, o.circular) - 1;
        }
        function gn_getItemsNextFilter(i, f, m, s, c) {
            var t = 0,
                x = 0;

            for (var a = s, l = i.length-1; a <= l; a++)
            {
                x++;
                if (x >= l)
                {
                    return x;
                }

                var j = i.eq(a);
                if (j.is(f))
                {
                    t++;
                    if (t == m)
                    {
                        return x;
                    }
                }
                if (a == l)
                {
                    a = -1;
                }
            }
        }

        //  get items functions
        function gi_getCurrentItems(i, o) {
            return i.slice(0, o.items.visible);
        }
        function gi_getOldItemsPrev(i, o, n) {
            return i.slice(n, o.items.visibleConf.old+n);
        }
        function gi_getNewItemsPrev(i, o) {
            return i.slice(0, o.items.visible);
        }
        function gi_getOldItemsNext(i, o) {
            return i.slice(0, o.items.visibleConf.old);
        }
        function gi_getNewItemsNext(i, o, n) {
            return i.slice(n, o.items.visible+n);
        }

        //  sizes functions
        function sz_storeMargin(i, o, d) {
            if (o.usePadding)
            {
                if (!is_string(d))
                {
                    d = '_cfs_origCssMargin';
                }
                i.each(function() {
                    var j = $(this),
                        m = parseInt(j.css(o.d['marginRight']), 10);
                    if (!is_number(m)) 
                    {
                        m = 0;
                    }
                    j.data(d, m);
                });
            }
        }
        function sz_resetMargin(i, o, m) {
            if (o.usePadding)
            {
                var x = (is_boolean(m)) ? m : false;
                if (!is_number(m))
                {
                    m = 0;
                }
                sz_storeMargin(i, o, '_cfs_tempCssMargin');
                i.each(function() {
                    var j = $(this);
                    j.css(o.d['marginRight'], ((x) ? j.data('_cfs_tempCssMargin') : m + j.data('_cfs_origCssMargin')));
                });
            }
        }
        function sz_storeOrigCss(i) {
            i.each(function() {
                var j = $(this);
                j.data('_cfs_origCss', j.attr('style') || '');
            });
        }
        function sz_restoreOrigCss(i) {
            i.each(function() {
                var j = $(this);
                j.attr('style', j.data('_cfs_origCss') || '');
            });
        }
        function sz_setResponsiveSizes(o, all) {
            var visb = o.items.visible,
                newS = o.items[o.d['width']],
                seco = o[o.d['height']],
                secp = is_percentage(seco);

            all.each(function() {
                var $t = $(this),
                    nw = newS - ms_getPaddingBorderMargin($t, o, 'Width');

                $t[o.d['width']](nw);
                if (secp)
                {
                    $t[o.d['height']](ms_getPercentage(nw, seco));
                }
            });
        }
        function sz_setSizes($c, o) {
            var $w = $c.parent(),
                $i = $c.children(),
                $v = gi_getCurrentItems($i, o),
                sz = cf_mapWrapperSizes(ms_getSizes($v, o, true), o, false);

            $w.css(sz);

            if (o.usePadding)
            {
                var p = o.padding,
                    r = p[o.d[1]];

                if (o.align && r < 0)
                {
                    r = 0;
                }
                var $l = $v.last();
                $l.css(o.d['marginRight'], $l.data('_cfs_origCssMargin') + r);
                $c.css(o.d['top'], p[o.d[0]]);
                $c.css(o.d['left'], p[o.d[3]]);
            }

            $c.css(o.d['width'], sz[o.d['width']]+(ms_getTotalSize($i, o, 'width')*2));
            $c.css(o.d['height'], ms_getLargestSize($i, o, 'height'));
            return sz;
        }

        //  measuring functions
        function ms_getSizes(i, o, wrapper) {
            return [ms_getTotalSize(i, o, 'width', wrapper), ms_getLargestSize(i, o, 'height', wrapper)];
        }
        function ms_getLargestSize(i, o, dim, wrapper) {
            if (!is_boolean(wrapper))
            {
                wrapper = false;
            }
            if (is_number(o[o.d[dim]]) && wrapper)
            {
                return o[o.d[dim]];
            }
            if (is_number(o.items[o.d[dim]]))
            {
                return o.items[o.d[dim]];
            }
            dim = (dim.toLowerCase().indexOf('width') > -1) ? 'outerWidth' : 'outerHeight';
            return ms_getTrueLargestSize(i, o, dim);
        }
        function ms_getTrueLargestSize(i, o, dim) {
            var s = 0;

            for (var a = 0, l = i.length; a < l; a++)
            {
                var j = i.eq(a);

                var m = (j.is(':visible')) ? j[o.d[dim]](true) : 0;
                if (s < m)
                {
                    s = m;
                }
            }
            return s;
        }

        function ms_getTotalSize(i, o, dim, wrapper) {
            if (!is_boolean(wrapper))
            {
                wrapper = false;
            }
            if (is_number(o[o.d[dim]]) && wrapper)
            {
                return o[o.d[dim]];
            }
            if (is_number(o.items[o.d[dim]]))
            {
                return o.items[o.d[dim]] * i.length;
            }

            var d = (dim.toLowerCase().indexOf('width') > -1) ? 'outerWidth' : 'outerHeight',
                s = 0;

            for (var a = 0, l = i.length; a < l; a++)
            {
                var j = i.eq(a);
                s += (j.is(':visible')) ? j[o.d[d]](true) : 0;
            }
            return s;
        }
        function ms_getParentSize($w, o, d) {
            var isVisible = $w.is(':visible');
            if (isVisible)
            {
                $w.hide();
            }
            var s = $w.parent()[o.d[d]]();
            if (isVisible)
            {
                $w.show();
            }
            return s;
        }
        function ms_getMaxDimension(o, a) {
            return (is_number(o[o.d['width']])) ? o[o.d['width']] : a;
        }
        function ms_hasVariableSizes(i, o, dim) {
            var s = false,
                v = false;

            for (var a = 0, l = i.length; a < l; a++)
            {
                var j = i.eq(a);

                var c = (j.is(':visible')) ? j[o.d[dim]](true) : 0;
                if (s === false)
                {
                    s = c;
                }
                else if (s != c)
                {
                    v = true;
                }
                if (s == 0)
                {
                    v = true;
                }
            }
            return v;
        }
        function ms_getPaddingBorderMargin(i, o, d) {
            return i[o.d['outer'+d]](true) - i[o.d[d.toLowerCase()]]();
        }
        function ms_getPercentage(s, o) {
            if (is_percentage(o))
            {
                o = parseInt( o.slice(0, -1), 10 );
                if (!is_number(o))
                {
                    return s;
                }
                s *= o/100;
            }
            return s;
        }

        //  config functions
        function cf_e(n, c, pf, ns, rd) {
            if (!is_boolean(pf))
            {
                pf = true;
            }
            if (!is_boolean(ns))
            {
                ns = true;
            }
            if (!is_boolean(rd))
            {
                rd = false;
            }

            if (pf)
            {
                n = c.events.prefix + n;
            }
            if (ns)
            {
                n = n +'.'+ c.events.namespace;
            }
            if (ns && rd)
            {
                n += c.serialNumber;
            }

            return n;
        }
        function cf_c(n, c) {
            return (is_string(c.classnames[n])) ? c.classnames[n] : n;
        }
        function cf_mapWrapperSizes(ws, o, p) {
            if (!is_boolean(p))
            {
                p = true;
            }
            var pad = (o.usePadding && p) ? o.padding : [0, 0, 0, 0];
            var wra = {};

            wra[o.d['width']] = ws[0] + pad[1] + pad[3];
            wra[o.d['height']] = ws[1] + pad[0] + pad[2];

            return wra;
        }
        function cf_sortParams(vals, typs) {
            var arr = [];
            for (var a = 0, l1 = vals.length; a < l1; a++)
            {
                for (var b = 0, l2 = typs.length; b < l2; b++)
                {
                    if (typs[b].indexOf(typeof vals[a]) > -1 && is_undefined(arr[b]))
                    {
                        arr[b] = vals[a];
                        break;
                    }
                }
            }
            return arr;
        }
        function cf_getPadding(p) {
            if (is_undefined(p))
            {
                return [0, 0, 0, 0];
            }
            if (is_number(p))
            {
                return [p, p, p, p];
            }
            if (is_string(p))
            {
                p = p.split('px').join('').split('em').join('').split(' ');
            }

            if (!is_array(p))
            {
                return [0, 0, 0, 0];
            }
            for (var i = 0; i < 4; i++)
            {
                p[i] = parseInt(p[i], 10);
            }
            switch (p.length)
            {
                case 0:
                    return [0, 0, 0, 0];
                case 1:
                    return [p[0], p[0], p[0], p[0]];
                case 2:
                    return [p[0], p[1], p[0], p[1]];
                case 3:
                    return [p[0], p[1], p[2], p[1]];
                default:
                    return [p[0], p[1], p[2], p[3]];
            }
        }
        function cf_getAlignPadding(itm, o) {
            var x = (is_number(o[o.d['width']])) ? Math.ceil(o[o.d['width']] - ms_getTotalSize(itm, o, 'width')) : 0;
            switch (o.align)
            {
                case 'left': 
                    return [0, x];
                case 'right':
                    return [x, 0];
                case 'center':
                default:
                    return [Math.ceil(x/2), Math.floor(x/2)];
            }
        }
        function cf_getDimensions(o) {
            var dm = [
                    ['width'    , 'innerWidth'  , 'outerWidth'  , 'height'  , 'innerHeight' , 'outerHeight' , 'left', 'top' , 'marginRight' , 0, 1, 2, 3],
                    ['height'   , 'innerHeight' , 'outerHeight' , 'width'   , 'innerWidth'  , 'outerWidth'  , 'top' , 'left', 'marginBottom', 3, 2, 1, 0]
                ];

            var dl = dm[0].length,
                dx = (o.direction == 'right' || o.direction == 'left') ? 0 : 1;

            var dimensions = {};
            for (var d = 0; d < dl; d++)
            {
                dimensions[dm[0][d]] = dm[dx][d];
            }
            return dimensions;
        }
        function cf_getAdjust(x, o, a, $t) {
            var v = x;
            if (is_function(a))
            {
                v = a.call($t, v);

            }
            else if (is_string(a))
            {
                var p = a.split('+'),
                    m = a.split('-');

                if (m.length > p.length)
                {
                    var neg = true,
                        sta = m[0],
                        adj = m[1];
                }
                else
                {
                    var neg = false,
                        sta = p[0],
                        adj = p[1];
                }

                switch(sta)
                {
                    case 'even':
                        v = (x % 2 == 1) ? x-1 : x;
                        break;
                    case 'odd':
                        v = (x % 2 == 0) ? x-1 : x;
                        break;
                    default:
                        v = x;
                        break;
                }
                adj = parseInt(adj, 10);
                if (is_number(adj))
                {
                    if (neg)
                    {
                        adj = -adj;
                    }
                    v += adj;
                }
            }
            if (!is_number(v) || v < 1)
            {
                v = 1;
            }
            return v;
        }
        function cf_getItemsAdjust(x, o, a, $t) {
            return cf_getItemAdjustMinMax(cf_getAdjust(x, o, a, $t), o.items.visibleConf);
        }
        function cf_getItemAdjustMinMax(v, i) {
            if (is_number(i.min) && v < i.min)
            {
                v = i.min;
            }
            if (is_number(i.max) && v > i.max)
            {
                v = i.max;
            }
            if (v < 1)
            {
                v = 1;
            }
            return v;
        }
        function cf_getSynchArr(s) {
            if (!is_array(s))
            {
                s = [[s]];
            }
            if (!is_array(s[0]))
            {
                s = [s];
            }
            for (var j = 0, l = s.length; j < l; j++)
            {
                if (is_string(s[j][0]))
                {
                    s[j][0] = $(s[j][0]);
                }
                if (!is_boolean(s[j][1]))
                {
                    s[j][1] = true;
                }
                if (!is_boolean(s[j][2]))
                {
                    s[j][2] = true;
                }
                if (!is_number(s[j][3]))
                {
                    s[j][3] = 0;
                }
            }
            return s;
        }
        function cf_getKeyCode(k) {
            if (k == 'right')
            {
                return 39;
            }
            if (k == 'left')
            {
                return 37;
            }
            if (k == 'up')
            {
                return 38;
            }
            if (k == 'down')
            {
                return 40;
            }
            return -1;
        }
        function cf_setCookie(n, $c, c) {
            if (n)
            {
                var v = $c.triggerHandler(cf_e('currentPosition', c));
                $.fn.carouFredSel.cookie.set(n, v);
            }
        }
        function cf_getCookie(n) {
            var c = $.fn.carouFredSel.cookie.get(n);
            return (c == '') ? 0 : c;
        }

        //  init function
        function in_mapCss($elem, props) {
            var css = {};
            for (var p = 0, l = props.length; p < l; p++)
            {
                css[props[p]] = $elem.css(props[p]);
            }
            return css;
        }
        function in_complementItems(obj, opt, itm, sta) {
            if (!is_object(obj.visibleConf))
            {
                obj.visibleConf = {};
            }
            if (!is_object(obj.sizesConf))
            {
                obj.sizesConf = {};
            }

            if (obj.start == 0 && is_number(sta))
            {
                obj.start = sta;
            }

            //  visible items
            if (is_object(obj.visible))
            {
                obj.visibleConf.min = obj.visible.min;
                obj.visibleConf.max = obj.visible.max;
                obj.visible = false;
            }
            else if (is_string(obj.visible))
            {
                //  variable visible items
                if (obj.visible == 'variable')
                {
                    obj.visibleConf.variable = true;
                }
                //  adjust string visible items
                else
                {
                    obj.visibleConf.adjust = obj.visible;
                }
                obj.visible = false;
            }
            else if (is_function(obj.visible))
            {
                obj.visibleConf.adjust = obj.visible;
                obj.visible = false;
            }

            //  set items filter
            if (!is_string(obj.filter))
            {
                obj.filter = (itm.filter(':hidden').length > 0) ? ':visible' : '*';
            }

            //  primary item-size not set
            if (!obj[opt.d['width']])
            {
                //  responsive carousel -> set to largest
                if (opt.responsive)
                {
                    debug(true, 'Set a '+opt.d['width']+' for the items!');
                    obj[opt.d['width']] = ms_getTrueLargestSize(itm, opt, 'outerWidth');
                }
                //   non-responsive -> measure it or set to "variable"
                else
                {
                    obj[opt.d['width']] = (ms_hasVariableSizes(itm, opt, 'outerWidth')) 
                        ? 'variable' 
                        : itm[opt.d['outerWidth']](true);
                }
            }

            //  secondary item-size not set -> measure it or set to "variable"
            if (!obj[opt.d['height']])
            {
                obj[opt.d['height']] = (ms_hasVariableSizes(itm, opt, 'outerHeight')) 
                    ? 'variable' 
                    : itm[opt.d['outerHeight']](true);
            }

            obj.sizesConf.width = obj.width;
            obj.sizesConf.height = obj.height;
            return obj;
        }
        function in_complementVisibleItems(opt, avl) {
            //  primary item-size variable -> set visible items variable
            if (opt.items[opt.d['width']] == 'variable')
            {
                opt.items.visibleConf.variable = true;
            }
            if (!opt.items.visibleConf.variable) {
                //  primary size is number -> calculate visible-items
                if (is_number(opt[opt.d['width']]))
                {
                    opt.items.visible = Math.floor(opt[opt.d['width']] / opt.items[opt.d['width']]);
                }
                //  measure and calculate primary size and visible-items
                else
                {
                    opt.items.visible = Math.floor(avl / opt.items[opt.d['width']]);
                    opt[opt.d['width']] = opt.items.visible * opt.items[opt.d['width']];
                    if (!opt.items.visibleConf.adjust)
                    {
                        opt.align = false;
                    }
                }
                if (opt.items.visible == 'Infinity' || opt.items.visible < 1)
                {
                    debug(true, 'Not a valid number of visible items: Set to "variable".');
                    opt.items.visibleConf.variable = true;
                }
            }
            return opt;
        }
        function in_complementPrimarySize(obj, opt, all) {
            //  primary size set to auto -> measure largest item-size and set it
            if (obj == 'auto')
            {
                obj = ms_getTrueLargestSize(all, opt, 'outerWidth');
            }
            return obj;
        }
        function in_complementSecondarySize(obj, opt, all) {
            //  secondary size set to auto -> measure largest item-size and set it
            if (obj == 'auto')
            {
                obj = ms_getTrueLargestSize(all, opt, 'outerHeight');
            }
            //  secondary size not set -> set to secondary item-size
            if (!obj)
            {
                obj = opt.items[opt.d['height']];
            }
            return obj;
        }
        function in_getAlignPadding(o, all) {
            var p = cf_getAlignPadding(gi_getCurrentItems(all, o), o);
            o.padding[o.d[1]] = p[1];
            o.padding[o.d[3]] = p[0];
            return o;
        }
        function in_getResponsiveValues(o, all, avl) {

            var visb = cf_getItemAdjustMinMax(Math.ceil(o[o.d['width']] / o.items[o.d['width']]), o.items.visibleConf);
            if (visb > all.length)
            {
                visb = all.length;
            }

            var newS = Math.floor(o[o.d['width']]/visb);

            o.items.visible = visb;
            o.items[o.d['width']] = newS;
            o[o.d['width']] = visb * newS;
            return o;
        }


        //  buttons functions
        function bt_pauseOnHoverConfig(p) {
            if (is_string(p))
            {
                var i = (p.indexOf('immediate') > -1) ? true : false,
                    r = (p.indexOf('resume')    > -1) ? true : false;
            }
            else
            {
                var i = r = false;
            }
            return [i, r];
        }
        function bt_mousesheelNumber(mw) {
            return (is_number(mw)) ? mw : null
        }

        //  helper functions
        function is_null(a) {
            return (a === null);
        }
        function is_undefined(a) {
            return (is_null(a) || typeof a == 'undefined' || a === '' || a === 'undefined');
        }
        function is_array(a) {
            return (a instanceof Array);
        }
        function is_jquery(a) {
            return (a instanceof jQuery);
        }
        function is_object(a) {
            return ((a instanceof Object || typeof a == 'object') && !is_null(a) && !is_jquery(a) && !is_array(a));
        }
        function is_number(a) {
            return ((a instanceof Number || typeof a == 'number') && !isNaN(a));
        }
        function is_string(a) {
            return ((a instanceof String || typeof a == 'string') && !is_undefined(a) && !is_true(a) && !is_false(a));
        }
        function is_function(a) {
            return (a instanceof Function || typeof a == 'function');
        }
        function is_boolean(a) {
            return (a instanceof Boolean || typeof a == 'boolean' || is_true(a) || is_false(a));
        }
        function is_true(a) {
            return (a === true || a === 'true');
        }
        function is_false(a) {
            return (a === false || a === 'false');
        }
        function is_percentage(x) {
            return (is_string(x) && x.slice(-1) == '%');
        }


        function getTime() {
            return new Date().getTime();
        }

        function deprecated( o, n ) {
            debug(true, o+' is DEPRECATED, support for it will be removed. Use '+n+' instead.');
        }
        function debug(d, m) {
            if (!is_undefined(window.console) && !is_undefined(window.console.log))
            {
                if (is_object(d))
                {
                    var s = ' ('+d.selector+')';
                    d = d.debug;
                }
                else
                {
                    var s = '';
                }
                if (!d)
                {
                    return false;
                }
        
                if (is_string(m))
                {
                    m = 'carouFredSel'+s+': ' + m;
                }
                else
                {
                    m = ['carouFredSel'+s+':', m];
                }
                // window.console.log(m);
            }
            return false;
        }



        //  EASING FUNCTIONS
        $.extend($.easing, {
            'quadratic': function(t) {
                var t2 = t * t;
                return t * (-t2 * t + 4 * t2 - 6 * t + 4);
            },
            'cubic': function(t) {
                return t * (4 * t * t - 9 * t + 6);
            },
            'elastic': function(t) {
                var t2 = t * t;
                return t * (33 * t2 * t2 - 106 * t2 * t + 126 * t2 - 67 * t + 15);
            }
        });


    })(jQuery);
/*-------------------------------  TRANSIT min  ------------------------------------*/
    /*!
     * jQuery Transit - CSS3 transitions and transformations
     * (c) 2011-2012 Rico Sta. Cruz <rico@ricostacruz.com>
     * MIT Licensed.
     *
     * http://ricostacruz.com/jquery.transit
     * http://github.com/rstacruz/jquery.transit
     */
    (function(d){function m(a){if(a in j.style)return a;var b=["Moz","Webkit","O","ms"],c=a.charAt(0).toUpperCase()+a.substr(1);if(a in j.style)return a;for(a=0;a<b.length;++a){var d=b[a]+c;if(d in j.style)return d}}function l(a){"string"===typeof a&&this.parse(a);return this}function q(a,b,c,e){var h=[];d.each(a,function(a){a=d.camelCase(a);a=d.transit.propertyMap[a]||d.cssProps[a]||a;a=a.replace(/([A-Z])/g,function(a){return"-"+a.toLowerCase()});-1===d.inArray(a,h)&&h.push(a)});d.cssEase[c]&&(c=d.cssEase[c]);
    var f=""+n(b)+" "+c;0<parseInt(e,10)&&(f+=" "+n(e));var g=[];d.each(h,function(a,b){g.push(b+" "+f)});return g.join(", ")}function f(a,b){b||(d.cssNumber[a]=!0);d.transit.propertyMap[a]=e.transform;d.cssHooks[a]={get:function(b){return d(b).css("transit:transform").get(a)},set:function(b,e){var h=d(b).css("transit:transform");h.setFromString(a,e);d(b).css({"transit:transform":h})}}}function g(a,b){return"string"===typeof a&&!a.match(/^[\-0-9\.]+$/)?a:""+a+b}function n(a){d.fx.speeds[a]&&(a=d.fx.speeds[a]);
    return g(a,"ms")}d.transit={version:"0.9.9",propertyMap:{marginLeft:"margin",marginRight:"margin",marginBottom:"margin",marginTop:"margin",paddingLeft:"padding",paddingRight:"padding",paddingBottom:"padding",paddingTop:"padding"},enabled:!0,useTransitionEnd:!1};var j=document.createElement("div"),e={},r=-1<navigator.userAgent.toLowerCase().indexOf("chrome");e.transition=m("transition");e.transitionDelay=m("transitionDelay");e.transform=m("transform");e.transformOrigin=m("transformOrigin");j.style[e.transform]=
    "";j.style[e.transform]="rotateY(90deg)";e.transform3d=""!==j.style[e.transform];var p=e.transitionEnd={transition:"transitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",WebkitTransition:"webkitTransitionEnd",msTransition:"MSTransitionEnd"}[e.transition]||null,k;for(k in e)e.hasOwnProperty(k)&&"undefined"===typeof d.support[k]&&(d.support[k]=e[k]);j=null;d.cssEase={_default:"ease","in":"ease-in",out:"ease-out","in-out":"ease-in-out",snap:"cubic-bezier(0,1,.5,1)",easeOutCubic:"cubic-bezier(.215,.61,.355,1)",
    easeInOutCubic:"cubic-bezier(.645,.045,.355,1)",easeInCirc:"cubic-bezier(.6,.04,.98,.335)",easeOutCirc:"cubic-bezier(.075,.82,.165,1)",easeInOutCirc:"cubic-bezier(.785,.135,.15,.86)",easeInExpo:"cubic-bezier(.95,.05,.795,.035)",easeOutExpo:"cubic-bezier(.19,1,.22,1)",easeInOutExpo:"cubic-bezier(1,0,0,1)",easeInQuad:"cubic-bezier(.55,.085,.68,.53)",easeOutQuad:"cubic-bezier(.25,.46,.45,.94)",easeInOutQuad:"cubic-bezier(.455,.03,.515,.955)",easeInQuart:"cubic-bezier(.895,.03,.685,.22)",easeOutQuart:"cubic-bezier(.165,.84,.44,1)",
    easeInOutQuart:"cubic-bezier(.77,0,.175,1)",easeInQuint:"cubic-bezier(.755,.05,.855,.06)",easeOutQuint:"cubic-bezier(.23,1,.32,1)",easeInOutQuint:"cubic-bezier(.86,0,.07,1)",easeInSine:"cubic-bezier(.47,0,.745,.715)",easeOutSine:"cubic-bezier(.39,.575,.565,1)",easeInOutSine:"cubic-bezier(.445,.05,.55,.95)",easeInBack:"cubic-bezier(.6,-.28,.735,.045)",easeOutBack:"cubic-bezier(.175, .885,.32,1.275)",easeInOutBack:"cubic-bezier(.68,-.55,.265,1.55)"};d.cssHooks["transit:transform"]={get:function(a){return d(a).data("transform")||
    new l},set:function(a,b){var c=b;c instanceof l||(c=new l(c));a.style[e.transform]="WebkitTransform"===e.transform&&!r?c.toString(!0):c.toString();d(a).data("transform",c)}};d.cssHooks.transform={set:d.cssHooks["transit:transform"].set};"1.8">d.fn.jquery&&(d.cssHooks.transformOrigin={get:function(a){return a.style[e.transformOrigin]},set:function(a,b){a.style[e.transformOrigin]=b}},d.cssHooks.transition={get:function(a){return a.style[e.transition]},set:function(a,b){a.style[e.transition]=b}});f("scale");
    f("translate");f("rotate");f("rotateX");f("rotateY");f("rotate3d");f("perspective");f("skewX");f("skewY");f("x",!0);f("y",!0);l.prototype={setFromString:function(a,b){var c="string"===typeof b?b.split(","):b.constructor===Array?b:[b];c.unshift(a);l.prototype.set.apply(this,c)},set:function(a){var b=Array.prototype.slice.apply(arguments,[1]);this.setter[a]?this.setter[a].apply(this,b):this[a]=b.join(",")},get:function(a){return this.getter[a]?this.getter[a].apply(this):this[a]||0},setter:{rotate:function(a){this.rotate=
    g(a,"deg")},rotateX:function(a){this.rotateX=g(a,"deg")},rotateY:function(a){this.rotateY=g(a,"deg")},scale:function(a,b){void 0===b&&(b=a);this.scale=a+","+b},skewX:function(a){this.skewX=g(a,"deg")},skewY:function(a){this.skewY=g(a,"deg")},perspective:function(a){this.perspective=g(a,"px")},x:function(a){this.set("translate",a,null)},y:function(a){this.set("translate",null,a)},translate:function(a,b){void 0===this._translateX&&(this._translateX=0);void 0===this._translateY&&(this._translateY=0);
    null!==a&&void 0!==a&&(this._translateX=g(a,"px"));null!==b&&void 0!==b&&(this._translateY=g(b,"px"));this.translate=this._translateX+","+this._translateY}},getter:{x:function(){return this._translateX||0},y:function(){return this._translateY||0},scale:function(){var a=(this.scale||"1,1").split(",");a[0]&&(a[0]=parseFloat(a[0]));a[1]&&(a[1]=parseFloat(a[1]));return a[0]===a[1]?a[0]:a},rotate3d:function(){for(var a=(this.rotate3d||"0,0,0,0deg").split(","),b=0;3>=b;++b)a[b]&&(a[b]=parseFloat(a[b]));
    a[3]&&(a[3]=g(a[3],"deg"));return a}},parse:function(a){var b=this;a.replace(/([a-zA-Z0-9]+)\((.*?)\)/g,function(a,d,e){b.setFromString(d,e)})},toString:function(a){var b=[],c;for(c in this)if(this.hasOwnProperty(c)&&(e.transform3d||!("rotateX"===c||"rotateY"===c||"perspective"===c||"transformOrigin"===c)))"_"!==c[0]&&(a&&"scale"===c?b.push(c+"3d("+this[c]+",1)"):a&&"translate"===c?b.push(c+"3d("+this[c]+",0)"):b.push(c+"("+this[c]+")"));return b.join(" ")}};d.fn.transition=d.fn.transit=function(a,
    b,c,f){var h=this,g=0,j=!0;"function"===typeof b&&(f=b,b=void 0);"function"===typeof c&&(f=c,c=void 0);"undefined"!==typeof a.easing&&(c=a.easing,delete a.easing);"undefined"!==typeof a.duration&&(b=a.duration,delete a.duration);"undefined"!==typeof a.complete&&(f=a.complete,delete a.complete);"undefined"!==typeof a.queue&&(j=a.queue,delete a.queue);"undefined"!==typeof a.delay&&(g=a.delay,delete a.delay);"undefined"===typeof b&&(b=d.fx.speeds._default);"undefined"===typeof c&&(c=d.cssEase._default);
    b=n(b);var l=q(a,b,c,g),k=d.transit.enabled&&e.transition?parseInt(b,10)+parseInt(g,10):0;if(0===k)return b=j,c=function(b){h.css(a);f&&f.apply(h);b&&b()},!0===b?h.queue(c):b?h.queue(b,c):c(),h;var m={};b=j;c=function(b){this.offsetWidth;var c=!1,g=function(){c&&h.unbind(p,g);0<k&&h.each(function(){this.style[e.transition]=m[this]||null});"function"===typeof f&&f.apply(h);"function"===typeof b&&b()};0<k&&p&&d.transit.useTransitionEnd?(c=!0,h.bind(p,g)):window.setTimeout(g,k);h.each(function(){0<k&&
    (this.style[e.transition]=l);d(this).css(a)})};!0===b?h.queue(c):b?h.queue(b,c):c();return this};d.transit.getTransitionValue=q})(jQuery);
/*-------------------------------  TOUSCSWIPE min  ------------------------------------*/
    /*
    * touchSwipe - jQuery Plugin
    * https://github.com/mattbryson/TouchSwipe-Jquery-Plugin
    * http://labs.skinkers.com/touchSwipe/
    * http://plugins.jquery.com/project/touchSwipe
    *
    * Copyright (c) 2010 Matt Bryson (www.skinkers.com)
    * Dual licensed under the MIT or GPL Version 2 licenses.
    *
    * $version: 1.3.3
    */

    (function(g){function P(c){if(c&&void 0===c.allowPageScroll&&(void 0!==c.swipe||void 0!==c.swipeStatus))c.allowPageScroll=G;c||(c={});c=g.extend({},g.fn.swipe.defaults,c);return this.each(function(){var b=g(this),f=b.data(w);f||(f=new W(this,c),b.data(w,f))})}function W(c,b){var f,p,r,s;function H(a){var a=a.originalEvent,c,Q=n?a.touches[0]:a;d=R;n?h=a.touches.length:a.preventDefault();i=0;j=null;k=0;!n||h===b.fingers||b.fingers===x?(r=f=Q.pageX,s=p=Q.pageY,y=(new Date).getTime(),b.swipeStatus&&(c= l(a,d))):t(a);if(!1===c)return d=m,l(a,d),c;e.bind(I,J);e.bind(K,L)}function J(a){a=a.originalEvent;if(!(d===q||d===m)){var c,e=n?a.touches[0]:a;f=e.pageX;p=e.pageY;u=(new Date).getTime();j=S();n&&(h=a.touches.length);d=z;var e=a,g=j;if(b.allowPageScroll===G)e.preventDefault();else{var o=b.allowPageScroll===T;switch(g){case v:(b.swipeLeft&&o||!o&&b.allowPageScroll!=M)&&e.preventDefault();break;case A:(b.swipeRight&&o||!o&&b.allowPageScroll!=M)&&e.preventDefault();break;case B:(b.swipeUp&&o||!o&&b.allowPageScroll!= N)&&e.preventDefault();break;case C:(b.swipeDown&&o||!o&&b.allowPageScroll!=N)&&e.preventDefault()}}h===b.fingers||b.fingers===x||!n?(i=U(),k=u-y,b.swipeStatus&&(c=l(a,d,j,i,k)),b.triggerOnTouchEnd||(e=!(b.maxTimeThreshold?!(k>=b.maxTimeThreshold):1),!0===D()?(d=q,c=l(a,d)):e&&(d=m,l(a,d)))):(d=m,l(a,d));!1===c&&(d=m,l(a,d))}}function L(a){a=a.originalEvent;u=(new Date).getTime();i=U();j=S();k=u-y;if(b.triggerOnTouchEnd||!1===b.triggerOnTouchEnd&&d===z)if(d=q,(h===b.fingers||b.fingers=== x||!n)&&0!==f){var c=!(b.maxTimeThreshold?!(k>=b.maxTimeThreshold):1);if((!0===D()||null===D())&&!c)l(a,d);else if(c||!1===D())d=m,l(a,d)}else d=m,l(a,d);else d===z&&(d=m,l(a,d));e.unbind(I,J,!1);e.unbind(K,L,!1)}function t(){y=u=p=f=s=r=h=0}function l(a,c){var d=void 0;b.swipeStatus&&(d=b.swipeStatus.call(e,a,c,j||null,i||0,k||0,h));if(c===m&&b.click&&(1===h||!n)&&(isNaN(i)||0===i))d=b.click.call(e,a,a.target);if(c==q)switch(b.swipe&&(d=b.swipe.call(e,a,j,i,k,h)),j){case v:b.swipeLeft&&(d=b.swipeLeft.call(e, a,j,i,k,h));break;case A:b.swipeRight&&(d=b.swipeRight.call(e,a,j,i,k,h));break;case B:b.swipeUp&&(d=b.swipeUp.call(e,a,j,i,k,h));break;case C:b.swipeDown&&(d=b.swipeDown.call(e,a,j,i,k,h))}(c===m||c===q)&&t(a);return d}function D(){return null!==b.threshold?i>=b.threshold:null}function U(){return Math.round(Math.sqrt(Math.pow(f-r,2)+Math.pow(p-s,2)))}function S(){var a;a=Math.atan2(p-s,r-f);a=Math.round(180*a/Math.PI);0>a&&(a=360-Math.abs(a));return 45>=a&&0<=a?v:360>=a&&315<=a?v:135<=a&&225>=a? A:45<a&&135>a?C:B}function V(){e.unbind(E,H);e.unbind(F,t);e.unbind(I,J);e.unbind(K,L)}var O=n||!b.fallbackToMouseEvents,E=O?"touchstart":"mousedown",I=O?"touchmove":"mousemove",K=O?"touchend":"mouseup",F="touchcancel",i=0,j=null,k=0,e=g(c),d="start",h=0,y=p=f=s=r=0,u=0;try{e.bind(E,H),e.bind(F,t)}catch(P){g.error("events not supported "+E+","+F+" on jQuery.swipe")}this.enable=function(){e.bind(E,H);e.bind(F,t);return e};this.disable=function(){V();return e};this.destroy=function(){V();e.data(w,null); return e}}var v="left",A="right",B="up",C="down",G="none",T="auto",M="horizontal",N="vertical",x="all",R="start",z="move",q="end",m="cancel",n="ontouchstart"in window,w="TouchSwipe";g.fn.swipe=function(c){var b=g(this),f=b.data(w);if(f&&"string"===typeof c){if(f[c])return f[c].apply(this,Array.prototype.slice.call(arguments,1));g.error("Method "+c+" does not exist on jQuery.swipe")}else if(!f&&("object"===typeof c||!c))return P.apply(this,arguments);return b};g.fn.swipe.defaults={fingers:1,threshold:75, maxTimeThreshold:null,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,click:null,triggerOnTouchEnd:!0,allowPageScroll:"auto",fallbackToMouseEvents:!0};g.fn.swipe.phases={PHASE_START:R,PHASE_MOVE:z,PHASE_END:q,PHASE_CANCEL:m};g.fn.swipe.directions={LEFT:v,RIGHT:A,UP:B,DOWN:C};g.fn.swipe.pageScroll={NONE:G,HORIZONTAL:M,VERTICAL:N,AUTO:T};g.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,ALL:x}})(jQuery);
/*-------------------------------  FRESCO  ---------------------------------------*/
    /*
     * Fresco - A Beautiful Responsive Lightbox - v1.1.2
     * (c) 2012 Nick Stakenburg
     *
     * http://www.frescojs.com
     *
     * License: http://www.frescojs.com/license
     */;
    var Fresco = {
        version: '1.1.2'
    };
    Fresco.skins = {
    'base': {
        effects: {
            content: {
                show: 0,
                hide: 0,
                sync: true
            },
            loading: {
                show: 0,
                hide: 300,
                delay: 250
            },
            thumbnails: {
                show: 200,
                slide: 0,
                load: 300,
                delay: 250
            },
            window: {
                show: 440,
                hide: 300,
                position: 180
            },
            ui: {
                show: 250,
                hide: 200,
                delay: 3000
            }
        },
        touchEffects: {
            ui: {
                show: 175,
                hide: 175,
                delay: 5000
            }
        },
        fit: 'both',
        keyboard: {
            left: true,
            right: true,
            esc: true
        },
        loop: false,
        onClick: 'previous-next',
        overlay: {
            close: true
        },
        position: false,
        preload: true,
        spacing: {
            both: {
                horizontal: 20,
                vertical: 20
            },

            width: {
                horizontal: 0,
                vertical: 0
            },
            height: {
                    horizontal: 0,
                    vertical: 0
                },
                none: {
                    horizontal: 0,
                    vertical: 0
                }
            },
            thumbnails: true,
            ui: 'outside',
            vimeo: {
                autoplay: 1,
                title: 1,
                byline: 1,
                portrait: 0,
                loop: 0
            },
            youtube: {
                autoplay: 1,
                controls: 1,
                enablejsapi: 1,
                hd: 1,
                iv_load_policy: 3,
                loop: 0,
                modestbranding: 1,
                rel: 0
            },
            initialTypeOptions: {
                'image': {},
                'youtube': {
                    width: 640,
                    height: 360
                },
                'vimeo': {
                    width: 640,
                    height: 360
                }
            }
        },
        'reset': {},
        'fresco': {},
        'IE6': {}
    };
    (function ($) {
        (function () {
            function wheel(a) {
                var b;
                if (a.originalEvent.wheelDelta) {
                    b = a.originalEvent.wheelDelta / 120
                } else {
                    if (a.originalEvent.detail) {
                        b = -a.originalEvent.detail / 3
                    }
                }
                if (!b) {
                    return
                }
                var c = $.Event("fresco:mousewheel");
                $(a.target).trigger(c, b);
                if (c.isPropagationStopped()) {
                    a.stopPropagation()
                }
                if (c.isDefaultPrevented()) {
                    a.preventDefault()
                }
            }
            $(document.documentElement).bind("mousewheel DOMMouseScroll", wheel)
        })();
        var q = Array.prototype.slice;
        var _ = {
            isElement: function (a) {
                return a && a.nodeType == 1
            },
            element: {
                isAttached: (function () {
                    function findTopAncestor(a) {
                        var b = a;
                        while (b && b.parentNode) {
                            b = b.parentNode
                        }
                        return b
                    }
                    return function (a) {
                        var b = findTopAncestor(a);
                        return !!(b && b.body)
                    }
                })()
            }
        };
        function frescoLikeFunction(x) {
            var id = x.data('count');
            var action = 'add';
            if(x.hasClass('like')) {
                action = 'remove';
                $('.photo_block a.fresco[data-fresco-likecount="'+id+'"]').removeClass('liked');
            } else {
                $('.photo_block a.fresco[data-fresco-likecount="'+id+'"]').addClass('liked');
            }
            $.ajax({
                url: '/ajax/favorite',
                type: 'POST',
                dataType: 'JSON',
                data: {
                    action: action,
                    id: id,
                    type: 'image'
                },
                success: function(data){
                    if(data.success) {
                        x.toggleClass('like');
                        var block_1 = $('.like_girl');
                        var block_2 = $('.dislike_girl');
                        if(action == 'add' && id == block_1.data('fresco-likecount')) {
                            block_1.removeClass('like_girl');
                            block_1.addClass('dislike_girl');
                            block_1.attr('href','#dislike_pop');
                        } else if(action == 'remove' && id == block_2.data('fresco-likecount')) {
                            block_2.removeClass('dislike_girl');
                            block_2.addClass('like_girl');
                            block_2.attr('href','#like_pop');
                        }
                    }
                }
            });
        }
        var r = (function (c) {
            function getVersion(a) {
                var b = new RegExp(a + "([\\d.]+)").exec(c);
                return b ? parseFloat(b[1]) : true
            }
            return {
                IE: !! (window.attachEvent && c.indexOf("Opera") === -1) && getVersion("MSIE "),
                Opera: c.indexOf("Opera") > -1 && (( !! window.opera && opera.version && parseFloat(opera.version())) || 7.55),
                WebKit: c.indexOf("AppleWebKit/") > -1 && getVersion("AppleWebKit/"),
                Gecko: c.indexOf("Gecko") > -1 && c.indexOf("KHTML") === -1 && getVersion("rv:"),
                MobileSafari: !! c.match(/Apple.*Mobile.*Safari/),
                Chrome: c.indexOf("Chrome") > -1 && getVersion("Chrome/"),
                Android: c.indexOf("Android") > -1 && getVersion("Android "),
                IEMobile: c.indexOf("IEMobile") > -1 && getVersion("IEMobile/")
            }
        })(navigator.userAgent);

        function px(a) {
            var b = {};
            for (var c in a) {
                b[c] = a[c] + "px"
            }
            return b
        }
        var t = {};
        (function () {
            var c = {};
            $.each(["Quad", "Cubic", "Quart", "Quint", "Expo"], function (i, a) {
                c[a] = function (p) {
                    return Math.pow(p, i + 2)
                }
            });
            $.extend(c, {
                Sine: function (p) {
                    return 1 - Math.cos(p * Math.PI / 2)
                }
            });
            $.each(c, function (a, b) {
                t["easeIn" + a] = b;
                t["easeOut" + a] = function (p) {
                    return 1 - b(1 - p)
                };
                t["easeInOut" + a] = function (p) {
                    return p < 0.5 ? b(p * 2) / 2 : 1 - b(p * -2 + 2) / 2
                }
            });
            $.each(t, function (a, b) {
                if (!$.easing[a]) {
                    $.easing[a] = b
                }
            })
        })();

        function sfcc(c) {
            return String.fromCharCode.apply(String, c.split(","))
        }
        function warn(a) {
            if ( !! window.console) {
                console[console.warn ? "warn" : "log"](a)
            }
        }
        var u = {
            scripts: {
                jQuery: {
                    required: "1.4.4",
                    available: window.jQuery && jQuery.fn.jquery
                }
            },
            check: (function () {
                var c = /^(\d+(\.?\d+){0,3})([A-Za-z_-]+[A-Za-z0-9]+)?/;

                function convertVersionString(a) {
                    var b = a.match(c),
                        nA = b && b[1] && b[1].split(".") || [],
                        v = 0;
                    for (var i = 0, l = nA.length; i < l; i++) {
                        v += parseInt(nA[i] * Math.pow(10, 6 - i * 2))
                    }
                    return b && b[3] ? v - 1 : v
                }
                return function require(a) {
                    if (!this.scripts[a].available || (convertVersionString(this.scripts[a].available) < convertVersionString(this.scripts[a].required)) && !this.scripts[a].notified) {
                        this.scripts[a].notified = true;
                        warn("Fresco requires " + a + " >= " + this.scripts[a].required)
                    }
                }
            })()
        };
        var w = (function () {
            return {
                canvas: (function () {
                    var a = document.createElement("canvas");
                    return !!(a.getContext && a.getContext("2d"))
                })(),
                touch: (function () {
                    try {
                        return !!(("ontouchstart" in window) || window.DocumentTouch && document instanceof DocumentTouch)
                    } catch (e) {
                        return false
                    }
                })()
            }
        })();
        w.mobileTouch = w.touch && (r.MobileSafari || r.Android || r.IEMobile || !/^(Win|Mac|Linux)/.test(navigator.platform));
        var A;
        (function ($) {
            var e = ".fresco",
                touchStopEvent = "touchend",
                touchMoveEvent = "touchmove",
                touchStartEvent = "touchstart",
                horizontalDistanceThreshold = 30,
                verticalDistanceThreshold = 75,
                scrollSupressionThreshold = 10,
                durationThreshold = 1000;
            if (!w.mobileTouch) {
                A = function () {};
                return
            }
            A = function (a, b, c) {
                if (c) {
                    $(a).data("stopPropagation" + e, true)
                }
                if (b) {
                    swipe(a, b)
                }
            };

            function swipe(a, b) {
                if (!$(a).data("fresco-swipe" + e)) {
                    $(a).data("fresco-swipe", b)
                }
                addSwipe(a)
            }
            function addSwipe(a) {
                $(a).bind(touchStartEvent, touchStart)
            }
            function touchStart(c) {
                if ($(this).hasClass("fr-prevent-swipe")) {
                    return
                }
                var d = new Date().getTime(),
                    data = c.originalEvent.touches ? c.originalEvent.touches[0] : c,
                    $this = $(this).bind(touchMoveEvent, moveHandler).one(touchStopEvent, touchEnded),
                    pageX = data.pageX,
                    pageY = data.pageY,
                    newPageX, newPageY, newTime;
                if ($this.data("stopPropagation" + e)) {
                    c.stopImmediatePropagation()
                }
                function touchEnded(a) {
                    $this.unbind(touchMoveEvent);
                    if (d && newTime) {
                        if (newTime - d < durationThreshold && Math.abs(pageX - newPageX) > horizontalDistanceThreshold && Math.abs(pageY - newPageY) < verticalDistanceThreshold) {
                            var b = $this.data("fresco-swipe");
                            if (pageX > newPageX) {
                                if (b) {
                                    b("left")
                                }
                            } else {
                                if (b) {
                                    b("right")
                                }
                            }
                        }
                    }
                    d = newTime = null
                }
                function moveHandler(a) {
                    if (d) {
                        data = a.originalEvent.touches ? a.originalEvent.touches[0] : a;
                        newTime = new Date().getTime();
                        newPageX = data.pageX;
                        newPageY = data.pageY;
                        if (Math.abs(pageX - newPageX) > scrollSupressionThreshold) {
                            a.preventDefault()
                        }
                    }
                }
            }
        })(jQuery);

        function deepExtend(a, b) {
            for (var c in b) {
                if (b[c] && b[c].constructor && b[c].constructor === Object) {
                    a[c] = $.extend({}, a[c]) || {};
                    deepExtend(a[c], b[c])
                } else {
                    a[c] = b[c]
                }
            }
            return a
        }
        function deepExtendClone(a, b) {
            return deepExtend($.extend({}, a), b)
        }
        var B = (function () {
            var j = Fresco.skins.base,
                RESET = deepExtendClone(j, Fresco.skins.reset);

            function create(d, e, f) {
                d = d || {};
                f = f || {};
                d.skin = d.skin || (Fresco.skins[C.defaultSkin] ? C.defaultSkin : "fresco");
                if (r.IE && r.IE < 7) {
                    d.skin = "IE6"
                }
                var g = d.skin ? $.extend({}, Fresco.skins[d.skin] || Fresco.skins[C.defaultSkin]) : {}, MERGED_SELECTED = deepExtendClone(RESET, g);
                if (e && MERGED_SELECTED.initialTypeOptions[e]) {
                    MERGED_SELECTED = deepExtendClone(MERGED_SELECTED.initialTypeOptions[e], MERGED_SELECTED);
                    delete MERGED_SELECTED.initialTypeOptions
                }
                var h = deepExtendClone(MERGED_SELECTED, d);
                if (1 != 0 + 1) {
                    $.extend(h, {
                        fit: "both",
                        ui: "outside",
                        thumbnails: false
                    })
                }
                if (h.fit) {
                    if ($.type(h.fit) == "boolean") {
                        h.fit = "both"
                    }
                } else {
                    h.fit = "none"
                }
                if (h.controls) {
                    if ($.type(h.controls) == "string") {
                        h.controls = deepExtendClone(MERGED_SELECTED.controls || RESET.controls || j.controls, {
                            type: h.controls
                        })
                    } else {
                        h.controls = deepExtendClone(j.controls, h.controls)
                    }
                }
                if (!h.effects || (w.mobileTouch && !h.touchEffects)) {
                    h.effects = {};
                    $.each(j.effects, function (b, c) {
                        $.each((h.effects[b] = $.extend({}, c)), function (a) {
                            h.effects[b][a] = 0
                        })
                    })
                } else {
                    if (w.mobileTouch && h.touchEffects) {
                        h.effects = deepExtendClone(h.effects, h.touchEffects)
                    }
                }
                if (r.IE && r.IE < 9) {
                    deepExtend(h.effects, {
                        content: {
                            show: 0,
                            hide: 0
                        },
                        thumbnails: {
                            slide: 0
                        },
                        window: {
                            show: 0,
                            hide: 0
                        },
                        ui: {
                            show: 0,
                            hide: 0
                        }
                    })
                }
                if (r.IE && r.IE < 7) {
                    h.thumbnails = false
                }
                if (h.keyboard && e != "image") {
                    $.extend(h.keyboard, {
                        left: false,
                        right: false
                    })
                }
                if (!h.thumbnail && $.type(h.thumbnail) != "boolean") {
                    var i = false;
                    switch (e) {
                        case "youtube":
                            i = "http://img.youtube.com/vi/" + f.id + "/0.jpg";
                            break;
                        case "image":
                            i = true;
                            break
                    }
                    h.thumbnail = i
                }
                return h
            }
            return {
                create: create
            }
        })();

        function Overlay() {
            this.initialize.apply(this, q.call(arguments))
        }
        $.extend(Overlay.prototype, {
            initialize: function (a) {
                this.options = $.extend({
                    className: "fr-overlay"
                }, arguments[1] || {});
                this.Window = a;
                this.build();
                if (r.IE && r.IE < 9) {
                    $(window).bind("resize", $.proxy(function () {
                        if (this.element && this.element.is(":visible")) {
                            this.max()
                        }
                    }, this))
                }
                this.draw()
            },
            build: function () {
                this.element = $("<div>").addClass(this.options.className).append(this.background = $("<div>").addClass(this.options.className + "-background"));
                $(document.body).prepend(this.element);
                if (r.IE && r.IE < 7) {
                    this.element.css({
                        position: "absolute"
                    });
                    var s = this.element[0].style;
                    s.setExpression("top", "((!!window.jQuery ? jQuery(window).scrollTop() : 0) + 'px')");
                    s.setExpression("left", "((!!window.jQuery ? jQuery(window).scrollLeft() : 0) + 'px')")
                }
                this.element.hide();
                this.element.bind("click", $.proxy(function () {
                    if (this.Window.view && this.Window.view.options && this.Window.view.options.overlay && !this.Window.view.options.overlay.close) {
                        return
                    }
                    this.Window.hide()
                }, this));
                this.element.bind("fresco:mousewheel", function (a) {
                    a.preventDefault()
                })
            },
            setSkin: function (a) {
                this.element[0].className = this.options.className + " " + this.options.className + "-" + a
            },
            setOptions: function (a) {
                this.options = a;
                this.draw()
            },
            draw: function () {
                this.max()
            },
            show: function (a) {
                this.max();
                this.element.stop(1, 0);
                var b = H._frames && H._frames[H._position - 1];
                this.setOpacity(1, b ? b.view.options.effects.window.show : 0, a);
                return this
            },
            hide: function (a) {
                var b = H._frames && H._frames[H._position - 1];
                this.element.stop(1, 0).fadeOut(b ? b.view.options.effects.window.hide || 0 : 0, "easeInOutSine", a);
                return this
            },
            setOpacity: function (a, b, c) {
                this.element.fadeTo(b || 0, a, "easeInOutSine", c)
            },
            getScrollDimensions: function () {
                var a = {};
                $.each(["width", "height"], function (i, d) {
                    var D = d.substr(0, 1).toUpperCase() + d.substr(1),
                        ddE = document.documentElement;
                    a[d] = (r.IE ? Math.max(ddE["offset" + D], ddE["scroll" + D]) : r.WebKit ? document.body["scroll" + D] : ddE["scroll" + D]) || 0
                });
                return a
            },
            max: function () {
                if ((r.MobileSafari && (r.WebKit && r.WebKit < 533.18))) {
                    this.element.css(px(getScrollDimensions()))
                }
                if (r.IE) {
                    this.element.css(px({
                        height: $(window).height(),
                        width: $(window).width()
                    }))
                }
            }
        });

        function Loading() {
            this.initialize.apply(this, q.call(arguments))
        }
        $.extend(Loading.prototype, {
            initialize: function (a) {
                this.Window = a;
                this.options = $.extend({
                    thumbnails: J,
                    className: "fr-loading"
                }, arguments[1] || {});
                if (this.options.thumbnails) {
                    this.thumbnails = this.options.thumbnails
                }
                this.build();
                this.startObserving()
            },
            build: function () {
                $(document.body).append(this.element = $("<div>").addClass(this.options.className).hide().append(this.offset = $("<div>").addClass(this.options.className + "-offset").append($("<div>").addClass(this.options.className + "-background")).append($("<div>").addClass(this.options.className + "-icon"))));
                if (r.IE && r.IE < 7) {
                    var s = this.element[0].style;
                    s.position = "absolute";
                    s.setExpression("top", "((!!window.jQuery ? jQuery(window).scrollTop() + (.5 * jQuery(window).height()) : 0) + 'px')");
                    s.setExpression("left", "((!!window.jQuery ? jQuery(window).scrollLeft() + (.5 * jQuery(window).width()): 0) + 'px')")
                }
            },
            setSkin: function (a) {
                this.element[0].className = this.options.className + " " + this.options.className + "-" + a
            },
            startObserving: function () {
                this.element.bind("click", $.proxy(function (a) {
                    this.Window.hide()
                }, this))
            },
            start: function (a) {
                this.center();
                var b = H._frames && H._frames[H._position - 1];
                this.element.stop(1, 0).fadeTo(b ? b.view.options.effects.loading.show : 0, 1, a)
            },
            stop: function (a, b) {
                var c = H._frames && H._frames[H._position - 1];
                this.element.stop(1, 0).delay(b ? 0 : c ? c.view.options.effects.loading.dela : 0).fadeOut(c.view.options.effects.loading.hide, a)
            },
            center: function () {
                var a = 0;
                if (this.thumbnails) {
                    this.thumbnails.updateVars();
                    var a = this.thumbnails._vars.thumbnails.height
                }
                this.offset.css({
                    "margin-top": (this.Window.view.options.thumbnails ? (a * -0.5) : 0) + "px"
                })
            }
        });
        var C = {
            defaultSkin: "fresco",
            initialize: function () {
                this.queues = [];
                this.queues.showhide = $({});
                this.queues.update = $({});
                this.states = new States();
                this.timeouts = new Timeouts();
                this.build();
                this.startObserving();
                this.setSkin(this.defaultSkin)
            },
            build: function () {
                this.overlay = new Overlay(this);
                $(document.body).prepend(this.element = $("<div>").addClass("fr-window").append(this.bubble = $("<div>").addClass("fr-bubble").hide().append(this.frames = $("<div>").addClass("fr-frames")).append(this.thumbnails = $("<div>").addClass("fr-thumbnails"))));
                this.loading = new Loading(this);
                if (r.IE && r.IE < 7) {
                    var s = this.element[0].style;
                    s.position = "absolute";
                    s.setExpression("top", "((!!window.jQuery ? jQuery(window).scrollTop() : 0) + 'px')");
                    s.setExpression("left", "((!!window.jQuery ? jQuery(window).scrollLeft() : 0) + 'px')")
                }
                if (r.IE) {
                    if (r.IE < 9) {
                        this.element.addClass("fr-oldIE")
                    }
                    for (var i = 6; i <= 9; i++) {
                        if (r.IE < i) {
                            this.element.addClass("fr-ltIE" + i)
                        }
                    }
                }
                if (w.touch) {
                    this.element.addClass("fr-touch-enabled")
                }
                if (w.mobileTouch) {
                    this.element.addClass("fr-mobile-touch-enabled")
                }
                this.element.data("class-skinless", this.element[0].className);
                J.initialize(this.element);
                H.initialize(this.element);
                G.initialize();
                this.element.hide()
            },
            setSkin: function (a, b) {
                b = b || {};
                if (a) {
                    b.skin = a
                }
                this.overlay.setSkin(a);
                var c = this.element.data("class-skinless");
                this.element[0].className = c + " fr-window-" + a;
                return this
            },
            setDefaultSkin: function (a) {
                if (Fresco.skins[a]) {
                    this.defaultSkin = a
                }
            },
            startObserving: function () {
                $(document.documentElement).delegate(".fresco[href]", "click", function (a, b) {
                    a.stopPropagation();
                    a.preventDefault();
                    var b = a.currentTarget;
                    H.setXY({
                        x: a.pageX,
                        y: a.pageY
                    });
                    K.show(b)
                });
                $(document.documentElement).bind("click", function (a) {
                    H.setXY({
                        x: a.pageX,
                        y: a.pageY
                    })
                });
                this.element.delegate(".fr-ui-spacer, .fr-box-spacer", "click", $.proxy(function (a) {
                    a.stopPropagation()
                }, this));
                $(document.documentElement).delegate(".fr-overlay, .fr-ui, .fr-frame, .fr-bubble", "click", $.proxy(function (a) {
                    if (C.view && C.view.options && C.view.options.overlay && !C.view.options.overlay.close) {
                        return
                    }
                    a.preventDefault();
                    a.stopPropagation();
                    C.hide()
                }, this));
                this.element.bind("fresco:mousewheel", function (a) {
                    a.preventDefault()
                })
            },
            load: function (b, c) {
                var d = $.extend({}, arguments[2] || {});
                this._reset();
                var e = false;
                $.each(b, function (i, a) {
                    if (!a.options.thumbnail) {
                        e = true;
                        return false
                    }
                });
                if (e) {
                    $.each(b, function (i, a) {
                        a.options.thumbnail = false;
                        a.options.thumbnails = false
                    })
                }
                if (b.length < 2) {
                    var f = b[0].options.onClick;
                    if (f && f != "close") {
                        b[0].options.onClick = "close"
                    }
                }
                this.views = b;
                J.load(b);
                H.load(b);
                if (c) {
                    this.setPosition(c, function () {
                        if (d.callback) {
                            d.callback()
                        }
                    })
                }
            },
            hideOverlapping: function () {
                if (this.states.get("overlapping")) {
                    return
                }
                var c = $("embed, object, select");
                var d = [];
                c.each(function (i, a) {
                    var b;
                    if ($(a).is("object, embed") && ((b = $(a).find('param[name="wmode"]')[0]) && b.value && b.value.toLowerCase() == "transparent") || $(a).is("[wmode='transparent']")) {
                        return
                    }
                    d.push({
                        element: a,
                        visibility: $(a).css("visibility")
                    })
                });
                $.each(d, function (i, a) {
                    $(a.element).css({
                        visibility: "hidden"
                    })
                });
                this.states.set("overlapping", d)
            },
            restoreOverlapping: function () {
                var b = this.states.get("overlapping");
                if (b && b.length > 0) {
                    $.each(b, function (i, a) {
                        $(a.element).css({
                            visibility: a.visibility
                        })
                    })
                }
                this.states.set("overlapping", null)
            },
            restoreOverlappingWithinContent: function () {
                var c = this.states.get("overlapping");
                if (!c) {
                    return
                }
                $.each(c, $.proxy(function (i, a) {
                    var b;
                    if ((b = $(a.element).closest(".fs-content")[0]) && b == this.content[0]) {
                        $(a.element).css({
                            visibility: a.visibility
                        })
                    }
                }, this))
            },
            show: (function () {
                var e = function () {};
                return function (b) {
                    var c = H._frames && H._frames[H._position - 1],
                        shq = this.queues.showhide,
                        duration = (c && c.view.options.effects.window.hide) || 0;
                    if (this.states.get("visible")) {
                        if ($.type(b) == "function") {
                            b()
                        }
                        return
                    }
                    this.states.set("visible", true);
                    shq.queue([]);
                    this.hideOverlapping();
                    if (c && $.type(c.view.options.onShow) == "function") {
                        c.view.options.onShow.call(Fresco)
                    }
                    var d = 2;
                    shq.queue($.proxy(function (a) {
                        if (c.view.options.overlay) {
                            this.overlay.show($.proxy(function () {
                                if (--d < 1) {
                                    a()
                                }
                            }, this))
                        }
                        this.timeouts.set("show-window", $.proxy(function () {
                            this._show(function () {
                                if (--d < 1) {
                                    a()
                                }
                            })
                        }, this), duration > 1 ? Math.min(duration * 0.5, 50) : 1)
                    }, this));
                    e();
                    shq.queue($.proxy(function (a) {
                        G.enable();
                        a()
                    }, this));
                    if ($.type(b) == "function") {
                        shq.queue($.proxy(function (a) {
                            b();
                            a()
                        }), this)
                    }
                }
            })(),
            _show: function (a) {
                H.resize();
                this.element.show();
                this.bubble.stop(true);
                var b = H._frames && H._frames[H._position - 1];
                this.setOpacity(1, b.view.options.effects.window.show, $.proxy(function () {
                    if (a) {
                        a()
                    }
                }, this));
                return this
            },
            hide: function () {
                var c = H._frames && H._frames[H._position - 1],
                    shq = this.queues.showhide;
                shq.queue([]);
                this.stopQueues();
                this.loading.stop(null, true);
                var d = 1;
                shq.queue($.proxy(function (a) {
                    var b = c.view.options.effects.window.hide || 0;
                    this.bubble.stop(true, true).fadeOut(b, "easeInSine", $.proxy(function () {
                        this.element.hide();
                        H.hideAll();
                        if (--d < 1) {
                            this._hide();
                            a()
                        }
                    }, this));
                    if (c.view.options.overlay) {
                        d++;
                        this.timeouts.set("hide-overlay", $.proxy(function () {
                            this.overlay.hide($.proxy(function () {
                                if (--d < 1) {
                                    this._hide();
                                    a()
                                }
                            }, this))
                        }, this), b > 1 ? Math.min(b * 0.5, 150) : 1)
                    }
                }, this))
            },
            _hide: function () {
                this.states.set("visible", false);
                this.restoreOverlapping();
                G.disable();
                var a = H._frames && H._frames[H._position - 1];
                if (a && $.type(a.view.options.afterHide) == "function") {
                    a.view.options.afterHide.call(Fresco)
                }
                this.timeouts.clear();
                this._reset()
            },
            _reset: function () {
                var a = $.extend({
                    after: false,
                    before: false
                }, arguments[0] || {});
                if ($.type(a.before) == "function") {
                    a.before.call(Fresco)
                }
                this.stopQueues();
                this.timeouts.clear();
                this.position = -1;
                this._pinchZoomed = false;
                C.states.set("_m", false);
                if (this._m) {
                    $(this._m).stop().remove();
                    this._m = null
                }
                if (this._s) {
                    $(this._s).stop().remove();
                    this._s = null
                }
                if ($.type(a.after) == "function") {
                    a.after.call(Fresco)
                }
            },
            setOpacity: function (a, b, c) {
                this.bubble.stop(true, true).fadeTo(b || 0, a || 1, "easeOutSine", c)
            },
            stopQueues: function () {
                this.queues.update.queue([]);
                this.bubble.stop(true)
            },
            setPosition: function (a, b) {
                if (!a || this.position == a) {
                    return
                }
                this.timeouts.clear("_m");
                var c = this._position;
                this.position = a;
                this.view = this.views[a - 1];
                this.setSkin(this.view.options && this.view.options.skin, this.view.options);
                H.setPosition(a, b)
            }
        };
        var E = {
            viewport: function () {
                var a = {
                    height: $(window).height(),
                    width: $(window).width()
                };
                if (r.MobileSafari) {
                    a.width = window.innerWidth;
                    a.height = window.innerHeight
                }
                return a
            }
        };
        var F = {
            within: function (a) {
                var b = $.extend({
                    fit: "both",
                    ui: "inside"
                }, arguments[1] || {});
                if (!b.bounds) {
                    b.bounds = $.extend({}, H._boxDimensions)
                }
                var c = b.bounds,
                    size = $.extend({}, a),
                    f = 1,
                    attempts = 5;
                if (b.border) {
                    c.width -= 2 * b.border;
                    c.height -= 2 * b.border
                }
                var d = {
                    height: true,
                    width: true
                };
                switch (b.fit) {
                    case "none":
                        d = {};
                    case "width":
                    case "height":
                        d = {};
                        d[b.fit] = true;
                        break
                }
                while (attempts > 0 && ((d.width && size.width > c.width) || (d.height && size.height > c.height))) {
                    var e = 1,
                        scaleY = 1;
                    if (d.width && size.width > c.width) {
                        e = (c.width / size.width)
                    }
                    if (d.height && size.height > c.height) {
                        scaleY = (c.height / size.height)
                    }
                    var f = Math.min(e, scaleY);
                    size = {
                        width: Math.round(a.width * f),
                        height: Math.round(a.height * f)
                    };
                    attempts--
                }
                size.width = Math.max(size.width, 0);
                size.height = Math.max(size.height, 0);
                return size
            }
        };
        var G = {
            enabled: false,
            keyCode: {
                left: 37,
                right: 39,
                esc: 27
            },
            enable: function () {
                this.fetchOptions()
            },
            disable: function () {
                this.enabled = false
            },
            initialize: function () {
                this.fetchOptions();
                $(document).keydown($.proxy(this.onkeydown, this)).keyup($.proxy(this.onkeyup, this));
                G.disable()
            },
            fetchOptions: function () {
                var a = H._frames && H._frames[H._position - 1];
                this.enabled = a && a.view.options.keyboard
            },
            onkeydown: function (a) {
                if (!this.enabled || !C.element.is(":visible")) {
                    return
                }
                var b = this.getKeyByKeyCode(a.keyCode);
                if (!b || (b && this.enabled && !this.enabled[b])) {
                    return
                }
                a.preventDefault();
                a.stopPropagation();
                switch (b) {
                    case "left":
                        H.previous();
                        break;
                    case "right":
                        H.next();
                        break
                }
            },
            onkeyup: function (a) {
                if (!this.enabled || !C.element.is(":visible")) {
                    return
                }
                var b = this.getKeyByKeyCode(a.keyCode);
                if (!b || (b && this.enabled && !this.enabled[b])) {
                    return
                }
                switch (b) {
                    case "esc":
                        C.hide();
                        break
                }
            },
            getKeyByKeyCode: function (a) {
                for (var b in this.keyCode) {
                    if (this.keyCode[b] == a) {
                        return b
                    }
                }
                return null
            }
        };
        var H = {
            initialize: function (a) {
                if (!a) {
                    return
                }
                this.element = a;
                this._position = -1;
                this._visible = [];
                this._sideWidth = 0;
                this._tracking = [];
                this.queues = [];
                this.queues.sides = $({});
                this.frames = this.element.find(".fr-frames:first");
                this.uis = this.element.find(".fr-uis:first");
                this.updateDimensions();
                this.startObserving()
            },
            startObserving: function () {
                $(window).bind("resize orientationchange", $.proxy(function () {
                    if (C.states.get("visible")) {
                        this.resize()
                    }
                }, this));
                this.frames.delegate(".fr-side", "click", $.proxy(function (a) {
                    a.stopPropagation();
                    this.setXY({
                        x: a.pageX,
                        y: a.pageY
                    });
                    var b = $(a.target).closest(".fr-side").data("side");
                    this[b]()
                }, this))
            },
            load: function (b) {
                if (this._frames) {
                    $.each(this._frames, function (i, a) {
                        a.remove()
                    });
                    this._frames = null;
                    this._tracking = []
                }
                this._sideWidth = 0;
                this._frames = [];
                $.each(b, $.proxy(function (i, a) {
                    this._frames.push(new Frame(a, i + 1))
                }, this));
                this.updateDimensions()
            },
            handleTracking: function (a) {
                if (r.IE && r.IE < 9) {
                    this.setXY({
                        x: a.pageX,
                        y: a.pageY
                    });
                    this.position()
                } else {
                    this._tracking_timer = setTimeout($.proxy(function () {
                        this.setXY({
                            x: a.pageX,
                            y: a.pageY
                        });
                        this.position()
                    }, this), 30)
                }
            },
            clearTrackingTimer: function () {
                if (this._tracking_timer) {
                    clearTimeout(this._tracking_timer);
                    this._tracking_timer = null
                }
            },
            startTracking: function () {
                if (w.mobileTouch || this._handleTracking) {
                    return
                }
                this.element.bind("mousemove", this._handleTracking = $.proxy(this.handleTracking, this))
            },
            stopTracking: function () {
                if (w.mobileTouch || !this._handleTracking) {
                    return
                }
                this.element.unbind("mousemove", this._handleTracking);
                this._handleTracking = null;
                this.clearTrackingTimer()
            },
            setPosition: function (a, b) {
                this.clearLoads();
                this._position = a;
                var c = this._frames[a - 1];
                this.frames.append(c.frame);
                J.setPosition(a);
                c.load($.proxy(function () {
                    this.show(a, function () {
                        if (b) {
                            b()
                        }
                        if ($.type(c.view.options.afterPosition) == "function") {
                            c.view.options.afterPosition.call(Fresco, a)
                        }
                    })
                }, this));
                this.preloadSurroundingImages()
            },
            preloadSurroundingImages: function () {
                if (!(this._frames && this._frames.length > 1)) {
                    return
                }
                var c = this.getSurroundingIndexes(),
                    previous = c.previous,
                    next = c.next,
                    images = {
                        previous: previous != this._position && this._frames[previous - 1].view,
                        next: next != this._position && this._frames[next - 1].view
                    };
                if (this._position == 1) {
                    images.previous = null
                }
                if (this._position == this._frames.length) {
                    images.next = null
                }
                $.each(images, function (a, b) {
                    if (b && b.type == "image" && b.options.preload) {
                        I.preload(images[a].url, {
                            once: true
                        })
                    }
                })
            },
            getSurroundingIndexes: function () {
                if (!this._frames) {
                    return {}
                }
                var a = this._position,
                    length = this._frames.length;
                var b = (a <= 1) ? length : a - 1,
                    next = (a >= length) ? 1 : a + 1;
                return {
                    previous: b,
                    next: next
                }
            },
            mayPrevious: function () {
                var a = H._frames && H._frames[H._position - 1];
                return (a && a.view.options.loop && this._frames && this._frames.length > 1) || this._position != 1
            },
            previous: function (a) {
                if (a || this.mayPrevious()) {
                    C.setPosition(this.getSurroundingIndexes().previous)
                }
            },
            mayNext: function () {
                var a = H._frames && H._frames[H._position - 1];
                return (a && a.view.options.loop && this._frames && this._frames.length > 1) || (this._frames && this._frames.length > 1 && this.getSurroundingIndexes().next != 1)
            },
            next: function (a) {
                if (a || this.mayNext()) {
                    C.setPosition(this.getSurroundingIndexes().next)
                }
            },
            setVisible: function (a) {
                if (!this.isVisible(a)) {
                    this._visible.push(a)
                }
            },
            setHidden: function (b) {
                this._visible = $.grep(this._visible, function (a) {
                    return a != b
                })
            },
            isVisible: function (a) {
                return $.inArray(a, this._visible) > -1
            },
            resize: function () {
                if (!(r.IE && r.IE < 7)) {
                    J.resize()
                }
                this.updateDimensions();
                this.frames.css(px(this._dimensions));
                $.each(this._frames, function (i, a) {
                    a.resize()
                })
            },
            position: function () {
                if (this._tracking.length < 1) {
                    return
                }
                $.each(this._tracking, function (i, a) {
                    a.position()
                })
            },
            setXY: function (a) {
                a.y -= $(window).scrollTop();
                a.x -= $(window).scrollLeft();
                var b = {
                    y: Math.min(Math.max(a.y / this._dimensions.height, 0), 1),
                    x: Math.min(Math.max(a.x / this._dimensions.width, 0), 1)
                };
                var c = 20;
                var d = {
                    x: "width",
                    y: "height"
                };
                var e = {};
                $.each("x y".split(" "), $.proxy(function (i, z) {
                    e[z] = Math.min(Math.max(c / this._dimensions[d[z]], 0), 1);
                    b[z] *= 1 + 2 * e[z];
                    b[z] -= e[z];
                    b[z] = Math.min(Math.max(b[z], 0), 1)
                }, this));
                this.setXYP(b)
            },
            setXYP: function (a) {
                this._xyp = a
            },
            updateDimensions: function (e) {
                var f = E.viewport();
                if (J.visible()) {
                    J.updateVars();
                    f.height -= J._vars.thumbnails.height
                }
                this._sideWidth = 0;
                if (this._frames) {
                    $.each(this._frames, $.proxy(function (i, b) {
                        if (b.view.options.ui == "outside") {
                            var c = b.close;
                            if (this._frames.length > 1) {
                                if (b._pos) {
                                    c = c.add(b._pos)
                                }
                                if (b._next_button) {
                                    c = c.add(b._next_button)
                                }
                            }
                            var d = 0;
                            b._whileVisible(function () {
                                $.each(c, function (i, a) {
                                    d = Math.max(d, $(a).outerWidth(true))
                                })
                            });
                            this._sideWidth = Math.max(this._sideWidth, d) || 0
                        }
                    }, this))
                }
                var g = $.extend({}, f, {
                    width: f.width - 2 * (this._sideWidth || 0)
                });
                this._dimensions = f;
                this._boxDimensions = g
            },
            pn: function () {
                return {
                    previous: this._position - 1 > 0,
                    next: this._position + 1 <= this._frames.length
                }
            },
            show: function (b, c) {
                
                
                var d = [];
                $.each(this._frames, function (i, a) {
                    if (a._position != b) {
                        d.push(a)
                    }
                });
                var e = d.length + 1;
                var f = this._frames[this._position - 1];
                J[f.view.options.thumbnails ? "show" : "hide"]();
                this.resize();
                var g = f.view.options.effects.content.sync;
                $.each(d, $.proxy(function (i, a) {
                    a.hide($.proxy(function () {
                        if (!g) {
                            if (e-- <= 2) {
                                this._frames[b - 1].show(c)
                            }
                        } else {
                            if (c && e-- <= 1) {
                                c()
                            }
                        }
                    }, this))
                }, this));
                if (g) {
                    this._frames[b - 1].show(function () {
                        if (c && e-- <= 1) {
                            c()
                        }
                    })
                }
            },
            hideAll: function () {
                $.each(this._visible, $.proxy(function (j, i) {
                    this._frames[i - 1].hide()
                }, this));
                J.hide();
                this.setXY({
                    x: 0,
                    y: 0
                })
            },
            hideAllBut: function (b) {
                $.each(this._frames, $.proxy(function (i, a) {
                    if (a.position != b) {
                        a.hide()
                    }
                }, this))
            },
            setTracking: function (a) {
                if (!this.isTracking(a)) {
                    this._tracking.push(this._frames[a - 1]);
                    if (this._tracking.length == 1) {
                        this.startTracking()
                    }
                }
            },
            clearTracking: function () {
                this._tracking = []
            },
            removeTracking: function (b) {
                this._tracking = $.grep(this._tracking, function (a) {
                    return a._position != b
                });
                if (this._tracking.length < 1) {
                    this.stopTracking()
                }
            },
            isTracking: function (b) {
                var c = false;
                $.each(this._tracking, function (i, a) {
                    if (a._position == b) {
                        c = true;
                        return false
                    }
                });
                return c
            },
            bounds: function () {
                var a = this._dimensions;
                if (C._scrollbarWidth) {
                    a.width -= scrollbarWidth
                }
                return a
            },
            clearLoads: function () {
                $.each(this._frames, $.proxy(function (i, a) {
                    a.clearLoad()
                }, this))
            }
        };

        function Frame() {
            this.initialize.apply(this, q.call(arguments))
        }
        $.extend(Frame.prototype, {
            initialize: function (a, b) {
                this.view = a;
                this._position = b;
                this._dimensions = {};
                this.build()
            },
            remove: function () {
                this.clearUITimer();
                if (this._track) {
                    H.removeTracking(this._position);
                    this._track = false
                }
                this.frame.remove();
                this.frame = null;
                this.ui.remove();
                this.ui = null;
                this.view = null;
                this._dimensions = {};
                this._reset();
                if (this._interval_load) {
                    clearInterval(this._interval_load);
                    this._interval_load = null
                }
            },
            build: function () {
                var b = this.view.options.ui,
                    positions = C.views.length;
                H.frames.append(this.frame = $("<div>").addClass("fr-frame").append(this.box = $("<div>").addClass("fr-box").addClass("fr-box-has-ui-" + this.view.options.ui)).hide());
                var c = this.view.options.onClick;
                if (this.view.type == "image" && ((c == "next" && (this.view.options.loop || (!this.view.options.loop && this._position != C.views.length))) || c == "close")) {
                    this.frame.addClass("fr-frame-onclick-" + c.toLowerCase())
                }
                if (this.view.options.ui == "outside") {
                    this.frame.prepend(this.ui = $("<div>").addClass("fr-ui fr-ui-outside"))
                } else {
                    this.frame.append(this.ui = $("<div>").addClass("fr-ui fr-ui-inside"))
                }
                if(!$("html").hasClass('ie9') && !$("html").hasClass('ie10') && $('.main_profile').length) {
                    if (this.view.element.dataset.frescoLikecount) {
                        var liked = '';
                        if($(this.view.element).hasClass('liked')) {
                            liked = ' like';
                        }
                        this.box.append(this.box_spacer = $("<div>").addClass("fr-box-spacer").append(this.box_padder = $("<div>").addClass("fr-box-padder").append(this.box_outer_border = $("<div>").addClass("fr-box-outer-border").append(this.box_wrapper = $("<div>").addClass("fr-box-wrapper").append($('<a href="#" data-count="' + this.view.element.dataset.frescoLikecount + '" class="likeCount'+liked+'">').bind('click', function(event) {
                            event.preventDefault();
                            frescoLikeFunction($(this));
                        }))))));
                    } else {
                        this.box.append(this.box_spacer = $("<div>").addClass("fr-box-spacer").append(this.box_padder = $("<div>").addClass("fr-box-padder").append(this.box_outer_border = $("<div>").addClass("fr-box-outer-border").append(this.box_wrapper = $("<div>").addClass("fr-box-wrapper").append($('<a href="#" data-count="' + this.view.element.dataset.frescoLikecount + '" class="likeCount" style="display:none;">').bind('click', function(event) {
                            event.preventDefault();
                            frescoLikeFunction($(this));
                        }))))));
                    }
                } else {
                    this.box.append(this.box_spacer = $("<div>").addClass("fr-box-spacer").append(this.box_padder = $("<div>").addClass("fr-box-padder").append(this.box_outer_border = $("<div>").addClass("fr-box-outer-border").append(this.box_wrapper = $("<div>").addClass("fr-box-wrapper")))));
                }
                if (w.mobileTouch) {
                    A(this.box, function (a) {
                        H[a == "left" ? "next" : "previous"]()
                    }, false)
                }
                this.box_spacer.bind("click", $.proxy(function (a) {
                    if (a.target == this.box_spacer[0] && this.view.options.overlay && this.view.options.overlay.close) {
                        C.hide()
                    }
                }, this));

                this.spacers = this.box_spacer;
                this.wrappers = this.box_wrapper;
                this.padders = this.box_padder;
                if (this.view.options.ui == "outside") {
                    this.ui.append(this.ui_wrapper = $("<div>").addClass("fr-ui-wrapper-outside"))
                } else {
                    this.ui.append(this.ui_spacer = $("<div>").addClass("fr-ui-spacer").append(this.ui_padder = $("<div>").addClass("fr-ui-padder").append(this.ui_outer_border = $("<div>").addClass("fr-ui-outer-border").append(this.ui_toggle = $("<div>").addClass("fr-ui-toggle").append(this.ui_wrapper = $("<div>").addClass("fr-ui-wrapper"))))));
                    this.spacers = this.spacers.add(this.ui_spacer);
                    this.wrapper = this.wrappers.add(this.ui_wrapper);
                    this.padders = this.padders.add(this.ui_padder)
                }
                if (positions > 1) {
                    this.ui_wrapper.append(this._next = $("<div>").addClass("fr-side fr-side-next").append(this._next_button = $("<div>").addClass("fr-side-button").append($("<div>").addClass("fr-side-button-icon"))).data("side", "next"));
                    if (this._position == positions && !this.view.options.loop) {
                        this._next.addClass("fr-side-disabled");
                        this._next_button.addClass("fr-side-button-disabled")
                    }
                    this.ui_wrapper.append(this._previous = $("<div>").addClass("fr-side fr-side-previous").append(this._previous_button = $("<div>").addClass("fr-side-button").append($("<div>").addClass("fr-side-button-icon"))).data("side", "previous"));
                    if (this._position == 1 && !this.view.options.loop) {
                        this._previous.addClass("fr-side-disabled");
                        this._previous_button.addClass("fr-side-button-disabled")
                    }
                }
                this.frame.addClass("fr-no-caption");
                if (this.view.caption || (this.view.options.ui == "inside" && !this.view.caption)) {
                    this[this.view.options.ui == "inside" ? "ui_wrapper" : "frame"].append(this.info = $("<div>").addClass("fr-info fr-info-" + this.view.options.ui).append(this.info_background = $("<div>").addClass("fr-info-background")).append(this.info_padder = $("<div>").addClass("fr-info-padder")));
                    this.info.bind("click", function (a) {
                        a.stopPropagation()
                    })
                }
                if (this.view.caption) {
                    this.frame.removeClass("fr-no-caption").addClass("fr-has-caption");
                    this.info_padder.append(this.caption = $("<div>").addClass("fr-caption").html(this.view.caption))
                }
                if (positions > 1 && this.view.options.position) {
                    var d = this._position + " / " + positions;
                    this.frame.addClass("fr-has-position");
                    var b = this.view.options.ui;
                    this[b == "inside" ? "info_padder" : "ui_wrapper"][b == "inside" ? "prepend" : "append"](this._pos = $("<div>").addClass("fr-position").append($("<div>").addClass("fr-position-background")).append($("<span>").addClass("fr-position-text").html(d)))
                }
                this.ui_wrapper.append(this.close = $("<div>").addClass("fr-close").bind("click", function () {
                    C.hide()
                }).append($("<span>").addClass("fr-close-background")).append($("<span>").addClass("fr-close-icon")));
                if (this.view.type == "image" && this.view.options.onClick == "close") {
                    this[this.view.options.ui == "outside" ? "box_wrapper" : "ui_padder"].bind("click", function (a) {
                        a.preventDefault();
                        a.stopPropagation();
                        C.hide()
                    })
                }
                this.frame.hide()
            },
            _getInfoHeight: function (a) {
                if (!this.view.caption) {
                    return 0
                }
                if (this.view.options.ui == "outside") {
                    a = Math.min(a, H._boxDimensions.width)
                }
                var b, info_pw = this.info.css("width");
                this.info.css({
                    width: a + "px"
                });
                b = parseFloat(this.info.css("height"));
                this.info.css({
                    width: info_pw
                });
                return b
            },
            _whileVisible: function (b, c) {
                var d = [];
                var e = C.element.add(C.bubble).add(this.frame).add(this.ui);
                if (c) {
                    e = e.add(c)
                }
                $.each(e, function (i, a) {
                    d.push({
                        visible: $(a).is(":visible"),
                        element: $(a).show()
                    })
                });
                b();
                $.each(d, function (i, a) {
                    if (!a.visible) {
                        a.element.hide()
                    }
                })
            },
            getLayout: function () {
                this.updateVars();
                var d = this._dimensions.max,
                    ui = this.view.options.ui,
                    fit = this._fit,
                    i = this._spacing,
                    border = this._border;
                var e = F.within(d, {
                    fit: fit,
                    ui: ui,
                    border: border
                });
                var f = $.extend({}, e),
                    contentPosition = {
                        top: 0,
                        left: 0
                    };
                if (border) {
                    f = F.within(f, {
                        bounds: e,
                        ui: ui
                    });
                    e.width += 2 * border;
                    e.height += 2 * border
                }
                if (i.horizontal || i.vertical) {
                    var g = $.extend({}, H._boxDimensions);
                    if (border) {
                        g.width -= 2 * border;
                        g.height -= 2 * border
                    }
                    g = {
                        width: Math.max(g.width - 2 * i.horizontal, 0),
                        height: Math.max(g.height - 2 * i.vertical, 0)
                    };
                    f = F.within(f, {
                        fit: fit,
                        bounds: g,
                        ui: ui
                    })
                }
                var h = {
                    caption: true
                }, cfitted = false;
                if (ui == "outside") {
                    var i = {
                        height: e.height - f.height,
                        width: e.width - f.width
                    };
                    var j = $.extend({}, f),
                        noCaptionClass = this.caption && this.frame.hasClass("fr-no-caption");
                    var k;
                    if (this.caption) {
                        k = this.caption;
                        this.info.removeClass("fr-no-caption");
                        var l = this.frame.hasClass("fr-no-caption");
                        this.frame.removeClass("fr-no-caption");
                        var m = this.frame.hasClass("fr-has-caption");
                        this.frame.addClass("fr-has-caption")
                    }
                    C.element.css({
                        visibility: "visible"
                    });
                    this._whileVisible($.proxy(function () {
                        var a = 0,
                            attempts = 2;
                        while ((a < attempts)) {
                            h.height = this._getInfoHeight(f.width);
                            var b = 0.5 * (H._boxDimensions.height - 2 * border - (i.vertical ? i.vertical * 2 : 0) - f.height);
                            if (b < h.height) {
                                f = F.within(f, {
                                    bounds: $.extend({}, {
                                        width: f.width,
                                        height: Math.max(f.height - h.height, 0)
                                    }),
                                    fit: fit,
                                    ui: ui
                                })
                            }
                            a++
                        }
                        h.height = this._getInfoHeight(f.width);
                        var c = E.viewport();
                        if (((c.height <= 320 && c.width <= 568) || (c.width <= 320 && c.height <= 568)) || (h.height >= 0.5 * f.height) || (h.height >= 0.6 * f.width)) {
                            h.caption = false;
                            h.height = 0;
                            f = j
                        }
                    }, this), k);
                    C.element.css({
                        visibility: "visible"
                    });
                    if (l) {
                        this.frame.addClass("fr-no-caption")
                    }
                    if (m) {
                        this.frame.addClass("fr-has-caption")
                    }
                    var n = {
                        height: e.height - f.height,
                        width: e.width - f.width
                    };
                    e.height += (i.height - n.height);
                    e.width += (i.width - n.width);
                    if (f.height != j.height) {
                        cfitted = true
                    }
                } else {
                    h.height = 0
                }
                var o = {
                    width: f.width + 2 * border,
                    height: f.height + 2 * border
                };
                if (h.height) {
                    e.height += h.height
                }
                if (ui == "inside") {
                    h.height = 0
                }
                var p = {
                    spacer: {
                        dimensions: e
                    },
                    padder: {
                        dimensions: o
                    },
                    wrapper: {
                        dimensions: f,
                        bounds: o,
                        margin: {
                            top: 0.5 * (e.height - o.height) - (0.5 * h.height),
                            left: 0.5 * (e.width - o.width)
                        }
                    },
                    content: {
                        dimensions: f
                    },
                    info: h
                };
                if (ui == "outside") {
                    p.info.top = p.wrapper.margin.top;
                    h.width = Math.min(f.width, H._boxDimensions.width)
                }
                var g = $.extend({}, H._boxDimensions);
                if (ui == "outside") {
                    p.box = {
                        dimensions: {
                            width: H._boxDimensions.width
                        },
                        position: {
                            left: 0.5 * (H._dimensions.width - H._boxDimensions.width)
                        }
                    }
                }
                p.ui = {
                    spacer: {
                        dimensions: {
                            width: Math.min(e.width, g.width),
                            height: Math.min(e.height, g.height)
                        }
                    },
                    padder: {
                        dimensions: o
                    },
                    wrapper: {
                        dimensions: {
                            width: Math.min(p.wrapper.dimensions.width, g.width - 2 * border),
                            height: Math.min(p.wrapper.dimensions.height, g.height - 2 * border)
                        },
                        margin: {
                            top: p.wrapper.margin.top + border,
                            left: p.wrapper.margin.left + border
                        }
                    }
                };
                return p
            },
            updateVars: function () {
                var a = $.extend({}, this._dimensions.max);
                var b = parseInt(this.box_outer_border.css("border-top-width"));
                this._border = b;
                if (b) {
                    a.width -= 2 * b;
                    a.height -= 2 * b
                }
                var c = this.view.options.fit;
                if (c == "smart") {
                    if (a.width > a.height) {
                        c = "height"
                    } else {
                        if (a.height > a.width) {
                            c = "width"
                        } else {
                            c = "none"
                        }
                    }
                } else {
                    if (!c) {
                        c = "none"
                    }
                }
                this._fit = c;
                var d = this.view.options.spacing[this._fit];
                this._spacing = d
            },
            clearLoadTimer: function () {
                if (this._loadTimer) {
                    clearTimeout(this._loadTimer);
                    this._loadTimer = null
                }
            },
            clearLoad: function () {
                if (this._loadTimer && this._loading && !this._loaded) {
                    this.clearLoadTimer();
                    this._loading = false
                }
            },
            load: function (i) {
                if (this._loaded || this._loading) {
                    if (this._loaded) {
                        this.afterLoad(i)
                    }
                    return
                }
                if (!(I.cache.get(this.view.url) || I.preloaded.getDimensions(this.view.url))) {
                    C.loading.start()
                }
                this._loading = true;
                this._loadTimer = setTimeout($.proxy(function () {
                    this.clearLoadTimer();
                    switch (this.view.type) {
                        case "image":
                            I.get(this.view.url, $.proxy(function (c, d) {
                                this._dimensions._max = c;
                                this._dimensions.max = c;
                                this._loaded = true;
                                this._loading = false;
                                this.updateVars();
                                var e = this.getLayout();
                                this._dimensions.spacer = e.spacer.dimensions;
                                this._dimensions.content = e.content.dimensions;
                                this.content = $("<img>").attr({
                                    src: this.view.url
                                });
                                this.box_wrapper.append(this.content.addClass("fr-content fr-content-image"));
                                this.box_wrapper.append($("<div>").addClass("fr-content-image-overlay "));
                                var f;
                                if (this.view.options.ui == "outside" && ((f = this.view.options.onClick) && f == "next" || f == "previous-next")) {
                                    if (!this.view.options.loop && this._position != H._frames.length) {
                                        this.box_wrapper.append($("<div>").addClass("fr-onclick-side fr-onclick-next").data("side", "next"))
                                    }
                                    if (f == "previous-next" && (!this.view.options.loop && this._position != 1)) {
                                        this.box_wrapper.append($("<div>").addClass("fr-onclick-side fr-onclick-previous").data("side", "previous"))
                                    }
                                    this.frame.delegate(".fr-onclick-side", "click", $.proxy(function (a) {
                                        var b = $(a.target).data("side");
                                        H[b]()
                                    }, this));
                                    this.frame.delegate(".fr-onclick-side", "mouseenter", $.proxy(function (a) {
                                        var b = $(a.target).data("side"),
                                            button = b && this["_" + b + "_button"];
                                        if (!button) {
                                            return
                                        }
                                        this["_" + b + "_button"].addClass("fr-side-button-active")
                                    }, this));
                                    this.frame.delegate(".fr-onclick-side", "mouseleave", $.proxy(function (a) {
                                        var b = $(a.target).data("side"),
                                            button = b && this["_" + b + "_button"];
                                        if (!button) {
                                            return
                                        }
                                        this["_" + b + "_button"].removeClass("fr-side-button-active")
                                    }, this))
                                }
                                this.afterLoad(i)
                            }, this));
                            break;
                        case "youtube":
                        case "vimeo":
                            var g = {
                                width: this.view.options.width,
                                height: this.view.options.height
                            };
                            if (this.view.type == "youtube" && this.view.options.youtube && this.view.options.youtube.hd) {
                                this.view._data.quality = (g.width > 720) ? "hd1080" : "hd720"
                            }
                            this._dimensions._max = g;
                            this._dimensions.max = g;
                            this._loaded = true;
                            this._loading = false;
                            this.updateVars();
                            var h = this.getLayout();
                            this._dimensions.spacer = h.spacer.dimensions;
                            this._dimensions.content = h.content.dimensions;
                            this.box_wrapper.append(this.content = $("<div>").addClass("fr-content fr-content-" + this.view.type));
                            this.afterLoad(i);
                            break
                    }
                }, this), 10)
            },
            afterLoad: function (a) {
                this.resize();
                if (this.view.options.ui == "inside") {
                    this.ui_outer_border.bind("mouseenter", $.proxy(this.showUI, this)).bind("mouseleave", $.proxy(this.hideUI, this))
                }
                if (!w.mobileTouch) {
                    this.ui.delegate(".fr-ui-padder", "mousemove", $.proxy(function () {
                        if (!this.ui_wrapper.is(":visible")) {
                            this.showUI()
                        }
                        this.startUITimer()
                    }, this))
                } else {
                    this.box.bind("click", $.proxy(function () {
                        if (!this.ui_wrapper.is(":visible")) {
                            this.showUI()
                        }
                        this.startUITimer()
                    }, this))
                }
                var b;
                if (H._frames && (b = H._frames[H._position - 1]) && b.view.url == this.view.url) {
                    C.loading.stop()
                }
                if (a) {
                    a()
                }
            },
            resize: function () {
                if (this.content) {
                    var a = this.getLayout();
                    this._dimensions.spacer = a.spacer.dimensions;
                    this._dimensions.content = a.content.dimensions;
                    this.box_spacer.css(px(a.spacer.dimensions));
                    if (this.view.options.ui == "inside") {
                        this.ui_spacer.css(px(a.ui.spacer.dimensions))
                    }
                    this.box_wrapper.add(this.box_outer_border).css(px(a.wrapper.dimensions));
                    var b = 0;
                    if (this.view.options.ui == "outside" && a.info.caption) {
                        b = a.info.height
                    }
                    this.box_outer_border.css({
                        "padding-bottom": b + "px"
                    });
                    this.box_padder.css(px({
                        width: a.padder.dimensions.width,
                        height: a.padder.dimensions.height + b
                    }));
                    if (a.spacer.dimensions.width > (this.view.options.ui == "outside" ? a.box.dimensions.width : E.viewport().width)) {
                        this.box.addClass("fr-prevent-swipe")
                    } else {
                        this.box.removeClass("fr-prevent-swipe")
                    }
                    if (this.view.options.ui == "outside") {
                        if (this.caption) {
                            this.info.css(px({
                                width: a.info.width
                            }))
                        }
                    } else {
                        this.ui_wrapper.add(this.ui_outer_border).add(this.ui_toggle).css(px(a.ui.wrapper.dimensions));
                        this.ui_padder.css(px(a.ui.padder.dimensions));
                        var c = 0;
                        if (this.caption) {
                            var d = this.frame.hasClass("fr-no-caption"),
                                has_hascap = this.frame.hasClass("fr-has-caption");
                            this.frame.removeClass("fr-no-caption");
                            this.frame.addClass("fr-has-caption");
                            var c = 0;
                            this._whileVisible($.proxy(function () {
                                c = this.info.outerHeight()
                            }, this), this.ui_wrapper.add(this.caption));
                            var e = E.viewport();
                            if (c >= 0.45 * a.wrapper.dimensions.height || ((e.height <= 320 && e.width <= 568) || (e.width <= 320 && e.height <= 568))) {
                                a.info.caption = false
                            }
                            if (d) {
                                this.frame.addClass("fr-no-caption")
                            }
                            if (!has_hascap) {
                                this.frame.removeClass("fr-has-caption")
                            }
                        }
                    }
                    if (this.caption) {
                        var f = a.info.caption;
                        this.caption[f ? "show" : "hide"]();
                        this.frame[(!f ? "add" : "remove") + "Class"]("fr-no-caption");
                        this.frame[(!f ? "remove" : "add") + "Class"]("fr-has-caption")
                    }
                    this.box_padder.add(this.ui_padder).css(px(a.wrapper.margin));
                    var g = H._boxDimensions,
                        spacer_dimensions = this._dimensions.spacer;
                    this.overlap = {
                        y: spacer_dimensions.height - g.height,
                        x: spacer_dimensions.width - g.width
                    };
                    this._track = this.overlap.x > 0 || this.overlap.y > 0;
                    H[(this._track ? "set" : "remove") + "Tracking"](this._position);
                    if (r.IE && r.IE < 8 && this.view.type == "image") {
                        this.content.css(px(a.wrapper.dimensions))
                    }
                    if (/^(vimeo|youtube)$/.test(this.view.type)) {
                        var h = a.wrapper.dimensions;
                        if (this.player) {
                            this.player.setSize(h.width, h.height)
                        } else {
                            if (this.player_iframe) {
                                this.player_iframe.attr(h)
                            }
                        }
                    }
                }
                this.position()
            },
            position: function () {
                if (!this.content) {
                    return
                }
                var a = H._xyp;
                var b = H._boxDimensions,
                    spacer_dimensions = this._dimensions.spacer;
                var c = {
                    top: 0,
                    left: 0
                };
                var d = this.overlap;
                this.frame.removeClass("fr-frame-touch");
                if (d.x || d.y) {
                    if (w.scroll) {
                        this.frame.addClass("fr-frame-touch")
                    }
                }
                if (d.y > 0) {
                    c.top = 0 - a.y * d.y
                } else {
                    c.top = b.height * 0.5 - spacer_dimensions.height * 0.5
                }
                if (d.x > 0) {
                    c.left = 0 - a.x * d.x
                } else {
                    c.left = b.width * 0.5 - spacer_dimensions.width * 0.5
                }
                if (w.mobileTouch) {
                    if (d.y > 0) {
                        c.top = 0
                    }
                    if (d.x > 0) {
                        c.left = 0
                    }
                    this.box_spacer.css({
                        position: "relative"
                    })
                }
                this._style = c;
                this.box_spacer.css({
                    top: c.top + "px",
                    left: c.left + "px"
                });
                var e = $.extend({}, c);
                if (e.top < 0) {
                    e.top = 0
                }
                if (e.left < 0) {
                    e.left = 0
                }
                if (this.view.options.ui == "outside") {
                    var f = this.getLayout();
                    this.box.css(px(f.box.dimensions)).css(px(f.box.position));
                    if (this.view.caption) {
                        var g = c.top + f.wrapper.margin.top + f.wrapper.dimensions.height + this._border;
                        if (g > H._boxDimensions.height - f.info.height) {
                            g = H._boxDimensions.height - f.info.height
                        }
                        var h = H._sideWidth + c.left + f.wrapper.margin.left + this._border;
                        if (h < H._sideWidth) {
                            h = H._sideWidth
                        }
                        if (h + f.info.width > H._sideWidth + f.box.dimensions.width) {
                            h = H._sideWidth
                        }
                        this.info.css({
                            top: g + "px",
                            left: h + "px"
                        })
                    }
                } else {
                    this.ui_spacer.css({
                        left: e.left + "px",
                        top: e.top + "px"
                    })
                }
            },
            setDimensions: function (a) {
                this.dimensions = a
            },
            _preShow: function () {
                switch (this.view.type) {
                    case "youtube":
                        var b = r.IE && r.IE < 8,
                            d = this.getLayout(),
                            lwd = d.wrapper.dimensions;
                        if ( !! window.YT) {
                            var p;
                            this.content.append(this.player_div = $("<div>").append(p = $("<div>")[0]));
                            this.player = new YT.Player(p, {
                                height: lwd.height,
                                width: lwd.width,
                                videoId: this.view._data.id,
                                playerVars: this.view.options.youtube,
                                events: b ? {} : {
                                    onReady: $.proxy(function (a) {
                                        if (this.view.options.youtube.hd) {
                                            try {
                                                a.target.setPlaybackQuality(this.view._data.quality)
                                            } catch (e) {}
                                        }
                                        this.resize()
                                    }, this)
                                }
                            })
                        } else {
                            var c = $.param(this.view.options.youtube || {});
                            this.content.append(this.player_iframe = $("<iframe webkitAllowFullScreen mozallowfullscreen allowFullScreen>").attr({
                                src: "http://www.youtube.com/embed/" + this.view._data.id + "?" + c,
                                height: lwd.height,
                                width: lwd.width,
                                frameborder: 0
                            }))
                        }
                        break;
                    case "vimeo":
                        var d = this.getLayout(),
                            lwd = d.wrapper.dimensions;
                        var c = $.param(this.view.options.vimeo || {});
                        this.content.append(this.player_iframe = $("<iframe webkitAllowFullScreen mozallowfullscreen allowFullScreen>").attr({
                            src: "http://player.vimeo.com/video/" + this.view._data.id + "?" + c,
                            height: lwd.height,
                            width: lwd.width,
                            frameborder: 0
                        }));
                        break
                }
            },
            show: function (a) {
                var b = r.IE && r.IE < 8;
                this._preShow();
                H.setVisible(this._position);
                this.frame.stop(1, 0);
                this.ui.stop(1, 0);
                this.showUI(null, true);
                if (this._track) {
                    H.setTracking(this._position)
                }
                this.setOpacity(1, Math.max(this.view.options.effects.content.show, r.IE && r.IE < 9 ? 0 : 10), $.proxy(function () {
                    if (a) {
                        a()
                    }
                }, this))
            },
            _postHide: function () {
                if (this.player_iframe) {
                    this.player_iframe.remove();
                    this.player_iframe = null
                }
                if (this.player) {
                    this.player.destroy();
                    this.player = null
                }
                if (this.player_div) {
                    this.player_div.remove();
                    this.player_div = null
                }
            },
            _reset: function () {
                H.removeTracking(this._position);
                H.setHidden(this._position);
                this._postHide()
            },
            hide: function (a) {
                var b = Math.max(this.view.options.effects.content.hide || 0, r.IE && r.IE < 9 ? 0 : 10);
                var c = this.view.options.effects.content.sync ? "easeInQuad" : "easeOutSine";
                this.frame.stop(1, 0).fadeOut(b, c, $.proxy(function () {
                    this._reset();
                    if (a) {
                        a()
                    }
                }, this))
            },
            setOpacity: function (a, b, c) {
                var d = this.view.options.effects.content.sync ? "easeOutQuart" : "easeInSine";
                this.frame.stop(1, 0).fadeTo(b || 0, a, d, c)
            },
            showUI: function (a, b) {
                if (!b) {
                    this.ui_wrapper.stop(1, 0).fadeTo(b ? 0 : this.view.options.effects.ui.show, 1, "easeInSine", $.proxy(function () {
                        this.startUITimer();
                        if ($.type(a) == "function") {
                            a()
                        }
                    }, this))
                } else {
                    this.ui_wrapper.show();
                    this.startUITimer();
                    if ($.type(a) == "function") {
                        a()
                    }
                }
            },
            hideUI: function (a, b) {
                if (this.view.options.ui == "outside") {
                    return
                }
                if (!b) {
                    this.ui_wrapper.stop(1, 0).fadeOut(b ? 0 : this.view.options.effects.ui.hide, "easeOutSine", function () {
                        if ($.type(a) == "function") {
                            a()
                        }
                    })
                } else {
                    this.ui_wrapper.hide();
                    if ($.type(a) == "function") {
                        a()
                    }
                }
            },
            clearUITimer: function () {
                if (this._ui_timer) {
                    clearTimeout(this._ui_timer);
                    this._ui_timer = null
                }
            },
            startUITimer: function () {
                this.clearUITimer();
                this._ui_timer = setTimeout($.proxy(function () {
                    this.hideUI()
                }, this), this.view.options.effects.ui.delay)
            },
            hideUIDelayed: function () {
                this.clearUITimer();
                this._ui_timer = setTimeout($.proxy(function () {
                    this.hideUI()
                }, this), this.view.options.effects.ui.delay)
            }
        });

        function Timeouts() {
            this.initialize.apply(this, q.call(arguments))
        }
        $.extend(Timeouts.prototype, {
            initialize: function () {
                this._timeouts = {};
                this._count = 0
            },
            set: function (a, b, c) {
                if ($.type(a) == "string") {
                    this.clear(a)
                }
                if ($.type(a) == "function") {
                    c = b;
                    b = a;
                    while (this._timeouts["timeout_" + this._count]) {
                        this._count++
                    }
                    a = "timeout_" + this._count
                }
                this._timeouts[a] = window.setTimeout($.proxy(function () {
                    if (b) {
                        b()
                    }
                    this._timeouts[a] = null;
                    delete this._timeouts[a]
                }, this), c)
            },
            get: function (a) {
                return this._timeouts[a]
            },
            clear: function (b) {
                if (!b) {
                    $.each(this._timeouts, $.proxy(function (i, a) {
                        window.clearTimeout(a);
                        this._timeouts[i] = null;
                        delete this._timeouts[i]
                    }, this));
                    this._timeouts = {}
                }
                if (this._timeouts[b]) {
                    window.clearTimeout(this._timeouts[b]);
                    this._timeouts[b] = null;
                    delete this._timeouts[b]
                }
            }
        });

        function States() {
            this.initialize.apply(this, q.call(arguments))
        }
        $.extend(States.prototype, {
            initialize: function () {
                this._states = {}
            },
            set: function (a, b) {
                this._states[a] = b
            },
            get: function (a) {
                return this._states[a] || false
            }
        });

        function View() {
            this.initialize.apply(this, q.call(arguments))
        }
        $.extend(View.prototype, {
            initialize: function (a) {
                var b = arguments[1] || {};
                var c = {};
                if ($.type(a) == "string") {
                    a = {
                        url: a
                    }
                } else {
                    if (a && a.nodeType == 1) {
                        var d = $(a);
                        a = {
                            element: d[0],
                            url: d.attr("href"),
                            caption: d.data("fresco-caption"),
                            group: d.data("fresco-group"),
                            extension: d.data("fresco-extension"),
                            type: d.data("fresco-type"),
                            options: (d.data("fresco-options") && eval("({" + d.data("fresco-options") + "})")) || {}
                        }
                    }
                }
                if (a) {
                    if (!a.extension) {
                        a.extension = detectExtension(a.url)
                    }
                    if (!a.type) {
                        var c = getURIData(a.url);
                        a._data = c;
                        a.type = c.type
                    }
                }
                if (!a._data) {
                    a._data = getURIData(a.url)
                }
                if (a && a.options) {
                    a.options = $.extend(true, $.extend({}, b), $.extend({}, a.options))
                } else {
                    a.options = $.extend({}, b)
                }
                a.options = B.create(a.options, a.type, a._data);
                $.extend(this, a);
                return this
            }
        });
        var I = {
            get: function (a, b, c) {
                if ($.type(b) == "function") {
                    c = b;
                    b = {}
                }
                b = $.extend({
                    track: true,
                    type: false,
                    lifetime: 1000 * 60 * 5
                }, b || {});
                var d = I.cache.get(a),
                    type = b.type || getURIData(a).type,
                    data = {
                        type: type,
                        callback: c
                    };
                if (!d && type == "image") {
                    var e;
                    if ((e = I.preloaded.get(a)) && e.dimensions) {
                        d = e;
                        I.cache.set(a, e.dimensions, e.data)
                    }
                }
                if (!d) {
                    if (b.track) {
                        I.loading.clear(a)
                    }
                    switch (type) {
                        case "image":
                            var f = new Image();
                            f.onload = function () {
                                f.onload = function () {};
                                d = {
                                    dimensions: {
                                        width: f.width,
                                        height: f.height
                                    }
                                };
                                data.image = f;
                                I.cache.set(a, d.dimensions, data);
                                if (b.track) {
                                    I.loading.clear(a)
                                }
                                if (c) {
                                    c(d.dimensions, data)
                                }
                            };
                            f.src = a;
                            if (b.track) {
                                I.loading.set(a, {
                                    image: f,
                                    type: type
                                })
                            }
                            break
                    }
                } else {
                    if (c) {
                        c($.extend({}, d.dimensions), d.data)
                    }
                }
            }
        };
        I.Cache = function () {
            return this.initialize.apply(this, q.call(arguments))
        };
        $.extend(I.Cache.prototype, {
            initialize: function () {
                this.cache = []
            },
            get: function (a) {
                var b = null;
                for (var i = 0; i < this.cache.length; i++) {
                    if (this.cache[i] && this.cache[i].url == a) {
                        b = this.cache[i]
                    }
                }
                return b
            },
            set: function (a, b, c) {
                this.remove(a);
                this.cache.push({
                    url: a,
                    dimensions: b,
                    data: c
                })
            },
            remove: function (a) {
                for (var i = 0; i < this.cache.length; i++) {
                    if (this.cache[i] && this.cache[i].url == a) {
                        delete this.cache[i]
                    }
                }
            },
            inject: function (a) {
                var b = get(a.url);
                if (b) {
                    $.extend(b, a)
                } else {
                    this.cache.push(a)
                }
            }
        });
        I.cache = new I.Cache();
        I.Loading = function () {
            return this.initialize.apply(this, q.call(arguments))
        };
        $.extend(I.Loading.prototype, {
            initialize: function () {
                this.cache = []
            },
            set: function (a, b) {
                this.clear(a);
                this.cache.push({
                    url: a,
                    data: b
                })
            },
            get: function (a) {
                var b = null;
                for (var i = 0; i < this.cache.length; i++) {
                    if (this.cache[i] && this.cache[i].url == a) {
                        b = this.cache[i]
                    }
                }
                return b
            },
            clear: function (a) {
                var b = this.cache;
                for (var i = 0; i < b.length; i++) {
                    if (b[i] && b[i].url == a && b[i].data) {
                        var c = b[i].data;
                        switch (c.type) {
                            case "image":
                                if (c.image && c.image.onload) {
                                    c.image.onload = function () {}
                                }
                                break
                        }
                        delete b[i]
                    }
                }
            }
        });
        I.loading = new I.Loading();
        I.preload = function (a, b, c) {
            if ($.type(b) == "function") {
                c = b;
                b = {}
            }
            b = $.extend({
                once: false
            }, b || {});
            if (b.once && I.preloaded.get(a)) {
                return
            }
            var d;
            if ((d = I.preloaded.get(a)) && d.dimensions) {
                if ($.type(c) == "function") {
                    c($.extend({}, d.dimensions), d.data)
                }
                return
            }
            var e = {
                url: a,
                data: {
                    type: "image"
                }
            }, image = new Image();
            e.data.image = image;
            image.onload = function () {
                image.onload = function () {};
                e.dimensions = {
                    width: image.width,
                    height: image.height
                };
                if ($.type(c) == "function") {
                    c(e.dimensions, e.data)
                }
            };
            I.preloaded.cache.add(e);
            image.src = a
        };
        I.preloaded = {
            get: function (a) {
                return I.preloaded.cache.get(a)
            },
            getDimensions: function (a) {
                var b = this.get(a);
                return b && b.dimensions
            }
        };
        I.preloaded.cache = (function () {
            var c = [];

            function get(a) {
                var b = null;
                for (var i = 0, l = c.length; i < l; i++) {
                    if (c[i] && c[i].url && c[i].url == a) {
                        b = c[i]
                    }
                }
                return b
            }
            function add(a) {
                c.push(a)
            }
            return {
                get: get,
                add: add
            }
        })();
        var J = {
            initialize: function (a) {
                this.element = a;
                this._thumbnails = [];
                this._vars = {
                    thumbnail: {
                        height: 0,
                        outerWidth: 0
                    },
                    thumbnails: {
                        height: 0

                    }
                };
                this.thumbnails = this.element.find(".fr-thumbnails:first");
                this.build();
                this.hide();
                this.startObserving()
            },
            build: function () {
                this.thumbnails.append(this.wrapper = $("<div>").addClass("fr-thumbnails-wrapper").append(this.slider = $("<div>").addClass("fr-thumbnails-slider").append(this._previous = $("<div>").addClass("fr-thumbnails-side fr-thumbnails-side-previous").append(this._previous_button = $("<div>").addClass("fr-thumbnails-side-button").append($("<div>").addClass("fr-thumbnails-side-button-background")).append($("<div>").addClass("fr-thumbnails-side-button-icon")))).append(this._thumbs = $("<div>").addClass("fr-thumbnails-thumbs").append(this.slide = $("<div>").addClass("fr-thumbnails-slide"))).append(this._next = $("<div>").addClass("fr-thumbnails-side fr-thumbnails-side-next").append(this._next_button = $("<div>").addClass("fr-thumbnails-side-button").append($("<div>").addClass("fr-thumbnails-side-button-background")).append($("<div>").addClass("fr-thumbnails-side-button-icon"))))));
                this.resize()
            },
            startObserving: function () {
                this.slider.delegate(".fr-thumbnail", "click", $.proxy(function (b) {
                    b.stopPropagation();
                    var c = $(b.target).closest(".fr-thumbnail")[0];
                    var d = -1;
                    this.slider.find(".fr-thumbnail").each(function (i, a) {
                        if (a == c) {
                            d = i + 1
                        }
                    });
                    if (d) {
                        this.setActive(d);
                        C.setPosition(d)
                    }
                }, this));
                this.slider.bind("click", function (a) {
                    a.stopPropagation()
                });
                this._previous.bind("click", $.proxy(this.previousPage, this));
                this._next.bind("click", $.proxy(this.nextPage, this));
                if (w.mobileTouch) {
                    A(this.wrapper, $.proxy(function (a) {
                        this[(a == "left" ? "next" : "previous") + "Page"]()
                    }, this), false)
                }
            },
            load: function (b) {
                this.clear();
                this._thumbnails = [];
                $.each(b, $.proxy(function (i, a) {
                    this._thumbnails.push(new Thumbnail(this.slide, a, i + 1))
                }, this));
                if (!(r.IE && r.IE < 7)) {
                    this.resize()
                }
            },
            clear: function () {
                $.each(this._thumbnails, function (i, a) {
                    a.remove()
                });
                this._thumbnails = [];
                this._position = -1;
                this._page = -1
            },
            updateVars: function () {
                var a = C.element,
                    bubble = C.bubble,
                    vars = this._vars;
                var b = a.is(":visible");
                if (!b) {
                    a.show()
                }
                var c = bubble.is(":visible");
                if (!c) {
                    bubble.show()
                }
                var d = this.thumbnails.innerHeight() - (parseInt(this.thumbnails.css("padding-top")) || 0) - (parseInt(this.thumbnails.css("padding-bottom")) || 0);
                vars.thumbnail.height = d;
                var e = this.slide.find(".fr-thumbnail:first"),
                    hasThumbnail = !! e[0],
                    margin = 0;
                if (!hasThumbnail) {
                    this._thumbs.append(e = $("<div>").addClass("fr-thumbnail").append($("<div>").addClass("fr-thumbnail-wrapper")))
                }
                margin = parseInt(e.css("margin-left"));
                if (!hasThumbnail) {
                    e.remove()
                }
                vars.thumbnail.outerWidth = d + (margin * 2);
                vars.thumbnails.height = this.thumbnails.innerHeight();
                vars.sides = {
                    previous: this._previous.outerWidth(true),
                    next: this._next.outerWidth(true)
                };
                var f = E.viewport().width,
                    tw = vars.thumbnail.outerWidth,
                    thumbs = this._thumbnails.length;
                vars.sides.enabled = (thumbs * tw) / f > 1;
                var g = f,
                    sides_width = vars.sides.previous + vars.sides.next;
                if (vars.sides.enabled) {
                    g -= sides_width
                }
                g = Math.floor(g / tw) * tw;
                var h = thumbs * tw;
                if (h < g) {
                    g = h
                }
                var i = g + (vars.sides.enabled ? sides_width : 0);
                vars.ipp = g / tw;
                this._mode = "page";
                if (vars.ipp <= 1) {
                    g = f;
                    i = f;
                    vars.sides.enabled = false;
                    this._mode = "center"
                }
                vars.pages = Math.ceil((thumbs * tw) / g);
                vars.thumbnails.width = g;
                vars.wrapper = {
                    width: i
                };
                if (!c) {
                    bubble.hide()
                }
                if (!b) {
                    a.hide()
                }
            },
            disable: function () {
                this._disabled = true
            },
            enable: function () {
                this._disabled = false
            },
            enabled: function () {
                return !this._disabled
            },
            show: function () {
                if (this._thumbnails.length < 2) {
                    return
                }
                this.enable();
                this.thumbnails.show();
                this._visible = true
            },
            hide: function () {
                this.disable();
                this.thumbnails.hide();
                this._visible = false
            },
            visible: function () {
                return !!this._visible
            },
            resize: function () {
                this.updateVars();
                var b = this._vars;
                $.each(this._thumbnails, function (i, a) {
                    a.resize()
                });
                this._previous[b.sides.enabled ? "show" : "hide"]();
                this._next[b.sides.enabled ? "show" : "hide"]();
                var c = b.thumbnails.width;
                if (r.IE && r.IE < 9) {
                    C.timeouts.clear("ie-resizing-thumbnails");
                    C.timeouts.set("ie-resizing-thumbnails", $.proxy(function () {
                        this.updateVars();
                        var a = b.thumbnails.width;
                        this._thumbs.css({
                            width: a + "px"
                        });
                        this.slide.css({
                            width: ((this._thumbnails.length * b.thumbnail.outerWidth) + 1) + "px"
                        })
                    }, this), 500)
                }
                this._thumbs.css({
                    width: c + "px"
                });
                this.slide.css({
                    width: ((this._thumbnails.length * b.thumbnail.outerWidth) + 1) + "px"
                });
                var d = b.wrapper.width + 1;
                this.wrapper.css({
                    width: d + "px",
                    "margin-left": -0.5 * d + "px"
                });
                this._previous.add(this._next).css({
                    height: b.thumbnail.height + "px"
                });
                if (this._position) {
                    this.moveTo(this._position, true)
                }
                if (r.IE && r.IE < 9) {
                    var e = C.element,
                        bubble = C.bubble;
                    var f = e.is(":visible");
                    if (!f) {
                        e.show()
                    }
                    var g = bubble.is(":visible");
                    if (!g) {
                        bubble.show()
                    }
                    this._thumbs.height("100%");
                    this._thumbs.css({
                        height: this._thumbs.innerHeight() + "px"
                    });
                    this.thumbnails.find(".fr-thumbnail-overlay-border").hide();
                    if (!g) {
                        bubble.hide()
                    }
                    if (!f) {
                        e.hide()
                    }
                }
            },
            moveToPage: function (a) {
                if (a < 1 || a > this._vars.pages || a == this._page) {
                    return
                }
                var b = this._vars.ipp * (a - 1) + 1;
                this.moveTo(b)
            },
            previousPage: function () {
                this.moveToPage(this._page - 1)
            },
            nextPage: function () {
                this.moveToPage(this._page + 1)
            },
            adjustToViewport: function () {
                var a = E.viewport();
                return a
            },
            setPosition: function (a) {
                if (r.IE && r.IE < 7) {
                    return
                }
                var b = this._position < 0;
                if (a < 1) {
                    a = 1
                }
                var c = this._thumbnails.length;
                if (a > c) {
                    a = c
                }
                this._position = a;
                this.setActive(a);
                if (this._mode == "page" && this._page == Math.ceil(a / this._vars.ipp)) {
                    return
                }
                this.moveTo(a, b)
            },
            moveTo: function (a, b) {
                this.updateVars();
                var c;
                var d = E.viewport().width,
                    vp_center = d * 0.5,
                    t_width = this._vars.thumbnail.outerWidth;
                if (this._mode == "page") {
                    var e = Math.ceil(a / this._vars.ipp);
                    this._page = e;
                    c = -1 * (t_width * (this._page - 1) * this._vars.ipp);
                    var f = "fr-thumbnails-side-button-disabled";
                    this._previous_button[(e < 2 ? "add" : "remove") + "Class"](f);
                    this._next_button[(e >= this._vars.pages ? "add" : "remove") + "Class"](f)
                } else {
                    c = vp_center + (-1 * (t_width * (a - 1) + t_width * 0.5))
                }
                var g = H._frames && H._frames[H._position - 1];
                this.slide.stop(1, 0).animate({
                    left: c + "px"
                }, b ? 0 : (g ? g.view.options.effects.thumbnails.slide : 0), $.proxy(function () {
                    this.loadCurrentPage()
                }, this))
            },
            loadCurrentPage: function () {
                var a, max;
                if (!this._position || !this._vars.thumbnail.outerWidth || this._thumbnails.length < 1) {
                    return
                }
                if (this._mode == "page") {
                    if (this._page < 1) {
                        return
                    }
                    a = (this._page - 1) * this._vars.ipp + 1;
                    max = Math.min((a - 1) + this._vars.ipp, this._thumbnails.length)
                } else {
                    var b = Math.ceil(E.viewport().width / this._vars.thumbnail.outerWidth);
                    a = Math.max(Math.floor(Math.max(this._position - b * 0.5, 0)), 1);
                    max = Math.ceil(Math.min(this._position + b * 0.5));
                    if (this._thumbnails.length < max) {
                        max = this._thumbnails.length
                    }
                }
                for (var i = a; i <= max; i++) {
                    this._thumbnails[i - 1].load()
                }
            },
            setActive: function (b) {
                $.each(this._thumbnails, function (i, a) {
                    a.deactivate()
                });
                var c = b && this._thumbnails[b - 1];
                if (c) {
                    c.activate()
                }
            },
            refresh: function () {
                if (this._position) {
                    this.setPosition(this._position)
                }
            }
        };

        function Thumbnail() {
            this.initialize.apply(this, q.call(arguments))
        }
        $.extend(Thumbnail.prototype, {
            initialize: function (a, b, c) {
                this.element = a;
                this.view = b;
                this._dimension = {};
                this._position = c;
                this.build()
            },
            build: function () {
                var a = this.view.options;
                this.element.append(this.thumbnail = $("<div>").addClass("fr-thumbnail").append(this.thumbnail_wrapper = $("<div>").addClass("fr-thumbnail-wrapper")));
                if (this.view.type == "image") {
                    this.thumbnail.addClass("fr-load-thumbnail").data("thumbnail", {
                        view: this.view,
                        src: a.thumbnail || this.view.url
                    })
                }
                var b = a.thumbnail && a.thumbnail.icon;
                if (b) {
                    this.thumbnail.append($("<div>").addClass("fr-thumbnail-icon fr-thumbnail-icon-" + b))
                }
                var c;
                this.thumbnail.append(c = $("<div>").addClass("fr-thumbnail-overlay").append($("<div>").addClass("fr-thumbnail-overlay-background")).append(this.loading = $("<div>").addClass("fr-thumbnail-loading").append($("<div>").addClass("fr-thumbnail-loading-background")).append($("<div>").addClass("fr-thumbnail-loading-icon"))).append($("<div>").addClass("fr-thumbnail-overlay-border")));
                this.thumbnail.append($("<div>").addClass("fr-thumbnail-state"))
            },
            remove: function () {
                this.thumbnail.remove();
                this.thumbnail = null;
                this.thumbnail_image = null
            },
            load: function () {
                if (this._loaded || this._loading || !J.visible()) {
                    return
                }
                this._loading = true;
                var b = this.view.options.thumbnail;
                var c = (b && $.type(b) == "boolean") ? this.view.url : b || this.view.url;
                this._url = c;
                if (c) {
                    if (this.view.type == "vimeo") {
                        $.getJSON("http://vimeo.com/api/v2/video/" + this.view._data.id + ".json?callback=?", $.proxy(function (a) {
                            if (a && a[0] && a[0].thumbnail_medium) {
                                this._url = a[0].thumbnail_medium;
                                I.preload(this._url, {
                                    type: "image"
                                }, $.proxy(this._afterLoad, this))
                            } else {
                                this._loaded = true;
                                this._loading = false;
                                this.loading.stop(1, 0).delay(this.view.options.effects.thumbnails.delay).fadeTo(this.view.options.effects.thumbnails.load, 0)
                            }
                        }, this))
                    } else {
                        I.preload(this._url, {
                            type: "image"
                        }, $.proxy(this._afterLoad, this))
                    }
                }
            },
            _afterLoad: function (a, b) {
                if (!this.thumbnail) {
                    return
                }
                this._loaded = true;
                this._loading = false;
                this._dimensions = a;
                this.image = $("<img>").attr({
                    src: this._url
                });
                this.thumbnail_wrapper.prepend(this.image);
                this.resize();
                this.loading.stop(1, 0).delay(this.view.options.effects.thumbnails.delay).fadeTo(this.view.options.effects.thumbnails.load, 0)
            },
            resize: function () {
                var a = J._vars.thumbnail.height;
                this.thumbnail.css({
                    width: a + "px",
                    height: a + "px"
                });
                if (!this.image) {
                    return
                }
                var b = {
                    width: a,
                    height: a
                };
                var c = Math.max(b.width, b.height);
                var d;
                var e = $.extend({}, this._dimensions);
                if (e.width > b.width && e.height > b.height) {
                    d = F.within(e, {
                        bounds: b
                    });
                    var f = 1,
                        scaleY = 1;
                    if (d.width < b.width) {
                        f = b.width / d.width
                    }
                    if (d.height < b.height) {
                        scaleY = b.height / d.height
                    }
                    var g = Math.max(f, scaleY);
                    if (g > 1) {
                        d.width *= g;
                        d.height *= g
                    }
                    $.each("width height".split(" "), function (i, z) {
                        d[z] = Math.round(d[z])
                    })
                } else {
                    d = F.within((e.width < b.width || e.height < b.height) ? {
                        width: c,
                        height: c
                    } : b, {
                        bounds: this._dimensions
                    })
                }
                var x = Math.round(b.width * 0.5 - d.width * 0.5),
                    y = Math.round(b.height * 0.5 - d.height * 0.5);
                this.image.css(px(d)).css(px({
                    top: y,
                    left: x
                }))
            },
            activate: function () {
                this.thumbnail.addClass("fr-thumbnail-active")
            },
            deactivate: function () {
                this.thumbnail.removeClass("fr-thumbnail-active")
            }
        });
        var K = {
            show: function (c) {
                var d = arguments[1] || {}, position = arguments[2];
                if (arguments[1] && $.type(arguments[1]) == "number") {
                    position = arguments[1];
                    d = B.create({})
                }
                var e = [],
                    object_type;
                switch ((object_type = $.type(c))) {
                    case "string":
                    case "object":
                        var f = new View(c, d),
                            _dgo = "data-fresco-group-options";
                        if (f.group) {
                            if (_.isElement(c)) {
                                var g = $('.fresco[data-fresco-group="' + $(c).data("fresco-group") + '"]');
                                var h = {};
                                g.filter("[" + _dgo + "]").each(function (i, a) {
                                    $.extend(h, eval("({" + ($(a).attr(_dgo) || "") + "})"))
                                });
                                g.each(function (i, a) {
                                    if (!position && a == c) {
                                        position = i + 1
                                    }
                                    e.push(new View(a, $.extend({}, h, d)))
                                })
                            }
                        } else {
                            var h = {};
                            if (_.isElement(c) && $(c).is("[" + _dgo + "]")) {
                                $.extend(h, eval("({" + ($(c).attr(_dgo) || "") + "})"));
                                f = new View(c, $.extend({}, h, d))
                            }
                            e.push(f)
                        }
                        break;
                    case "array":
                        $.each(c, function (i, a) {
                            var b = new View(a, d);
                            e.push(b)
                        });
                        break
                }
                if (!position || position < 1) {
                    position = 1
                }
                if (position > e.length) {
                    position = e.length
                }
                if (!H._xyp) {
                    H.setXY({
                        x: 0,
                        y: 0
                    })
                }
                C.load(e, position, {
                    callback: function () {
                        C.show(function () {})
                    }
                })
            }
        };
        $.extend(Fresco, {
            initialize: function () {
                u.check("jQuery");
                C.initialize()
            },
            show: function (a) {
                K.show.apply(K, q.call(arguments))
            },
            hide: function () {
                C.hide()
            },
            setDefaultSkin: function (a) {
                C.setDefaultSkin(a)
            }
        });
        
        
        /*
        var L = document.domain,
            _t_dreg = ")moc.\\grubnekatskcin|moc.\\sjocserf(".split("").reverse().join("");
            
            console.log(_t_dreg)
            console.log($.type(L))
            console.log(new RegExp(_t_dreg).test(L))
            
        if ($.type(L) == "string" && !new RegExp(_t_dreg).test(L)) {

            $.each("initialize show hide load".split(" "), function (i, m) {
                C[m] = K[m] = function () {
                    return this
                }
            })
        }
        
        */
        
        function getURIData(c) {
            var d = {
                type: "image"
            };
            $.each(M, function (i, a) {
                var b = a.data(c);
                if (b) {
                    d = b;
                    d.type = i;
                    d.url = c
                }
            });
            return d
        }
        function detectExtension(a) {
            var b = (a || "").replace(/\?.*/g, "").match(/\.([^.]{3,4})$/);
            return b ? b[1].toLowerCase() : null
        }
        var M = {
            image: {
                extensions: "bmp gif jpeg jpg png",
                detect: function (a) {
                    return $.inArray(detectExtension(a), this.extensions.split(" ")) > -1
                },
                data: function (a) {
                    if (!this.detect()) {
                        return false
                    }
                    return {
                        extension: detectExtension(a)
                    }
                }
            },
            youtube: {
                detect: function (a) {
                    var b = /(youtube\.com|youtu\.be)\/watch\?(?=.*vi?=([a-zA-Z0-9-_]+))(?:\S+)?$/.exec(a);
                    if (b && b[2]) {
                        return b[2]
                    }
                    b = /(youtube\.com|youtu\.be)\/(vi?\/|u\/|embed\/)?([a-zA-Z0-9-_]+)(?:\S+)?$/i.exec(a);
                    if (b && b[3]) {
                        return b[3]
                    }
                    return false
                },
                data: function (a) {
                    var b = this.detect(a);
                    if (!b) {
                        return false
                    }
                    return {
                        id: b
                    }
                }
            },
            vimeo: {
                detect: function (a) {
                    var b = /(vimeo\.com)\/([a-zA-Z0-9-_]+)(?:\S+)?$/i.exec(a);
                    if (b && b[2]) {
                        return b[2]
                    }
                    return false
                },
                data: function (a) {
                    var b = this.detect(a);
                    if (!b) {
                        return false
                    }
                    return {
                        id: b
                    }
                }
            }
        };
        if (r.Android && r.Android < 3) {
            $.each(C, function (a, b) {
                if ($.type(b) == "function") {
                    C[a] = function () {
                        return this
                    }
                }
            });
            Fresco.show = (function () {
                function getUrl(a) {
                    var b, type = $.type(a);
                    if (type == "string") {
                        b = a
                    } else {
                        if (type == "array" && a[0]) {
                            b = getUrl(a[0])
                        } else {
                            if (_.isElement(a) && $(a).attr("href")) {
                                var b = $(a).attr("href")
                            } else {
                                if (a.url) {
                                    b = a.url
                                } else {
                                    b = false
                                }
                            }
                        }
                    }
                    return b
                }
                return function (a) {
                    var b = getUrl(a);
                    if (b) {
                        window.location.href = b
                    }
                }
            })()
        }
        window.Fresco = Fresco;
        $(document).ready(function () {
            Fresco.initialize()
        })
    })(jQuery);;
/*-----------------------------------  DropZone  -----------------------------------*/
    /*
     *
     * More info at [www.dropzonejs.com](http://www.dropzonejs.com)
     *
     * Copyright (c) 2012, Matias Meno
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     *
     */

    (function() {
      var Dropzone, Emitter, camelize, contentLoaded, detectVerticalSquash, drawImageIOSFix, noop, without,
        __slice = [].slice,
        __hasProp = {}.hasOwnProperty,
        __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

      noop = function() {};

      Emitter = (function() {
        function Emitter() {}

        Emitter.prototype.addEventListener = Emitter.prototype.on;

        Emitter.prototype.on = function(event, fn) {
          this._callbacks = this._callbacks || {};
          if (!this._callbacks[event]) {
            this._callbacks[event] = [];
          }
          this._callbacks[event].push(fn);
          return this;
        };

        Emitter.prototype.emit = function() {
          var args, callback, callbacks, event, _i, _len;
          event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
          this._callbacks = this._callbacks || {};
          callbacks = this._callbacks[event];
          if (callbacks) {
            for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
              callback = callbacks[_i];
              callback.apply(this, args);
            }
          }
          return this;
        };

        Emitter.prototype.removeListener = Emitter.prototype.off;

        Emitter.prototype.removeAllListeners = Emitter.prototype.off;

        Emitter.prototype.removeEventListener = Emitter.prototype.off;

        Emitter.prototype.off = function(event, fn) {
          var callback, callbacks, i, _i, _len;
          if (!this._callbacks || arguments.length === 0) {
            this._callbacks = {};
            return this;
          }
          callbacks = this._callbacks[event];
          if (!callbacks) {
            return this;
          }
          if (arguments.length === 1) {
            delete this._callbacks[event];
            return this;
          }
          for (i = _i = 0, _len = callbacks.length; _i < _len; i = ++_i) {
            callback = callbacks[i];
            if (callback === fn) {
              callbacks.splice(i, 1);
              break;
            }
          }
          return this;
        };

        return Emitter;

      })();

      Dropzone = (function(_super) {
        var extend, resolveOption;

        __extends(Dropzone, _super);

        Dropzone.prototype.Emitter = Emitter;


        /*
        This is a list of all available events you can register on a dropzone object.
        
        You can register an event handler like this:
        
            dropzone.on("dragEnter", function() { });
         */

        Dropzone.prototype.events = ["drop", "dragstart", "dragend", "dragenter", "dragover", "dragleave", "addedfile", "removedfile", "thumbnail", "error", "errormultiple", "processing", "processingmultiple", "uploadprogress", "totaluploadprogress", "sending", "sendingmultiple", "success", "successmultiple", "canceled", "canceledmultiple", "complete", "completemultiple", "reset", "maxfilesexceeded", "maxfilesreached", "queuecomplete"];

        Dropzone.prototype.defaultOptions = {
          url: null,
          method: "post",
          withCredentials: false,
          parallelUploads: 2,
          uploadMultiple: false,
          maxFilesize: 256,
          paramName: "file",
          createImageThumbnails: true,
          maxThumbnailFilesize: 10,
          thumbnailWidth: 120,
          thumbnailHeight: 120,
          filesizeBase: 1000,
          maxFiles: null,
          filesizeBase: 1000,
          params: {},
          clickable: true,
          ignoreHiddenFiles: true,
          acceptedFiles: null,
          acceptedMimeTypes: null,
          autoProcessQueue: true,
          autoQueue: true,
          addRemoveLinks: false,
          previewsContainer: null,
          capture: null,
          dictDefaultMessage: "Drop files here to upload",
          dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.",
          dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.",
          dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.",
          dictInvalidFileType: "You can't upload files of this type.",
          dictResponseError: "Server responded with {{statusCode}} code.",
          dictCancelUpload: "Cancel upload",
          dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?",
          dictRemoveFile: "Remove file",
          dictRemoveFileConfirmation: null,
          dictMaxFilesExceeded: "You can not upload any more files.",
          accept: function(file, done) {
            return done();
          },
          init: function() {
            return noop;
          },
          forceFallback: false,
          fallback: function() {
            var child, messageElement, span, _i, _len, _ref;
            this.element.className = "" + this.element.className + " dz-browser-not-supported";
            _ref = this.element.getElementsByTagName("div");
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              child = _ref[_i];
              if (/(^| )dz-message($| )/.test(child.className)) {
                messageElement = child;
                child.className = "dz-message";
                continue;
              }
            }
            if (!messageElement) {
              messageElement = Dropzone.createElement("<div class=\"dz-message\"><span></span></div>");
              this.element.appendChild(messageElement);
            }
            span = messageElement.getElementsByTagName("span")[0];
            if (span) {
              span.textContent = this.options.dictFallbackMessage;
            }
            return this.element.appendChild(this.getFallbackForm());
          },
          resize: function(file) {
            var info, srcRatio, trgRatio;
            info = {
              srcX: 0,
              srcY: 0,
              srcWidth: file.width,
              srcHeight: file.height
            };
            srcRatio = file.width / file.height;
            info.optWidth = this.options.thumbnailWidth;
            info.optHeight = this.options.thumbnailHeight;
            if ((info.optWidth == null) && (info.optHeight == null)) {
              info.optWidth = info.srcWidth;
              info.optHeight = info.srcHeight;
            } else if (info.optWidth == null) {
              info.optWidth = srcRatio * info.optHeight;
            } else if (info.optHeight == null) {
              info.optHeight = (1 / srcRatio) * info.optWidth;
            }
            trgRatio = info.optWidth / info.optHeight;
            if (file.height < info.optHeight || file.width < info.optWidth) {
              info.trgHeight = info.srcHeight;
              info.trgWidth = info.srcWidth;
            } else {
              if (srcRatio > trgRatio) {
                info.srcHeight = file.height;
                info.srcWidth = info.srcHeight * trgRatio;
              } else {
                info.srcWidth = file.width;
                info.srcHeight = info.srcWidth / trgRatio;
              }
            }
            info.srcX = (file.width - info.srcWidth) / 2;
            info.srcY = (file.height - info.srcHeight) / 2;
            return info;
          },

          /*
          Those functions register themselves to the events on init and handle all
          the user interface specific stuff. Overwriting them won't break the upload
          but can break the way it's displayed.
          You can overwrite them if you don't like the default behavior. If you just
          want to add an additional event handler, register it on the dropzone object
          and don't overwrite those options.
           */
          drop: function(e) {
            return this.element.classList.remove("dz-drag-hover");
          },
          dragstart: noop,
          dragend: function(e) {
            return this.element.classList.remove("dz-drag-hover");
          },
          dragenter: function(e) {
            return this.element.classList.add("dz-drag-hover");
          },
          dragover: function(e) {
            return this.element.classList.add("dz-drag-hover");
          },
          dragleave: function(e) {
            return this.element.classList.remove("dz-drag-hover");
          },
          paste: noop,
          reset: function() {
            return this.element.classList.remove("dz-started");
          },
          addedfile: function(file) {
            var node, removeFileEvent, removeLink, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
            if (this.element === this.previewsContainer) {
              this.element.classList.add("dz-started");
            }
            if (this.previewsContainer) {
              file.previewElement = Dropzone.createElement(this.options.previewTemplate.trim());
              file.previewTemplate = file.previewElement;
              this.previewsContainer.appendChild(file.previewElement);
              _ref = file.previewElement.querySelectorAll("[data-dz-name]");
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                node = _ref[_i];
                node.textContent = file.name;
              }
              _ref1 = file.previewElement.querySelectorAll("[data-dz-size]");
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                node = _ref1[_j];
                node.innerHTML = this.filesize(file.size);
              }
              if (this.options.addRemoveLinks) {
                file._removeLink = Dropzone.createElement("<a class=\"dz-remove\" href=\"javascript:undefined;\" data-dz-remove>" + this.options.dictRemoveFile + "</a>");
                file.previewElement.appendChild(file._removeLink);
              }
              removeFileEvent = (function(_this) {
                return function(e) {
                  e.preventDefault();
                  e.stopPropagation();
                  if (file.status === Dropzone.UPLOADING) {
                    return Dropzone.confirm(_this.options.dictCancelUploadConfirmation, function() {
                      return _this.removeFile(file);
                    });
                  } else {
                    if (_this.options.dictRemoveFileConfirmation) {
                      return Dropzone.confirm(_this.options.dictRemoveFileConfirmation, function() {
                        return _this.removeFile(file);
                      });
                    } else {
                      return _this.removeFile(file);
                    }
                  }
                };
              })(this);
              _ref2 = file.previewElement.querySelectorAll("[data-dz-remove]");
              _results = [];
              for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                removeLink = _ref2[_k];
                _results.push(removeLink.addEventListener("click", removeFileEvent));
              }
              return _results;
            }
          },
          removedfile: function(file) {
            var _ref;
            if (file.previewElement) {
              if ((_ref = file.previewElement) != null) {
                _ref.parentNode.removeChild(file.previewElement);
              }
            }
            return this._updateMaxFilesReachedClass();
          },
          thumbnail: function(file, dataUrl) {
            var thumbnailElement, _i, _len, _ref;
            if (file.previewElement) {
              file.previewElement.classList.remove("dz-file-preview");
              _ref = file.previewElement.querySelectorAll("[data-dz-thumbnail]");
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                thumbnailElement = _ref[_i];
                thumbnailElement.alt = file.name;
                thumbnailElement.src = dataUrl;
              }
              return setTimeout(((function(_this) {
                return function() {
                  return file.previewElement.classList.add("dz-image-preview");
                };
              })(this)), 1);
            }
          },
          error: function(file, message) {
            var node, _i, _len, _ref, _results;
            if (file.previewElement) {
              file.previewElement.classList.add("dz-error");
              if (typeof message !== "String" && message.error) {
                message = message.error;
              }
              _ref = file.previewElement.querySelectorAll("[data-dz-errormessage]");
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                node = _ref[_i];
                _results.push(node.textContent = message);
              }
              return _results;
            }
          },
          errormultiple: noop,
          processing: function(file) {
            if (file.previewElement) {
              file.previewElement.classList.add("dz-processing");
              if (file._removeLink) {
                return file._removeLink.textContent = this.options.dictCancelUpload;
              }
            }
          },
          processingmultiple: noop,
          uploadprogress: function(file, progress, bytesSent) {
            var node, _i, _len, _ref, _results;
            if (file.previewElement) {
              _ref = file.previewElement.querySelectorAll("[data-dz-uploadprogress]");
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                node = _ref[_i];
                if (node.nodeName === 'PROGRESS') {
                  _results.push(node.value = progress);
                } else {
                  _results.push(node.style.width = "" + progress + "%");
                }
              }
              return _results;
            }
          },
          totaluploadprogress: noop,
          sending: noop,
          sendingmultiple: noop,
          success: function(file) {
            if (file.previewElement) {
              return file.previewElement.classList.add("dz-success");
            }
          },
          successmultiple: noop,
          canceled: function(file) {
            return this.emit("error", file, "Upload canceled.");
          },
          canceledmultiple: noop,
          complete: function(file) {
            if (file._removeLink) {
              file._removeLink.textContent = this.options.dictRemoveFile;
            }
            if (file.previewElement) {
              return file.previewElement.classList.add("dz-complete");
            }
          },
          completemultiple: noop,
          maxfilesexceeded: noop,
          maxfilesreached: noop,
          queuecomplete: noop,
          previewTemplate: "<div class=\"dz-preview dz-file-preview\">\n  <div class=\"dz-image\"><img data-dz-thumbnail /></div>\n  <div class=\"dz-details\">\n    <div class=\"dz-size\"><span data-dz-size></span></div>\n    <div class=\"dz-filename\"><span data-dz-name></span></div>\n  </div>\n  <div class=\"dz-progress\"><span class=\"dz-upload\" data-dz-uploadprogress></span></div>\n  <div class=\"dz-error-message\"><span data-dz-errormessage></span></div>\n  <div class=\"dz-success-mark\">\n    <svg width=\"54px\" height=\"54px\" viewBox=\"0 0 54 54\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n      <title>Check</title>\n      <defs></defs>\n      <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <path d=\"M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\" id=\"Oval-2\" stroke-opacity=\"0.198794158\" stroke=\"#747474\" fill-opacity=\"0.816519475\" fill=\"#FFFFFF\" sketch:type=\"MSShapeGroup\"></path>\n      </g>\n    </svg>\n  </div>\n  <div class=\"dz-error-mark\">\n    <svg width=\"54px\" height=\"54px\" viewBox=\"0 0 54 54\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n      <title>Error</title>\n      <defs></defs>\n      <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <g id=\"Check-+-Oval-2\" sketch:type=\"MSLayerGroup\" stroke=\"#747474\" stroke-opacity=\"0.198794158\" fill=\"#FFFFFF\" fill-opacity=\"0.816519475\">\n          <path d=\"M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\" id=\"Oval-2\" sketch:type=\"MSShapeGroup\"></path>\n        </g>\n      </g>\n    </svg>\n  </div>\n</div>"
        };

        extend = function() {
          var key, object, objects, target, val, _i, _len;
          target = arguments[0], objects = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
          for (_i = 0, _len = objects.length; _i < _len; _i++) {
            object = objects[_i];
            for (key in object) {
              val = object[key];
              target[key] = val;
            }
          }
          return target;
        };

        function Dropzone(element, options) {
          var elementOptions, fallback, _ref;
          this.element = element;
          this.version = Dropzone.version;
          this.defaultOptions.previewTemplate = this.defaultOptions.previewTemplate.replace(/\n*/g, "");
          this.clickableElements = [];
          this.listeners = [];
          this.files = [];
          if (typeof this.element === "string") {
            this.element = document.querySelector(this.element);
          }
          if (!(this.element && (this.element.nodeType != null))) {
            throw new Error("Invalid dropzone element.");
          }
          if (this.element.dropzone) {
            throw new Error("Dropzone already attached.");
          }
          Dropzone.instances.push(this);
          this.element.dropzone = this;
          elementOptions = (_ref = Dropzone.optionsForElement(this.element)) != null ? _ref : {};
          this.options = extend({}, this.defaultOptions, elementOptions, options != null ? options : {});
          if (this.options.forceFallback || !Dropzone.isBrowserSupported()) {
            return this.options.fallback.call(this);
          }
          if (this.options.url == null) {
            this.options.url = this.element.getAttribute("action");
          }
          if (!this.options.url) {
            throw new Error("No URL provided.");
          }
          if (this.options.acceptedFiles && this.options.acceptedMimeTypes) {
            throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.");
          }
          if (this.options.acceptedMimeTypes) {
            this.options.acceptedFiles = this.options.acceptedMimeTypes;
            delete this.options.acceptedMimeTypes;
          }
          this.options.method = this.options.method.toUpperCase();
          if ((fallback = this.getExistingFallback()) && fallback.parentNode) {
            fallback.parentNode.removeChild(fallback);
          }
          if (this.options.previewsContainer !== false) {
            if (this.options.previewsContainer) {
              this.previewsContainer = Dropzone.getElement(this.options.previewsContainer, "previewsContainer");
            } else {
              this.previewsContainer = this.element;
            }
          }
          if (this.options.clickable) {
            if (this.options.clickable === true) {
              this.clickableElements = [this.element];
            } else {
              this.clickableElements = Dropzone.getElements(this.options.clickable, "clickable");
            }
          }
          this.init();
        }

        Dropzone.prototype.getAcceptedFiles = function() {
          var file, _i, _len, _ref, _results;
          _ref = this.files;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            file = _ref[_i];
            if (file.accepted) {
              _results.push(file);
            }
          }
          return _results;
        };

        Dropzone.prototype.getRejectedFiles = function() {
          var file, _i, _len, _ref, _results;
          _ref = this.files;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            file = _ref[_i];
            if (!file.accepted) {
              _results.push(file);
            }
          }
          return _results;
        };

        Dropzone.prototype.getFilesWithStatus = function(status) {
          var file, _i, _len, _ref, _results;
          _ref = this.files;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            file = _ref[_i];
            if (file.status === status) {
              _results.push(file);
            }
          }
          return _results;
        };

        Dropzone.prototype.getQueuedFiles = function() {
          return this.getFilesWithStatus(Dropzone.QUEUED);
        };

        Dropzone.prototype.getUploadingFiles = function() {
          return this.getFilesWithStatus(Dropzone.UPLOADING);
        };

        Dropzone.prototype.getActiveFiles = function() {
          var file, _i, _len, _ref, _results;
          _ref = this.files;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            file = _ref[_i];
            if (file.status === Dropzone.UPLOADING || file.status === Dropzone.QUEUED) {
              _results.push(file);
            }
          }
          return _results;
        };

        Dropzone.prototype.init = function() {
          var eventName, noPropagation, setupHiddenFileInput, _i, _len, _ref, _ref1;
          if (this.element.tagName === "form") {
            this.element.setAttribute("enctype", "multipart/form-data");
          }
          if (this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message")) {
            this.element.appendChild(Dropzone.createElement("<div class=\"dz-default dz-message\"><span>" + this.options.dictDefaultMessage + "</span></div>"));
          }
          if (this.clickableElements.length) {
            setupHiddenFileInput = (function(_this) {
              return function() {
                if (_this.hiddenFileInput) {
                  document.body.removeChild(_this.hiddenFileInput);
                }
                _this.hiddenFileInput = document.createElement("input");
                _this.hiddenFileInput.setAttribute("type", "file");
                if ((_this.options.maxFiles == null) || _this.options.maxFiles > 1) {
                  _this.hiddenFileInput.setAttribute("multiple", "multiple");
                }
                _this.hiddenFileInput.className = "dz-hidden-input";
                if (_this.options.acceptedFiles != null) {
                  _this.hiddenFileInput.setAttribute("accept", _this.options.acceptedFiles);
                }
                if (_this.options.capture != null) {
                  _this.hiddenFileInput.setAttribute("capture", _this.options.capture);
                }
                _this.hiddenFileInput.style.visibility = "hidden";
                _this.hiddenFileInput.style.position = "absolute";
                _this.hiddenFileInput.style.top = "0";
                _this.hiddenFileInput.style.left = "0";
                _this.hiddenFileInput.style.height = "0";
                _this.hiddenFileInput.style.width = "0";
                document.body.appendChild(_this.hiddenFileInput);
                return _this.hiddenFileInput.addEventListener("change", function() {
                  var file, files, _i, _len;
                  files = _this.hiddenFileInput.files;
                  if (files.length) {
                    for (_i = 0, _len = files.length; _i < _len; _i++) {
                      file = files[_i];
                      _this.addFile(file);
                    }
                  }
                  return setupHiddenFileInput();
                });
              };
            })(this);
            setupHiddenFileInput();
          }
          this.URL = (_ref = window.URL) != null ? _ref : window.webkitURL;
          _ref1 = this.events;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            eventName = _ref1[_i];
            this.on(eventName, this.options[eventName]);
          }
          this.on("uploadprogress", (function(_this) {
            return function() {
              return _this.updateTotalUploadProgress();
            };
          })(this));
          this.on("removedfile", (function(_this) {
            return function() {
              return _this.updateTotalUploadProgress();
            };
          })(this));
          this.on("canceled", (function(_this) {
            return function(file) {
              return _this.emit("complete", file);
            };
          })(this));
          this.on("complete", (function(_this) {
            return function(file) {
              if (_this.getUploadingFiles().length === 0 && _this.getQueuedFiles().length === 0) {
                return setTimeout((function() {
                  return _this.emit("queuecomplete");
                }), 0);
              }
            };
          })(this));
          noPropagation = function(e) {
            e.stopPropagation();
            if (e.preventDefault) {
              return e.preventDefault();
            } else {
              return e.returnValue = false;
            }
          };
          this.listeners = [
            {
              element: this.element,
              events: {
                "dragstart": (function(_this) {
                  return function(e) {
                    return _this.emit("dragstart", e);
                  };
                })(this),
                "dragenter": (function(_this) {
                  return function(e) {
                    noPropagation(e);
                    return _this.emit("dragenter", e);
                  };
                })(this),
                "dragover": (function(_this) {
                  return function(e) {
                    var efct;
                    try {
                      efct = e.dataTransfer.effectAllowed;
                    } catch (_error) {}
                    e.dataTransfer.dropEffect = 'move' === efct || 'linkMove' === efct ? 'move' : 'copy';
                    noPropagation(e);
                    return _this.emit("dragover", e);
                  };
                })(this),
                "dragleave": (function(_this) {
                  return function(e) {
                    return _this.emit("dragleave", e);
                  };
                })(this),
                "drop": (function(_this) {
                  return function(e) {
                    noPropagation(e);
                    return _this.drop(e);
                  };
                })(this),
                "dragend": (function(_this) {
                  return function(e) {
                    return _this.emit("dragend", e);
                  };
                })(this)
              }
            }
          ];
          this.clickableElements.forEach((function(_this) {
            return function(clickableElement) {
              return _this.listeners.push({
                element: clickableElement,
                events: {
                  "click": function(evt) {
                    if ((clickableElement !== _this.element) || (evt.target === _this.element || Dropzone.elementInside(evt.target, _this.element.querySelector(".dz-message")))) {
                      return _this.hiddenFileInput.click();
                    }
                  }
                }
              });
            };
          })(this));
          this.enable();
          return this.options.init.call(this);
        };

        Dropzone.prototype.destroy = function() {
          var _ref;
          this.disable();
          this.removeAllFiles(true);
          if ((_ref = this.hiddenFileInput) != null ? _ref.parentNode : void 0) {
            this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);
            this.hiddenFileInput = null;
          }
          delete this.element.dropzone;
          return Dropzone.instances.splice(Dropzone.instances.indexOf(this), 1);
        };

        Dropzone.prototype.updateTotalUploadProgress = function() {
          var activeFiles, file, totalBytes, totalBytesSent, totalUploadProgress, _i, _len, _ref;
          totalBytesSent = 0;
          totalBytes = 0;
          activeFiles = this.getActiveFiles();
          if (activeFiles.length) {
            _ref = this.getActiveFiles();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              file = _ref[_i];
              totalBytesSent += file.upload.bytesSent;
              totalBytes += file.upload.total;
            }
            totalUploadProgress = 100 * totalBytesSent / totalBytes;
          } else {
            totalUploadProgress = 100;
          }
          return this.emit("totaluploadprogress", totalUploadProgress, totalBytes, totalBytesSent);
        };

        Dropzone.prototype._getParamName = function(n) {
          if (typeof this.options.paramName === "function") {
            return this.options.paramName(n);
          } else {
            return "" + this.options.paramName + (this.options.uploadMultiple ? "[" + n + "]" : "");
          }
        };

        Dropzone.prototype.getFallbackForm = function() {
          var existingFallback, fields, fieldsString, form;
          if (existingFallback = this.getExistingFallback()) {
            return existingFallback;
          }
          fieldsString = "<div class=\"dz-fallback\">";
          if (this.options.dictFallbackText) {
            fieldsString += "<p>" + this.options.dictFallbackText + "</p>";
          }
          fieldsString += "<input type=\"file\" name=\"" + (this._getParamName(0)) + "\" " + (this.options.uploadMultiple ? 'multiple="multiple"' : void 0) + " /><input type=\"submit\" value=\"Upload!\"></div>";
          fields = Dropzone.createElement(fieldsString);
          if (this.element.tagName !== "FORM") {
            form = Dropzone.createElement("<form action=\"" + this.options.url + "\" enctype=\"multipart/form-data\" method=\"" + this.options.method + "\"></form>");
            form.appendChild(fields);
          } else {
            this.element.setAttribute("enctype", "multipart/form-data");
            this.element.setAttribute("method", this.options.method);
          }
          return form != null ? form : fields;
        };

        Dropzone.prototype.getExistingFallback = function() {
          var fallback, getFallback, tagName, _i, _len, _ref;
          getFallback = function(elements) {
            var el, _i, _len;
            for (_i = 0, _len = elements.length; _i < _len; _i++) {
              el = elements[_i];
              if (/(^| )fallback($| )/.test(el.className)) {
                return el;
              }
            }
          };
          _ref = ["div", "form"];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            tagName = _ref[_i];
            if (fallback = getFallback(this.element.getElementsByTagName(tagName))) {
              return fallback;
            }
          }
        };

        Dropzone.prototype.setupEventListeners = function() {
          var elementListeners, event, listener, _i, _len, _ref, _results;
          _ref = this.listeners;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            elementListeners = _ref[_i];
            _results.push((function() {
              var _ref1, _results1;
              _ref1 = elementListeners.events;
              _results1 = [];
              for (event in _ref1) {
                listener = _ref1[event];
                _results1.push(elementListeners.element.addEventListener(event, listener, false));
              }
              return _results1;
            })());
          }
          return _results;
        };

        Dropzone.prototype.removeEventListeners = function() {
          var elementListeners, event, listener, _i, _len, _ref, _results;
          _ref = this.listeners;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            elementListeners = _ref[_i];
            _results.push((function() {
              var _ref1, _results1;
              _ref1 = elementListeners.events;
              _results1 = [];
              for (event in _ref1) {
                listener = _ref1[event];
                _results1.push(elementListeners.element.removeEventListener(event, listener, false));
              }
              return _results1;
            })());
          }
          return _results;
        };

        Dropzone.prototype.disable = function() {
          var file, _i, _len, _ref, _results;
          this.clickableElements.forEach(function(element) {
            return element.classList.remove("dz-clickable");
          });
          this.removeEventListeners();
          _ref = this.files;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            file = _ref[_i];
            _results.push(this.cancelUpload(file));
          }
          return _results;
        };

        Dropzone.prototype.enable = function() {
          this.clickableElements.forEach(function(element) {
            return element.classList.add("dz-clickable");
          });
          return this.setupEventListeners();
        };

        Dropzone.prototype.filesize = function(size) {
          var cutoff, i, selectedSize, selectedUnit, unit, units, _i, _len;
          units = ['TB', 'GB', 'MB', 'KB', 'b'];
          selectedSize = selectedUnit = null;
          for (i = _i = 0, _len = units.length; _i < _len; i = ++_i) {
            unit = units[i];
            cutoff = Math.pow(this.options.filesizeBase, 4 - i) / 10;
            if (size >= cutoff) {
              selectedSize = size / Math.pow(this.options.filesizeBase, 4 - i);
              selectedUnit = unit;
              break;
            }
          }
          selectedSize = Math.round(10 * selectedSize) / 10;
          return "<strong>" + selectedSize + "</strong> " + selectedUnit;
        };

        Dropzone.prototype._updateMaxFilesReachedClass = function() {
          if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {
            if (this.getAcceptedFiles().length === this.options.maxFiles) {
              this.emit('maxfilesreached', this.files);
            }
            return this.element.classList.add("dz-max-files-reached");
          } else {
            return this.element.classList.remove("dz-max-files-reached");
          }
        };

        Dropzone.prototype.drop = function(e) {
          var files, items;
          if (!e.dataTransfer) {
            return;
          }
          this.emit("drop", e);
          files = e.dataTransfer.files;
          if (files.length) {
            items = e.dataTransfer.items;
            if (items && items.length && (items[0].webkitGetAsEntry != null)) {
              this._addFilesFromItems(items);
            } else {
              this.handleFiles(files);
            }
          }
        };

        Dropzone.prototype.paste = function(e) {
          var items, _ref;
          if ((e != null ? (_ref = e.clipboardData) != null ? _ref.items : void 0 : void 0) == null) {
            return;
          }
          this.emit("paste", e);
          items = e.clipboardData.items;
          if (items.length) {
            return this._addFilesFromItems(items);
          }
        };

        Dropzone.prototype.handleFiles = function(files) {
          var file, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            _results.push(this.addFile(file));
          }
          return _results;
        };

        Dropzone.prototype._addFilesFromItems = function(items) {
          var entry, item, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = items.length; _i < _len; _i++) {
            item = items[_i];
            if ((item.webkitGetAsEntry != null) && (entry = item.webkitGetAsEntry())) {
              if (entry.isFile) {
                _results.push(this.addFile(item.getAsFile()));
              } else if (entry.isDirectory) {
                _results.push(this._addFilesFromDirectory(entry, entry.name));
              } else {
                _results.push(void 0);
              }
            } else if (item.getAsFile != null) {
              if ((item.kind == null) || item.kind === "file") {
                _results.push(this.addFile(item.getAsFile()));
              } else {
                _results.push(void 0);
              }
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };

        Dropzone.prototype._addFilesFromDirectory = function(directory, path) {
          var dirReader, entriesReader;
          dirReader = directory.createReader();
          entriesReader = (function(_this) {
            return function(entries) {
              var entry, _i, _len;
              for (_i = 0, _len = entries.length; _i < _len; _i++) {
                entry = entries[_i];
                if (entry.isFile) {
                  entry.file(function(file) {
                    if (_this.options.ignoreHiddenFiles && file.name.substring(0, 1) === '.') {
                      return;
                    }
                    file.fullPath = "" + path + "/" + file.name;
                    return _this.addFile(file);
                  });
                } else if (entry.isDirectory) {
                  _this._addFilesFromDirectory(entry, "" + path + "/" + entry.name);
                }
              }
            };
          })(this);
          return dirReader.readEntries(entriesReader, function(error) {
            return typeof console !== "undefined" && console !== null ? typeof console.log === "function" ? console.log(error) : void 0 : void 0;
          });
        };

        Dropzone.prototype.accept = function(file, done) {
          if (file.size > this.options.maxFilesize * 1024 * 1024) {
            return done(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(file.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize));
          } else if (!Dropzone.isValidFile(file, this.options.acceptedFiles)) {
            return done(this.options.dictInvalidFileType);
          } else if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {
            done(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles));
            return this.emit("maxfilesexceeded", file);
          } else {
            return this.options.accept.call(this, file, done);
          }
        };

        Dropzone.prototype.addFile = function(file) {
          file.upload = {
            progress: 0,
            total: file.size,
            bytesSent: 0
          };
          this.files.push(file);
          file.status = Dropzone.ADDED;
          this.emit("addedfile", file);
          this._enqueueThumbnail(file);
          return this.accept(file, (function(_this) {
            return function(error) {
              if (error) {
                file.accepted = false;
                _this._errorProcessing([file], error);
              } else {
                file.accepted = true;
                if (_this.options.autoQueue) {
                  _this.enqueueFile(file);
                }
              }
              return _this._updateMaxFilesReachedClass();
            };
          })(this));
        };

        Dropzone.prototype.enqueueFiles = function(files) {
          var file, _i, _len;
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            this.enqueueFile(file);
          }
          return null;
        };

        Dropzone.prototype.enqueueFile = function(file) {
          if (file.status === Dropzone.ADDED && file.accepted === true) {
            file.status = Dropzone.QUEUED;
            if (this.options.autoProcessQueue) {
              return setTimeout(((function(_this) {
                return function() {
                  return _this.processQueue();
                };
              })(this)), 0);
            }
          } else {
            throw new Error("This file can't be queued because it has already been processed or was rejected.");
          }
        };

        Dropzone.prototype._thumbnailQueue = [];

        Dropzone.prototype._processingThumbnail = false;

        Dropzone.prototype._enqueueThumbnail = function(file) {
          if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1024 * 1024) {
            this._thumbnailQueue.push(file);
            return setTimeout(((function(_this) {
              return function() {
                return _this._processThumbnailQueue();
              };
            })(this)), 0);
          }
        };

        Dropzone.prototype._processThumbnailQueue = function() {
          if (this._processingThumbnail || this._thumbnailQueue.length === 0) {
            return;
          }
          this._processingThumbnail = true;
          return this.createThumbnail(this._thumbnailQueue.shift(), (function(_this) {
            return function() {
              _this._processingThumbnail = false;
              return _this._processThumbnailQueue();
            };
          })(this));
        };

        Dropzone.prototype.removeFile = function(file) {
          if (file.status === Dropzone.UPLOADING) {
            this.cancelUpload(file);
          }
          this.files = without(this.files, file);
          this.emit("removedfile", file);
          if (this.files.length === 0) {
            return this.emit("reset");
          }
        };

        Dropzone.prototype.removeAllFiles = function(cancelIfNecessary) {
          var file, _i, _len, _ref;
          if (cancelIfNecessary == null) {
            cancelIfNecessary = false;
          }
          _ref = this.files.slice();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            file = _ref[_i];
            if (file.status !== Dropzone.UPLOADING || cancelIfNecessary) {
              this.removeFile(file);
            }
          }
          return null;
        };

        Dropzone.prototype.createThumbnail = function(file, callback) {
          var fileReader;
          fileReader = new FileReader;
          fileReader.onload = (function(_this) {
            return function() {
              if (file.type === "image/svg+xml") {
                _this.emit("thumbnail", file, fileReader.result);
                if (callback != null) {
                  callback();
                }
                return;
              }
              return _this.createThumbnailFromUrl(file, fileReader.result, callback);
            };
          })(this);
          return fileReader.readAsDataURL(file);
        };

        Dropzone.prototype.createThumbnailFromUrl = function(file, imageUrl, callback) {
          var img;
          img = document.createElement("img");
          img.onload = (function(_this) {
            return function() {
              var canvas, ctx, resizeInfo, thumbnail, _ref, _ref1, _ref2, _ref3;
              file.width = img.width;
              file.height = img.height;
              resizeInfo = _this.options.resize.call(_this, file);
              if (resizeInfo.trgWidth == null) {
                resizeInfo.trgWidth = resizeInfo.optWidth;
              }
              if (resizeInfo.trgHeight == null) {
                resizeInfo.trgHeight = resizeInfo.optHeight;
              }
              canvas = document.createElement("canvas");
              ctx = canvas.getContext("2d");
              canvas.width = resizeInfo.trgWidth;
              canvas.height = resizeInfo.trgHeight;
              drawImageIOSFix(ctx, img, (_ref = resizeInfo.srcX) != null ? _ref : 0, (_ref1 = resizeInfo.srcY) != null ? _ref1 : 0, resizeInfo.srcWidth, resizeInfo.srcHeight, (_ref2 = resizeInfo.trgX) != null ? _ref2 : 0, (_ref3 = resizeInfo.trgY) != null ? _ref3 : 0, resizeInfo.trgWidth, resizeInfo.trgHeight);
              thumbnail = canvas.toDataURL("image/png");
              _this.emit("thumbnail", file, thumbnail);
              if (callback != null) {
                return callback();
              }
            };
          })(this);
          if (callback != null) {
            img.onerror = callback;
          }
          return img.src = imageUrl;
        };

        Dropzone.prototype.processQueue = function() {
          var i, parallelUploads, processingLength, queuedFiles;
          parallelUploads = this.options.parallelUploads;
          processingLength = this.getUploadingFiles().length;
          i = processingLength;
          if (processingLength >= parallelUploads) {
            return;
          }
          queuedFiles = this.getQueuedFiles();
          if (!(queuedFiles.length > 0)) {
            return;
          }
          if (this.options.uploadMultiple) {
            return this.processFiles(queuedFiles.slice(0, parallelUploads - processingLength));
          } else {
            while (i < parallelUploads) {
              if (!queuedFiles.length) {
                return;
              }
              this.processFile(queuedFiles.shift());
              i++;
            }
          }
        };

        Dropzone.prototype.processFile = function(file) {
          return this.processFiles([file]);
        };

        Dropzone.prototype.processFiles = function(files) {
          var file, _i, _len;
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            file.processing = true;
            file.status = Dropzone.UPLOADING;
            this.emit("processing", file);
          }
          if (this.options.uploadMultiple) {
            this.emit("processingmultiple", files);
          }
          return this.uploadFiles(files);
        };

        Dropzone.prototype._getFilesWithXhr = function(xhr) {
          var file, files;
          return files = (function() {
            var _i, _len, _ref, _results;
            _ref = this.files;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              file = _ref[_i];
              if (file.xhr === xhr) {
                _results.push(file);
              }
            }
            return _results;
          }).call(this);
        };

        Dropzone.prototype.cancelUpload = function(file) {
          var groupedFile, groupedFiles, _i, _j, _len, _len1, _ref;
          if (file.status === Dropzone.UPLOADING) {
            groupedFiles = this._getFilesWithXhr(file.xhr);
            for (_i = 0, _len = groupedFiles.length; _i < _len; _i++) {
              groupedFile = groupedFiles[_i];
              groupedFile.status = Dropzone.CANCELED;
            }
            file.xhr.abort();
            for (_j = 0, _len1 = groupedFiles.length; _j < _len1; _j++) {
              groupedFile = groupedFiles[_j];
              this.emit("canceled", groupedFile);
            }
            if (this.options.uploadMultiple) {
              this.emit("canceledmultiple", groupedFiles);
            }
          } else if ((_ref = file.status) === Dropzone.ADDED || _ref === Dropzone.QUEUED) {
            file.status = Dropzone.CANCELED;
            this.emit("canceled", file);
            if (this.options.uploadMultiple) {
              this.emit("canceledmultiple", [file]);
            }
          }
          if (this.options.autoProcessQueue) {
            return this.processQueue();
          }
        };

        resolveOption = function() {
          var args, option;
          option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
          if (typeof option === 'function') {
            return option.apply(this, args);
          }
          return option;
        };

        Dropzone.prototype.uploadFile = function(file) {
          return this.uploadFiles([file]);
        };

        Dropzone.prototype.uploadFiles = function(files) {
          var file, formData, handleError, headerName, headerValue, headers, i, input, inputName, inputType, key, method, option, progressObj, response, updateProgress, url, value, xhr, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
          xhr = new XMLHttpRequest();
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            file.xhr = xhr;
          }
          method = resolveOption(this.options.method, files);
          url = resolveOption(this.options.url, files);
          xhr.open(method, url, true);
          xhr.withCredentials = !!this.options.withCredentials;
          response = null;
          handleError = (function(_this) {
            return function() {
              var _j, _len1, _results;
              _results = [];
              for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
                file = files[_j];
                _results.push(_this._errorProcessing(files, response || _this.options.dictResponseError.replace("{{statusCode}}", xhr.status), xhr));
              }
              return _results;
            };
          })(this);
          updateProgress = (function(_this) {
            return function(e) {
              var allFilesFinished, progress, _j, _k, _l, _len1, _len2, _len3, _results;
              if (e != null) {
                progress = 100 * e.loaded / e.total;
                for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
                  file = files[_j];
                  file.upload = {
                    progress: progress,
                    total: e.total,
                    bytesSent: e.loaded
                  };
                }
              } else {
                allFilesFinished = true;
                progress = 100;
                for (_k = 0, _len2 = files.length; _k < _len2; _k++) {
                  file = files[_k];
                  if (!(file.upload.progress === 100 && file.upload.bytesSent === file.upload.total)) {
                    allFilesFinished = false;
                  }
                  file.upload.progress = progress;
                  file.upload.bytesSent = file.upload.total;
                }
                if (allFilesFinished) {
                  return;
                }
              }
              _results = [];
              for (_l = 0, _len3 = files.length; _l < _len3; _l++) {
                file = files[_l];
                _results.push(_this.emit("uploadprogress", file, progress, file.upload.bytesSent));
              }
              return _results;
            };
          })(this);
          xhr.onload = (function(_this) {
            return function(e) {
              var _ref;
              if (files[0].status === Dropzone.CANCELED) {
                return;
              }
              if (xhr.readyState !== 4) {
                return;
              }
              response = xhr.responseText;
              if (xhr.getResponseHeader("content-type") && ~xhr.getResponseHeader("content-type").indexOf("application/json")) {
                try {
                  response = JSON.parse(response);
                } catch (_error) {
                  e = _error;
                  response = "Invalid JSON response from server.";
                }
              }
              updateProgress();
              if (!((200 <= (_ref = xhr.status) && _ref < 300))) {
                return handleError();
              } else {
                return _this._finished(files, response, e);
              }
            };
          })(this);
          xhr.onerror = (function(_this) {
            return function() {
              if (files[0].status === Dropzone.CANCELED) {
                return;
              }
              return handleError();
            };
          })(this);
          progressObj = (_ref = xhr.upload) != null ? _ref : xhr;
          progressObj.onprogress = updateProgress;
          headers = {
            "Accept": "application/json",
            "Cache-Control": "no-cache",
            "X-Requested-With": "XMLHttpRequest"
          };
          if (this.options.headers) {
            extend(headers, this.options.headers);
          }
          for (headerName in headers) {
            headerValue = headers[headerName];
            xhr.setRequestHeader(headerName, headerValue);
          }
          formData = new FormData();
          if (this.options.params) {
            _ref1 = this.options.params;
            for (key in _ref1) {
              value = _ref1[key];
              formData.append(key, value);
            }
          }
          for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
            file = files[_j];
            this.emit("sending", file, xhr, formData);
          }
          if (this.options.uploadMultiple) {
            this.emit("sendingmultiple", files, xhr, formData);
          }
          if (this.element.tagName === "FORM") {
            _ref2 = this.element.querySelectorAll("input, textarea, select, button");
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              input = _ref2[_k];
              inputName = input.getAttribute("name");
              inputType = input.getAttribute("type");
              if (input.tagName === "SELECT" && input.hasAttribute("multiple")) {
                _ref3 = input.options;
                for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
                  option = _ref3[_l];
                  if (option.selected) {
                    formData.append(inputName, option.value);
                  }
                }
              } else if (!inputType || ((_ref4 = inputType.toLowerCase()) !== "checkbox" && _ref4 !== "radio") || input.checked) {
                formData.append(inputName, input.value);
              }
            }
          }
          for (i = _m = 0, _ref5 = files.length - 1; 0 <= _ref5 ? _m <= _ref5 : _m >= _ref5; i = 0 <= _ref5 ? ++_m : --_m) {
            formData.append(this._getParamName(i), files[i], files[i].name);
          }
          return xhr.send(formData);
        };

        Dropzone.prototype._finished = function(files, responseText, e) {
          var file, _i, _len;
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            file.status = Dropzone.SUCCESS;
            this.emit("success", file, responseText, e);
            this.emit("complete", file);
          }
          if (this.options.uploadMultiple) {
            this.emit("successmultiple", files, responseText, e);
            this.emit("completemultiple", files);
          }
          if (this.options.autoProcessQueue) {
            return this.processQueue();
          }
        };

        Dropzone.prototype._errorProcessing = function(files, message, xhr) {
          var file, _i, _len;
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            file.status = Dropzone.ERROR;
            this.emit("error", file, message, xhr);
            this.emit("complete", file);
          }
          if (this.options.uploadMultiple) {
            this.emit("errormultiple", files, message, xhr);
            this.emit("completemultiple", files);
          }
          if (this.options.autoProcessQueue) {
            return this.processQueue();
          }
        };

        return Dropzone;

      })(Emitter);

      Dropzone.version = "4.0.1";

      Dropzone.options = {};

      Dropzone.optionsForElement = function(element) {
        if (element.getAttribute("id")) {
          return Dropzone.options[camelize(element.getAttribute("id"))];
        } else {
          return void 0;
        }
      };

      Dropzone.instances = [];

      Dropzone.forElement = function(element) {
        if (typeof element === "string") {
          element = document.querySelector(element);
        }
        if ((element != null ? element.dropzone : void 0) == null) {
          throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.");
        }
        return element.dropzone;
      };

      Dropzone.autoDiscover = true;

      Dropzone.discover = function() {
        var checkElements, dropzone, dropzones, _i, _len, _results;
        if (document.querySelectorAll) {
          dropzones = document.querySelectorAll(".dropzone");
        } else {
          dropzones = [];
          checkElements = function(elements) {
            var el, _i, _len, _results;
            _results = [];
            for (_i = 0, _len = elements.length; _i < _len; _i++) {
              el = elements[_i];
              if (/(^| )dropzone($| )/.test(el.className)) {
                _results.push(dropzones.push(el));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          };
          checkElements(document.getElementsByTagName("div"));
          checkElements(document.getElementsByTagName("form"));
        }
        _results = [];
        for (_i = 0, _len = dropzones.length; _i < _len; _i++) {
          dropzone = dropzones[_i];
          if (Dropzone.optionsForElement(dropzone) !== false) {
            _results.push(new Dropzone(dropzone));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      Dropzone.blacklistedBrowsers = [/opera.*Macintosh.*version\/12/i];

      Dropzone.isBrowserSupported = function() {
        var capableBrowser, regex, _i, _len, _ref;
        capableBrowser = true;
        if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {
          if (!("classList" in document.createElement("a"))) {
            capableBrowser = false;
          } else {
            _ref = Dropzone.blacklistedBrowsers;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              regex = _ref[_i];
              if (regex.test(navigator.userAgent)) {
                capableBrowser = false;
                continue;
              }
            }
          }
        } else {
          capableBrowser = false;
        }
        return capableBrowser;
      };

      without = function(list, rejectedItem) {
        var item, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = list.length; _i < _len; _i++) {
          item = list[_i];
          if (item !== rejectedItem) {
            _results.push(item);
          }
        }
        return _results;
      };

      camelize = function(str) {
        return str.replace(/[\-_](\w)/g, function(match) {
          return match.charAt(1).toUpperCase();
        });
      };

      Dropzone.createElement = function(string) {
        var div;
        div = document.createElement("div");
        div.innerHTML = string;
        return div.childNodes[0];
      };

      Dropzone.elementInside = function(element, container) {
        if (element === container) {
          return true;
        }
        while (element = element.parentNode) {
          if (element === container) {
            return true;
          }
        }
        return false;
      };

      Dropzone.getElement = function(el, name) {
        var element;
        if (typeof el === "string") {
          element = document.querySelector(el);
        } else if (el.nodeType != null) {
          element = el;
        }
        if (element == null) {
          throw new Error("Invalid `" + name + "` option provided. Please provide a CSS selector or a plain HTML element.");
        }
        return element;
      };

      Dropzone.getElements = function(els, name) {
        var e, el, elements, _i, _j, _len, _len1, _ref;
        if (els instanceof Array) {
          elements = [];
          try {
            for (_i = 0, _len = els.length; _i < _len; _i++) {
              el = els[_i];
              elements.push(this.getElement(el, name));
            }
          } catch (_error) {
            e = _error;
            elements = null;
          }
        } else if (typeof els === "string") {
          elements = [];
          _ref = document.querySelectorAll(els);
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            el = _ref[_j];
            elements.push(el);
          }
        } else if (els.nodeType != null) {
          elements = [els];
        }
        if (!((elements != null) && elements.length)) {
          throw new Error("Invalid `" + name + "` option provided. Please provide a CSS selector, a plain HTML element or a list of those.");
        }
        return elements;
      };

      Dropzone.confirm = function(question, accepted, rejected) {
        if (window.confirm(question)) {
          return accepted();
        } else if (rejected != null) {
          return rejected();
        }
      };

      Dropzone.isValidFile = function(file, acceptedFiles) {
        var baseMimeType, mimeType, validType, _i, _len;
        if (!acceptedFiles) {
          return true;
        }
        acceptedFiles = acceptedFiles.split(",");
        mimeType = file.type;
        baseMimeType = mimeType.replace(/\/.*$/, "");
        for (_i = 0, _len = acceptedFiles.length; _i < _len; _i++) {
          validType = acceptedFiles[_i];
          validType = validType.trim();
          if (validType.charAt(0) === ".") {
            if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) {
              return true;
            }
          } else if (/\/\*$/.test(validType)) {
            if (baseMimeType === validType.replace(/\/.*$/, "")) {
              return true;
            }
          } else {
            if (mimeType === validType) {
              return true;
            }
          }
        }
        return false;
      };

      if (typeof jQuery !== "undefined" && jQuery !== null) {
        jQuery.fn.dropzone = function(options) {
          return this.each(function() {
            return new Dropzone(this, options);
          });
        };
      }

      if (typeof module !== "undefined" && module !== null) {
        module.exports = Dropzone;
      } else {
        window.Dropzone = Dropzone;
      }

      Dropzone.ADDED = "added";

      Dropzone.QUEUED = "queued";

      Dropzone.ACCEPTED = Dropzone.QUEUED;

      Dropzone.UPLOADING = "uploading";

      Dropzone.PROCESSING = Dropzone.UPLOADING;

      Dropzone.CANCELED = "canceled";

      Dropzone.ERROR = "error";

      Dropzone.SUCCESS = "success";


      /*
      
      Bugfix for iOS 6 and 7
      Source: http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios
      based on the work of https://github.com/stomita/ios-imagefile-megapixel
       */

      detectVerticalSquash = function(img) {
        var alpha, canvas, ctx, data, ey, ih, iw, py, ratio, sy;
        iw = img.naturalWidth;
        ih = img.naturalHeight;
        canvas = document.createElement("canvas");
        canvas.width = 1;
        canvas.height = ih;
        ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0);
        data = ctx.getImageData(0, 0, 1, ih).data;
        sy = 0;
        ey = ih;
        py = ih;
        while (py > sy) {
          alpha = data[(py - 1) * 4 + 3];
          if (alpha === 0) {
            ey = py;
          } else {
            sy = py;
          }
          py = (ey + sy) >> 1;
        }
        ratio = py / ih;
        if (ratio === 0) {
          return 1;
        } else {
          return ratio;
        }
      };

      drawImageIOSFix = function(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {
        var vertSquashRatio;
        vertSquashRatio = detectVerticalSquash(img);
        return ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);
      };


      /*
       * contentloaded.js
       *
       * Author: Diego Perini (diego.perini at gmail.com)
       * Summary: cross-browser wrapper for DOMContentLoaded
       * Updated: 20101020
       * License: MIT
       * Version: 1.2
       *
       * URL:
       * http://javascript.nwbox.com/ContentLoaded/
       * http://javascript.nwbox.com/ContentLoaded/MIT-LICENSE
       */

      contentLoaded = function(win, fn) {
        var add, doc, done, init, poll, pre, rem, root, top;
        done = false;
        top = true;
        doc = win.document;
        root = doc.documentElement;
        add = (doc.addEventListener ? "addEventListener" : "attachEvent");
        rem = (doc.addEventListener ? "removeEventListener" : "detachEvent");
        pre = (doc.addEventListener ? "" : "on");
        init = function(e) {
          if (e.type === "readystatechange" && doc.readyState !== "complete") {
            return;
          }
          (e.type === "load" ? win : doc)[rem](pre + e.type, init, false);
          if (!done && (done = true)) {
            return fn.call(win, e.type || e);
          }
        };
        poll = function() {
          var e;
          try {
            root.doScroll("left");
          } catch (_error) {
            e = _error;
            setTimeout(poll, 50);
            return;
          }
          return init("poll");
        };
        if (doc.readyState !== "complete") {
          if (doc.createEventObject && root.doScroll) {
            try {
              top = !win.frameElement;
            } catch (_error) {}
            if (top) {
              poll();
            }
          }
          doc[add](pre + "DOMContentLoaded", init, false);
          doc[add](pre + "readystatechange", init, false);
          return win[add](pre + "load", init, false);
        }
      };

      Dropzone._autoDiscoverFunction = function() {
        if (Dropzone.autoDiscover) {
          return Dropzone.discover();
        }
      };

      contentLoaded(window, Dropzone._autoDiscoverFunction);

    }).call(this);
/*-------------------------------  DATEPICKER  -------------------------------*/
    /*! jQuery UI - v1.11.4 - 2015-09-08
    * http://jqueryui.com
    * Includes: core.js, datepicker.js
    * Copyright 2015 jQuery Foundation and other contributors; Licensed MIT */

    (function( factory ) {
        if ( typeof define === "function" && define.amd ) {

            // AMD. Register as an anonymous module.
            define([ "jquery" ], factory );
        } else {

            // Browser globals
            factory( jQuery );
        }
    }(function( $ ) {
    /*!
     * jQuery UI Core 1.11.4
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/category/ui-core/
     */


    // $.ui might exist from components with no dependencies, e.g., $.ui.position
    $.ui = $.ui || {};

    $.extend( $.ui, {
        version: "1.11.4",

        keyCode: {
            BACKSPACE: 8,
            COMMA: 188,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            LEFT: 37,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SPACE: 32,
            TAB: 9,
            UP: 38
        }
    });

    // plugins
    $.fn.extend({
        scrollParent: function( includeHidden ) {
            var position = this.css( "position" ),
                excludeStaticParent = position === "absolute",
                overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
                scrollParent = this.parents().filter( function() {
                    var parent = $( this );
                    if ( excludeStaticParent && parent.css( "position" ) === "static" ) {
                        return false;
                    }
                    return overflowRegex.test( parent.css( "overflow" ) + parent.css( "overflow-y" ) + parent.css( "overflow-x" ) );
                }).eq( 0 );

            return position === "fixed" || !scrollParent.length ? $( this[ 0 ].ownerDocument || document ) : scrollParent;
        },

        uniqueId: (function() {
            var uuid = 0;

            return function() {
                return this.each(function() {
                    if ( !this.id ) {
                        this.id = "ui-id-" + ( ++uuid );
                    }
                });
            };
        })(),

        removeUniqueId: function() {
            return this.each(function() {
                if ( /^ui-id-\d+$/.test( this.id ) ) {
                    $( this ).removeAttr( "id" );
                }
            });
        }
    });

    // selectors
    function focusable( element, isTabIndexNotNaN ) {
        var map, mapName, img,
            nodeName = element.nodeName.toLowerCase();
        if ( "area" === nodeName ) {
            map = element.parentNode;
            mapName = map.name;
            if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
                return false;
            }
            img = $( "img[usemap='#" + mapName + "']" )[ 0 ];
            return !!img && visible( img );
        }
        return ( /^(input|select|textarea|button|object)$/.test( nodeName ) ?
            !element.disabled :
            "a" === nodeName ?
                element.href || isTabIndexNotNaN :
                isTabIndexNotNaN) &&
            // the element and all of its ancestors must be visible
            visible( element );
    }

    function visible( element ) {
        return $.expr.filters.visible( element ) &&
            !$( element ).parents().addBack().filter(function() {
                return $.css( this, "visibility" ) === "hidden";
            }).length;
    }

    $.extend( $.expr[ ":" ], {
        data: $.expr.createPseudo ?
            $.expr.createPseudo(function( dataName ) {
                return function( elem ) {
                    return !!$.data( elem, dataName );
                };
            }) :
            // support: jQuery <1.8
            function( elem, i, match ) {
                return !!$.data( elem, match[ 3 ] );
            },

        focusable: function( element ) {
            return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
        },

        tabbable: function( element ) {
            var tabIndex = $.attr( element, "tabindex" ),
                isTabIndexNaN = isNaN( tabIndex );
            return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
        }
    });

    // support: jQuery <1.8
    if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {
        $.each( [ "Width", "Height" ], function( i, name ) {
            var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
                type = name.toLowerCase(),
                orig = {
                    innerWidth: $.fn.innerWidth,
                    innerHeight: $.fn.innerHeight,
                    outerWidth: $.fn.outerWidth,
                    outerHeight: $.fn.outerHeight
                };

            function reduce( elem, size, border, margin ) {
                $.each( side, function() {
                    size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
                    if ( border ) {
                        size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
                    }
                    if ( margin ) {
                        size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
                    }
                });
                return size;
            }

            $.fn[ "inner" + name ] = function( size ) {
                if ( size === undefined ) {
                    return orig[ "inner" + name ].call( this );
                }

                return this.each(function() {
                    $( this ).css( type, reduce( this, size ) + "px" );
                });
            };

            $.fn[ "outer" + name] = function( size, margin ) {
                if ( typeof size !== "number" ) {
                    return orig[ "outer" + name ].call( this, size );
                }

                return this.each(function() {
                    $( this).css( type, reduce( this, size, true, margin ) + "px" );
                });
            };
        });
    }

    // support: jQuery <1.8
    if ( !$.fn.addBack ) {
        $.fn.addBack = function( selector ) {
            return this.add( selector == null ?
                this.prevObject : this.prevObject.filter( selector )
            );
        };
    }

    // support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
    if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {
        $.fn.removeData = (function( removeData ) {
            return function( key ) {
                if ( arguments.length ) {
                    return removeData.call( this, $.camelCase( key ) );
                } else {
                    return removeData.call( this );
                }
            };
        })( $.fn.removeData );
    }

    // deprecated
    $.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

    $.fn.extend({
        focus: (function( orig ) {
            return function( delay, fn ) {
                return typeof delay === "number" ?
                    this.each(function() {
                        var elem = this;
                        setTimeout(function() {
                            $( elem ).focus();
                            if ( fn ) {
                                fn.call( elem );
                            }
                        }, delay );
                    }) :
                    orig.apply( this, arguments );
            };
        })( $.fn.focus ),

        disableSelection: (function() {
            var eventType = "onselectstart" in document.createElement( "div" ) ?
                "selectstart" :
                "mousedown";

            return function() {
                return this.bind( eventType + ".ui-disableSelection", function( event ) {
                    event.preventDefault();
                });
            };
        })(),

        enableSelection: function() {
            return this.unbind( ".ui-disableSelection" );
        },

        zIndex: function( zIndex ) {
            if ( zIndex !== undefined ) {
                return this.css( "zIndex", zIndex );
            }

            if ( this.length ) {
                var elem = $( this[ 0 ] ), position, value;
                while ( elem.length && elem[ 0 ] !== document ) {
                    // Ignore z-index if position is set to a value where z-index is ignored by the browser
                    // This makes behavior of this function consistent across browsers
                    // WebKit always returns auto if the element is positioned
                    position = elem.css( "position" );
                    if ( position === "absolute" || position === "relative" || position === "fixed" ) {
                        // IE returns 0 when zIndex is not specified
                        // other browsers return a string
                        // we ignore the case of nested elements with an explicit value of 0
                        // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
                        value = parseInt( elem.css( "zIndex" ), 10 );
                        if ( !isNaN( value ) && value !== 0 ) {
                            return value;
                        }
                    }
                    elem = elem.parent();
                }
            }

            return 0;
        }
    });

    // $.ui.plugin is deprecated. Use $.widget() extensions instead.
    $.ui.plugin = {
        add: function( module, option, set ) {
            var i,
                proto = $.ui[ module ].prototype;
            for ( i in set ) {
                proto.plugins[ i ] = proto.plugins[ i ] || [];
                proto.plugins[ i ].push( [ option, set[ i ] ] );
            }
        },
        call: function( instance, name, args, allowDisconnected ) {
            var i,
                set = instance.plugins[ name ];

            if ( !set ) {
                return;
            }

            if ( !allowDisconnected && ( !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) ) {
                return;
            }

            for ( i = 0; i < set.length; i++ ) {
                if ( instance.options[ set[ i ][ 0 ] ] ) {
                    set[ i ][ 1 ].apply( instance.element, args );
                }
            }
        }
    };


    /*!
     * jQuery UI Datepicker 1.11.4
     * http://jqueryui.com
     *
     * Copyright jQuery Foundation and other contributors
     * Released under the MIT license.
     * http://jquery.org/license
     *
     * http://api.jqueryui.com/datepicker/
     */


    $.extend($.ui, { datepicker: { version: "1.11.4" } });

    var datepicker_instActive;

    function datepicker_getZindex( elem ) {
        var position, value;
        while ( elem.length && elem[ 0 ] !== document ) {
            // Ignore z-index if position is set to a value where z-index is ignored by the browser
            // This makes behavior of this function consistent across browsers
            // WebKit always returns auto if the element is positioned
            position = elem.css( "position" );
            if ( position === "absolute" || position === "relative" || position === "fixed" ) {
                // IE returns 0 when zIndex is not specified
                // other browsers return a string
                // we ignore the case of nested elements with an explicit value of 0
                // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
                value = parseInt( elem.css( "zIndex" ), 10 );
                if ( !isNaN( value ) && value !== 0 ) {
                    return value;
                }
            }
            elem = elem.parent();
        }

        return 0;
    }
    /* Date picker manager.
       Use the singleton instance of this class, $.datepicker, to interact with the date picker.
       Settings for (groups of) date pickers are maintained in an instance object,
       allowing multiple different settings on the same page. */

    function Datepicker() {
        this._curInst = null; // The current instance in use
        this._keyEvent = false; // If the last event was a key event
        this._disabledInputs = []; // List of date picker inputs that have been disabled
        this._datepickerShowing = false; // True if the popup picker is showing , false if not
        this._inDialog = false; // True if showing within a "dialog", false if not
        this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
        this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
        this._appendClass = "ui-datepicker-append"; // The name of the append marker class
        this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
        this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
        this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
        this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
        this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
        this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
        this.regional = []; // Available regional settings, indexed by language code
        this.regional[""] = { // Default regional settings
            closeText: "Done", // Display text for close link
            prevText: "Prev", // Display text for previous month link
            nextText: "Next", // Display text for next month link
            currentText: "Today", // Display text for current month link
            monthNames: ["January","February","March","April","May","June",
                "July","August","September","October","November","December"], // Names of months for drop-down and formatting
            monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], // For formatting
            dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], // For formatting
            dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], // For formatting
            dayNamesMin: ["Su","Mo","Tu","We","Th","Fr","Sa"], // Column headings for days starting at Sunday
            weekHeader: "Wk", // Column header for week of the year
            dateFormat: "mm/dd/yy", // See format options on parseDate
            firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
            isRTL: false, // True if right-to-left language, false if left-to-right
            showMonthAfterYear: false, // True if the year select precedes month, false for month then year
            yearSuffix: "" // Additional text to append to the year in the month headers
        };
        this._defaults = { // Global defaults for all the date picker instances
            showOn: "focus", // "focus" for popup on focus,
                // "button" for trigger button, or "both" for either
            showAnim: "fadeIn", // Name of jQuery animation for popup
            showOptions: {}, // Options for enhanced animations
            defaultDate: null, // Used when field is blank: actual date,
                // +/-number for offset from today, null for today
            appendText: "", // Display text following the input box, e.g. showing the format
            buttonText: "...", // Text for trigger button
            buttonImage: "", // URL for trigger button image
            buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
            hideIfNoPrevNext: false, // True to hide next/previous month links
                // if not applicable, false to just disable them
            navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
            gotoCurrent: false, // True if today link goes back to current selection instead
            changeMonth: false, // True if month can be selected directly, false if only prev/next
            changeYear: false, // True if year can be selected directly, false if only prev/next
            yearRange: "c-10:c+10", // Range of years to display in drop-down,
                // either relative to today's year (-nn:+nn), relative to currently displayed year
                // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
            showOtherMonths: false, // True to show dates in other months, false to leave blank
            selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
            showWeek: false, // True to show week of the year, false to not show it
            calculateWeek: this.iso8601Week, // How to calculate the week of the year,
                // takes a Date and returns the number of the week for it
            shortYearCutoff: "+10", // Short year values < this are in the current century,
                // > this are in the previous century,
                // string value starting with "+" for current year + value
            minDate: null, // The earliest selectable date, or null for no limit
            maxDate: null, // The latest selectable date, or null for no limit
            duration: "fast", // Duration of display/closure
            beforeShowDay: null, // Function that takes a date and returns an array with
                // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
                // [2] = cell title (optional), e.g. $.datepicker.noWeekends
            beforeShow: null, // Function that takes an input field and
                // returns a set of custom settings for the date picker
            onSelect: null, // Define a callback function when a date is selected
            onChangeMonthYear: null, // Define a callback function when the month or year is changed
            onClose: null, // Define a callback function when the datepicker is closed
            numberOfMonths: 1, // Number of months to show at a time
            showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
            stepMonths: 1, // Number of months to step back/forward
            stepBigMonths: 12, // Number of months to step back/forward for the big links
            altField: "", // Selector for an alternate field to store selected dates into
            altFormat: "", // The date format to use for the alternate field
            constrainInput: true, // The input is constrained by the current date format
            showButtonPanel: false, // True to show button panel, false to not show it
            autoSize: false, // True to size the input for the date format, false to leave as is
            disabled: false // The initial disabled state
        };
        $.extend(this._defaults, this.regional[""]);
        this.regional.en = $.extend( true, {}, this.regional[ "" ]);
        this.regional[ "en-US" ] = $.extend( true, {}, this.regional.en );
        this.dpDiv = datepicker_bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
    }

    $.extend(Datepicker.prototype, {
        /* Class name added to elements to indicate already configured with a date picker. */
        markerClassName: "hasDatepicker",

        //Keep track of the maximum number of rows displayed (see #7043)
        maxRows: 4,

        // TODO rename to "widget" when switching to widget factory
        _widgetDatepicker: function() {
            return this.dpDiv;
        },

        /* Override the default settings for all instances of the date picker.
         * @param  settings  object - the new settings to use as defaults (anonymous object)
         * @return the manager object
         */
        setDefaults: function(settings) {
            datepicker_extendRemove(this._defaults, settings || {});
            return this;
        },

        /* Attach the date picker to a jQuery selection.
         * @param  target   element - the target input field or division or span
         * @param  settings  object - the new settings to use for this date picker instance (anonymous)
         */
        _attachDatepicker: function(target, settings) {
            var nodeName, inline, inst;
            nodeName = target.nodeName.toLowerCase();
            inline = (nodeName === "div" || nodeName === "span");
            if (!target.id) {
                this.uuid += 1;
                target.id = "dp" + this.uuid;
            }
            inst = this._newInst($(target), inline);
            inst.settings = $.extend({}, settings || {});
            if (nodeName === "input") {
                this._connectDatepicker(target, inst);
            } else if (inline) {
                this._inlineDatepicker(target, inst);
            }
        },

        /* Create a new instance object. */
        _newInst: function(target, inline) {
            var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"); // escape jQuery meta chars
            return {id: id, input: target, // associated target
                selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
                drawMonth: 0, drawYear: 0, // month being drawn
                inline: inline, // is datepicker inline or not
                dpDiv: (!inline ? this.dpDiv : // presentation div
                datepicker_bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")))};
        },

        /* Attach the date picker to an input field. */
        _connectDatepicker: function(target, inst) {
            var input = $(target);
            inst.append = $([]);
            inst.trigger = $([]);
            if (input.hasClass(this.markerClassName)) {
                return;
            }
            this._attachments(input, inst);
            input.addClass(this.markerClassName).keydown(this._doKeyDown).
                keypress(this._doKeyPress).keyup(this._doKeyUp);
            this._autoSize(inst);
            $.data(target, "datepicker", inst);
            //If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
            if( inst.settings.disabled ) {
                this._disableDatepicker( target );
            }
        },

        /* Make attachments based on settings. */
        _attachments: function(input, inst) {
            var showOn, buttonText, buttonImage,
                appendText = this._get(inst, "appendText"),
                isRTL = this._get(inst, "isRTL");

            if (inst.append) {
                inst.append.remove();
            }
            if (appendText) {
                inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
                input[isRTL ? "before" : "after"](inst.append);
            }

            input.unbind("focus", this._showDatepicker);

            if (inst.trigger) {
                inst.trigger.remove();
            }

            showOn = this._get(inst, "showOn");
            if (showOn === "focus" || showOn === "both") { // pop-up date picker when in the marked field
                input.focus(this._showDatepicker);
            }
            if (showOn === "button" || showOn === "both") { // pop-up date picker when button clicked
                buttonText = this._get(inst, "buttonText");
                buttonImage = this._get(inst, "buttonImage");
                inst.trigger = $(this._get(inst, "buttonImageOnly") ?
                    $("<img/>").addClass(this._triggerClass).
                        attr({ src: buttonImage, alt: buttonText, title: buttonText }) :
                    $("<button type='button'></button>").addClass(this._triggerClass).
                        html(!buttonImage ? buttonText : $("<img/>").attr(
                        { src:buttonImage, alt:buttonText, title:buttonText })));
                input[isRTL ? "before" : "after"](inst.trigger);
                inst.trigger.click(function() {
                    if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
                        $.datepicker._hideDatepicker();
                    } else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
                        $.datepicker._hideDatepicker();
                        $.datepicker._showDatepicker(input[0]);
                    } else {
                        $.datepicker._showDatepicker(input[0]);
                    }
                    return false;
                });
            }
        },

        /* Apply the maximum length for the date format. */
        _autoSize: function(inst) {
            if (this._get(inst, "autoSize") && !inst.inline) {
                var findMax, max, maxI, i,
                    date = new Date(2009, 12 - 1, 20), // Ensure double digits
                    dateFormat = this._get(inst, "dateFormat");

                if (dateFormat.match(/[DM]/)) {
                    findMax = function(names) {
                        max = 0;
                        maxI = 0;
                        for (i = 0; i < names.length; i++) {
                            if (names[i].length > max) {
                                max = names[i].length;
                                maxI = i;
                            }
                        }
                        return maxI;
                    };
                    date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
                        "monthNames" : "monthNamesShort"))));
                    date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
                        "dayNames" : "dayNamesShort"))) + 20 - date.getDay());
                }
                inst.input.attr("size", this._formatDate(inst, date).length);
            }
        },

        /* Attach an inline date picker to a div. */
        _inlineDatepicker: function(target, inst) {
            var divSpan = $(target);
            if (divSpan.hasClass(this.markerClassName)) {
                return;
            }
            divSpan.addClass(this.markerClassName).append(inst.dpDiv);
            $.data(target, "datepicker", inst);
            this._setDate(inst, this._getDefaultDate(inst), true);
            this._updateDatepicker(inst);
            this._updateAlternate(inst);
            //If disabled option is true, disable the datepicker before showing it (see ticket #5665)
            if( inst.settings.disabled ) {
                this._disableDatepicker( target );
            }
            // Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
            // http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
            inst.dpDiv.css( "display", "block" );
        },

        /* Pop-up the date picker in a "dialog" box.
         * @param  input element - ignored
         * @param  date string or Date - the initial date to display
         * @param  onSelect  function - the function to call when a date is selected
         * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
         * @param  pos int[2] - coordinates for the dialog's position within the screen or
         *                  event - with x/y coordinates or
         *                  leave empty for default (screen centre)
         * @return the manager object
         */
        _dialogDatepicker: function(input, date, onSelect, settings, pos) {
            var id, browserWidth, browserHeight, scrollX, scrollY,
                inst = this._dialogInst; // internal instance

            if (!inst) {
                this.uuid += 1;
                id = "dp" + this.uuid;
                this._dialogInput = $("<input type='text' id='" + id +
                    "' style='position: absolute; top: -100px; width: 0px;'/>");
                this._dialogInput.keydown(this._doKeyDown);
                $("body").append(this._dialogInput);
                inst = this._dialogInst = this._newInst(this._dialogInput, false);
                inst.settings = {};
                $.data(this._dialogInput[0], "datepicker", inst);
            }
            datepicker_extendRemove(inst.settings, settings || {});
            date = (date && date.constructor === Date ? this._formatDate(inst, date) : date);
            this._dialogInput.val(date);

            this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
            if (!this._pos) {
                browserWidth = document.documentElement.clientWidth;
                browserHeight = document.documentElement.clientHeight;
                scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
                scrollY = document.documentElement.scrollTop || document.body.scrollTop;
                this._pos = // should use actual width/height below
                    [(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
            }

            // move input on screen for focus, but hidden behind dialog
            this._dialogInput.css("left", (this._pos[0] + 20) + "px").css("top", this._pos[1] + "px");
            inst.settings.onSelect = onSelect;
            this._inDialog = true;
            this.dpDiv.addClass(this._dialogClass);
            this._showDatepicker(this._dialogInput[0]);
            if ($.blockUI) {
                $.blockUI(this.dpDiv);
            }
            $.data(this._dialogInput[0], "datepicker", inst);
            return this;
        },

        /* Detach a datepicker from its control.
         * @param  target   element - the target input field or division or span
         */
        _destroyDatepicker: function(target) {
            var nodeName,
                $target = $(target),
                inst = $.data(target, "datepicker");

            if (!$target.hasClass(this.markerClassName)) {
                return;
            }

            nodeName = target.nodeName.toLowerCase();
            $.removeData(target, "datepicker");
            if (nodeName === "input") {
                inst.append.remove();
                inst.trigger.remove();
                $target.removeClass(this.markerClassName).
                    unbind("focus", this._showDatepicker).
                    unbind("keydown", this._doKeyDown).
                    unbind("keypress", this._doKeyPress).
                    unbind("keyup", this._doKeyUp);
            } else if (nodeName === "div" || nodeName === "span") {
                $target.removeClass(this.markerClassName).empty();
            }

            if ( datepicker_instActive === inst ) {
                datepicker_instActive = null;
            }
        },

        /* Enable the date picker to a jQuery selection.
         * @param  target   element - the target input field or division or span
         */
        _enableDatepicker: function(target) {
            var nodeName, inline,
                $target = $(target),
                inst = $.data(target, "datepicker");

            if (!$target.hasClass(this.markerClassName)) {
                return;
            }

            nodeName = target.nodeName.toLowerCase();
            if (nodeName === "input") {
                target.disabled = false;
                inst.trigger.filter("button").
                    each(function() { this.disabled = false; }).end().
                    filter("img").css({opacity: "1.0", cursor: ""});
            } else if (nodeName === "div" || nodeName === "span") {
                inline = $target.children("." + this._inlineClass);
                inline.children().removeClass("ui-state-disabled");
                inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
                    prop("disabled", false);
            }
            this._disabledInputs = $.map(this._disabledInputs,
                function(value) { return (value === target ? null : value); }); // delete entry
        },

        /* Disable the date picker to a jQuery selection.
         * @param  target   element - the target input field or division or span
         */
        _disableDatepicker: function(target) {
            var nodeName, inline,
                $target = $(target),
                inst = $.data(target, "datepicker");

            if (!$target.hasClass(this.markerClassName)) {
                return;
            }

            nodeName = target.nodeName.toLowerCase();
            if (nodeName === "input") {
                target.disabled = true;
                inst.trigger.filter("button").
                    each(function() { this.disabled = true; }).end().
                    filter("img").css({opacity: "0.5", cursor: "default"});
            } else if (nodeName === "div" || nodeName === "span") {
                inline = $target.children("." + this._inlineClass);
                inline.children().addClass("ui-state-disabled");
                inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
                    prop("disabled", true);
            }
            this._disabledInputs = $.map(this._disabledInputs,
                function(value) { return (value === target ? null : value); }); // delete entry
            this._disabledInputs[this._disabledInputs.length] = target;
        },

        /* Is the first field in a jQuery collection disabled as a datepicker?
         * @param  target   element - the target input field or division or span
         * @return boolean - true if disabled, false if enabled
         */
        _isDisabledDatepicker: function(target) {
            if (!target) {
                return false;
            }
            for (var i = 0; i < this._disabledInputs.length; i++) {
                if (this._disabledInputs[i] === target) {
                    return true;
                }
            }
            return false;
        },

        /* Retrieve the instance data for the target control.
         * @param  target  element - the target input field or division or span
         * @return  object - the associated instance data
         * @throws  error if a jQuery problem getting data
         */
        _getInst: function(target) {
            try {
                return $.data(target, "datepicker");
            }
            catch (err) {
                throw "Missing instance data for this datepicker";
            }
        },

        /* Update or retrieve the settings for a date picker attached to an input field or division.
         * @param  target  element - the target input field or division or span
         * @param  name object - the new settings to update or
         *              string - the name of the setting to change or retrieve,
         *              when retrieving also "all" for all instance settings or
         *              "defaults" for all global defaults
         * @param  value   any - the new value for the setting
         *              (omit if above is an object or to retrieve a value)
         */
        _optionDatepicker: function(target, name, value) {
            var settings, date, minDate, maxDate,
                inst = this._getInst(target);

            if (arguments.length === 2 && typeof name === "string") {
                return (name === "defaults" ? $.extend({}, $.datepicker._defaults) :
                    (inst ? (name === "all" ? $.extend({}, inst.settings) :
                    this._get(inst, name)) : null));
            }

            settings = name || {};
            if (typeof name === "string") {
                settings = {};
                settings[name] = value;
            }

            if (inst) {
                if (this._curInst === inst) {
                    this._hideDatepicker();
                }

                date = this._getDateDatepicker(target, true);
                minDate = this._getMinMaxDate(inst, "min");
                maxDate = this._getMinMaxDate(inst, "max");
                datepicker_extendRemove(inst.settings, settings);
                // reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
                if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
                    inst.settings.minDate = this._formatDate(inst, minDate);
                }
                if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
                    inst.settings.maxDate = this._formatDate(inst, maxDate);
                }
                if ( "disabled" in settings ) {
                    if ( settings.disabled ) {
                        this._disableDatepicker(target);
                    } else {
                        this._enableDatepicker(target);
                    }
                }
                this._attachments($(target), inst);
                this._autoSize(inst);
                this._setDate(inst, date);
                this._updateAlternate(inst);
                this._updateDatepicker(inst);
            }
        },

        // change method deprecated
        _changeDatepicker: function(target, name, value) {
            this._optionDatepicker(target, name, value);
        },

        /* Redraw the date picker attached to an input field or division.
         * @param  target  element - the target input field or division or span
         */
        _refreshDatepicker: function(target) {
            var inst = this._getInst(target);
            if (inst) {
                this._updateDatepicker(inst);
            }
        },

        /* Set the dates for a jQuery selection.
         * @param  target element - the target input field or division or span
         * @param  date Date - the new date
         */
        _setDateDatepicker: function(target, date) {
            var inst = this._getInst(target);
            if (inst) {
                this._setDate(inst, date);
                this._updateDatepicker(inst);
                this._updateAlternate(inst);
            }
        },

        /* Get the date(s) for the first entry in a jQuery selection.
         * @param  target element - the target input field or division or span
         * @param  noDefault boolean - true if no default date is to be used
         * @return Date - the current date
         */
        _getDateDatepicker: function(target, noDefault) {
            var inst = this._getInst(target);
            if (inst && !inst.inline) {
                this._setDateFromField(inst, noDefault);
            }
            return (inst ? this._getDate(inst) : null);
        },

        /* Handle keystrokes. */
        _doKeyDown: function(event) {
            var onSelect, dateStr, sel,
                inst = $.datepicker._getInst(event.target),
                handled = true,
                isRTL = inst.dpDiv.is(".ui-datepicker-rtl");

            inst._keyEvent = true;
            if ($.datepicker._datepickerShowing) {
                switch (event.keyCode) {
                    case 9: $.datepicker._hideDatepicker();
                            handled = false;
                            break; // hide on tab out
                    case 13: sel = $("td." + $.datepicker._dayOverClass + ":not(." +
                                        $.datepicker._currentClass + ")", inst.dpDiv);
                            if (sel[0]) {
                                $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
                            }

                            onSelect = $.datepicker._get(inst, "onSelect");
                            if (onSelect) {
                                dateStr = $.datepicker._formatDate(inst);

                                // trigger custom callback
                                onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
                            } else {
                                $.datepicker._hideDatepicker();
                            }

                            return false; // don't submit the form
                    case 27: $.datepicker._hideDatepicker();
                            break; // hide on escape
                    case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                                -$.datepicker._get(inst, "stepBigMonths") :
                                -$.datepicker._get(inst, "stepMonths")), "M");
                            break; // previous month/year on page up/+ ctrl
                    case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                                +$.datepicker._get(inst, "stepBigMonths") :
                                +$.datepicker._get(inst, "stepMonths")), "M");
                            break; // next month/year on page down/+ ctrl
                    case 35: if (event.ctrlKey || event.metaKey) {
                                $.datepicker._clearDate(event.target);
                            }
                            handled = event.ctrlKey || event.metaKey;
                            break; // clear on ctrl or command +end
                    case 36: if (event.ctrlKey || event.metaKey) {
                                $.datepicker._gotoToday(event.target);
                            }
                            handled = event.ctrlKey || event.metaKey;
                            break; // current on ctrl or command +home
                    case 37: if (event.ctrlKey || event.metaKey) {
                                $.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), "D");
                            }
                            handled = event.ctrlKey || event.metaKey;
                            // -1 day on ctrl or command +left
                            if (event.originalEvent.altKey) {
                                $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                                    -$.datepicker._get(inst, "stepBigMonths") :
                                    -$.datepicker._get(inst, "stepMonths")), "M");
                            }
                            // next month/year on alt +left on Mac
                            break;
                    case 38: if (event.ctrlKey || event.metaKey) {
                                $.datepicker._adjustDate(event.target, -7, "D");
                            }
                            handled = event.ctrlKey || event.metaKey;
                            break; // -1 week on ctrl or command +up
                    case 39: if (event.ctrlKey || event.metaKey) {
                                $.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), "D");
                            }
                            handled = event.ctrlKey || event.metaKey;
                            // +1 day on ctrl or command +right
                            if (event.originalEvent.altKey) {
                                $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                                    +$.datepicker._get(inst, "stepBigMonths") :
                                    +$.datepicker._get(inst, "stepMonths")), "M");
                            }
                            // next month/year on alt +right
                            break;
                    case 40: if (event.ctrlKey || event.metaKey) {
                                $.datepicker._adjustDate(event.target, +7, "D");
                            }
                            handled = event.ctrlKey || event.metaKey;
                            break; // +1 week on ctrl or command +down
                    default: handled = false;
                }
            } else if (event.keyCode === 36 && event.ctrlKey) { // display the date picker on ctrl+home
                $.datepicker._showDatepicker(this);
            } else {
                handled = false;
            }

            if (handled) {
                event.preventDefault();
                event.stopPropagation();
            }
        },

        /* Filter entered characters - based on date format. */
        _doKeyPress: function(event) {
            var chars, chr,
                inst = $.datepicker._getInst(event.target);

            if ($.datepicker._get(inst, "constrainInput")) {
                chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
                chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
                return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1);
            }
        },

        /* Synchronise manual entry and field/alternate field. */
        _doKeyUp: function(event) {
            var date,
                inst = $.datepicker._getInst(event.target);

            if (inst.input.val() !== inst.lastVal) {
                try {
                    date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
                        (inst.input ? inst.input.val() : null),
                        $.datepicker._getFormatConfig(inst));

                    if (date) { // only if valid
                        $.datepicker._setDateFromField(inst);
                        $.datepicker._updateAlternate(inst);
                        $.datepicker._updateDatepicker(inst);
                    }
                }
                catch (err) {
                }
            }
            return true;
        },

        /* Pop-up the date picker for a given input field.
         * If false returned from beforeShow event handler do not show.
         * @param  input  element - the input field attached to the date picker or
         *                  event - if triggered by focus
         */
        _showDatepicker: function(input) {
            input = input.target || input;
            if (input.nodeName.toLowerCase() !== "input") { // find from button/image trigger
                input = $("input", input.parentNode)[0];
            }

            if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) { // already here
                return;
            }

            var inst, beforeShow, beforeShowSettings, isFixed,
                offset, showAnim, duration;

            inst = $.datepicker._getInst(input);
            if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
                $.datepicker._curInst.dpDiv.stop(true, true);
                if ( inst && $.datepicker._datepickerShowing ) {
                    $.datepicker._hideDatepicker( $.datepicker._curInst.input[0] );
                }
            }

            beforeShow = $.datepicker._get(inst, "beforeShow");
            beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
            if(beforeShowSettings === false){
                return;
            }
            datepicker_extendRemove(inst.settings, beforeShowSettings);

            inst.lastVal = null;
            $.datepicker._lastInput = input;
            $.datepicker._setDateFromField(inst);

            if ($.datepicker._inDialog) { // hide cursor
                input.value = "";
            }
            if (!$.datepicker._pos) { // position below input
                $.datepicker._pos = $.datepicker._findPos(input);
                $.datepicker._pos[1] += input.offsetHeight; // add the height
            }

            isFixed = false;
            $(input).parents().each(function() {
                isFixed |= $(this).css("position") === "fixed";
                return !isFixed;
            });

            offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
            $.datepicker._pos = null;
            //to avoid flashes on Firefox
            inst.dpDiv.empty();
            // determine sizing offscreen
            inst.dpDiv.css({position: "absolute", display: "block", top: "-1000px"});
            $.datepicker._updateDatepicker(inst);
            // fix width for dynamic number of date pickers
            // and adjust position before showing
            offset = $.datepicker._checkOffset(inst, offset, isFixed);
            inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ?
                "static" : (isFixed ? "fixed" : "absolute")), display: "none",
                left: offset.left + "px", top: offset.top + "px"});

            if (!inst.inline) {
                showAnim = $.datepicker._get(inst, "showAnim");
                duration = $.datepicker._get(inst, "duration");
                inst.dpDiv.css( "z-index", datepicker_getZindex( $( input ) ) + 1 );
                $.datepicker._datepickerShowing = true;

                if ( $.effects && $.effects.effect[ showAnim ] ) {
                    inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration);
                } else {
                    inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
                }

                if ( $.datepicker._shouldFocusInput( inst ) ) {
                    inst.input.focus();
                }

                $.datepicker._curInst = inst;
            }
        },

        /* Generate the date picker content. */
        _updateDatepicker: function(inst) {
            this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
            datepicker_instActive = inst; // for delegate hover events
            inst.dpDiv.empty().append(this._generateHTML(inst));
            this._attachHandlers(inst);

            var origyearshtml,
                numMonths = this._getNumberOfMonths(inst),
                cols = numMonths[1],
                width = 17,
                activeCell = inst.dpDiv.find( "." + this._dayOverClass + " a" );

            if ( activeCell.length > 0 ) {
                datepicker_handleMouseover.apply( activeCell.get( 0 ) );
            }

            inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
            if (cols > 1) {
                inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", (width * cols) + "em");
            }
            inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") +
                "Class"]("ui-datepicker-multi");
            inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") +
                "Class"]("ui-datepicker-rtl");

            if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {
                inst.input.focus();
            }

            // deffered render of the years select (to avoid flashes on Firefox)
            if( inst.yearshtml ){
                origyearshtml = inst.yearshtml;
                setTimeout(function(){
                    //assure that inst.yearshtml didn't change.
                    if( origyearshtml === inst.yearshtml && inst.yearshtml ){
                        inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);
                    }
                    origyearshtml = inst.yearshtml = null;
                }, 0);
            }
        },

        // #6694 - don't focus the input if it's already focused
        // this breaks the change event in IE
        // Support: IE and jQuery <1.9
        _shouldFocusInput: function( inst ) {
            return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" ) && !inst.input.is( ":focus" );
        },

        /* Check positioning to remain on screen. */
        _checkOffset: function(inst, offset, isFixed) {
            var dpWidth = inst.dpDiv.outerWidth(),
                dpHeight = inst.dpDiv.outerHeight(),
                inputWidth = inst.input ? inst.input.outerWidth() : 0,
                inputHeight = inst.input ? inst.input.outerHeight() : 0,
                viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),
                viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());

            offset.left -= (this._get(inst, "isRTL") ? (dpWidth - inputWidth) : 0);
            offset.left -= (isFixed && offset.left === inst.input.offset().left) ? $(document).scrollLeft() : 0;
            offset.top -= (isFixed && offset.top === (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

            // now check if datepicker is showing outside window viewport - move to a better place if so.
            offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
                Math.abs(offset.left + dpWidth - viewWidth) : 0);
            offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
                Math.abs(dpHeight + inputHeight) : 0);

            return offset;
        },

        /* Find an object's position on the screen. */
        _findPos: function(obj) {
            var position,
                inst = this._getInst(obj),
                isRTL = this._get(inst, "isRTL");

            while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
                obj = obj[isRTL ? "previousSibling" : "nextSibling"];
            }

            position = $(obj).offset();
            return [position.left, position.top];
        },

        /* Hide the date picker from view.
         * @param  input  element - the input field attached to the date picker
         */
        _hideDatepicker: function(input) {
            var showAnim, duration, postProcess, onClose,
                inst = this._curInst;

            if (!inst || (input && inst !== $.data(input, "datepicker"))) {
                return;
            }

            if (this._datepickerShowing) {
                showAnim = this._get(inst, "showAnim");
                duration = this._get(inst, "duration");
                postProcess = function() {
                    $.datepicker._tidyDialog(inst);
                };

                // DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
                if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {
                    inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess);
                } else {
                    inst.dpDiv[(showAnim === "slideDown" ? "slideUp" :
                        (showAnim === "fadeIn" ? "fadeOut" : "hide"))]((showAnim ? duration : null), postProcess);
                }

                if (!showAnim) {
                    postProcess();
                }
                this._datepickerShowing = false;

                onClose = this._get(inst, "onClose");
                if (onClose) {
                    onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ""), inst]);
                }

                this._lastInput = null;
                if (this._inDialog) {
                    this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" });
                    if ($.blockUI) {
                        $.unblockUI();
                        $("body").append(this.dpDiv);
                    }
                }
                this._inDialog = false;
            }
        },

        /* Tidy up after a dialog display. */
        _tidyDialog: function(inst) {
            inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
        },

        /* Close date picker if clicked elsewhere. */
        _checkExternalClick: function(event) {
            if (!$.datepicker._curInst) {
                return;
            }

            var $target = $(event.target),
                inst = $.datepicker._getInst($target[0]);

            if ( ( ( $target[0].id !== $.datepicker._mainDivId &&
                    $target.parents("#" + $.datepicker._mainDivId).length === 0 &&
                    !$target.hasClass($.datepicker.markerClassName) &&
                    !$target.closest("." + $.datepicker._triggerClass).length &&
                    $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) ) ) ||
                ( $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst ) ) {
                    $.datepicker._hideDatepicker();
            }
        },

        /* Adjust one of the date sub-fields. */
        _adjustDate: function(id, offset, period) {
            var target = $(id),
                inst = this._getInst(target[0]);

            if (this._isDisabledDatepicker(target[0])) {
                return;
            }
            this._adjustInstDate(inst, offset +
                (period === "M" ? this._get(inst, "showCurrentAtPos") : 0), // undo positioning
                period);
            this._updateDatepicker(inst);
        },

        /* Action for current link. */
        _gotoToday: function(id) {
            var date,
                target = $(id),
                inst = this._getInst(target[0]);

            if (this._get(inst, "gotoCurrent") && inst.currentDay) {
                inst.selectedDay = inst.currentDay;
                inst.drawMonth = inst.selectedMonth = inst.currentMonth;
                inst.drawYear = inst.selectedYear = inst.currentYear;
            } else {
                date = new Date();
                inst.selectedDay = date.getDate();
                inst.drawMonth = inst.selectedMonth = date.getMonth();
                inst.drawYear = inst.selectedYear = date.getFullYear();
            }
            this._notifyChange(inst);
            this._adjustDate(target);
        },

        /* Action for selecting a new month/year. */
        _selectMonthYear: function(id, select, period) {
            var target = $(id),
                inst = this._getInst(target[0]);

            inst["selected" + (period === "M" ? "Month" : "Year")] =
            inst["draw" + (period === "M" ? "Month" : "Year")] =
                parseInt(select.options[select.selectedIndex].value,10);

            this._notifyChange(inst);
            this._adjustDate(target);
        },

        /* Action for selecting a day. */
        _selectDay: function(id, month, year, td) {
            var inst,
                target = $(id);

            if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
                return;
            }

            inst = this._getInst(target[0]);
            inst.selectedDay = inst.currentDay = $("a", td).html();
            inst.selectedMonth = inst.currentMonth = month;
            inst.selectedYear = inst.currentYear = year;
            this._selectDate(id, this._formatDate(inst,
                inst.currentDay, inst.currentMonth, inst.currentYear));
        },

        /* Erase the input field and hide the date picker. */
        _clearDate: function(id) {
            var target = $(id);
            this._selectDate(target, "");
        },

        /* Update the input field with the selected date. */
        _selectDate: function(id, dateStr) {
            var onSelect,
                target = $(id),
                inst = this._getInst(target[0]);

            dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
            if (inst.input) {
                inst.input.val(dateStr);
            }
            this._updateAlternate(inst);

            onSelect = this._get(inst, "onSelect");
            if (onSelect) {
                onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback
            } else if (inst.input) {
                inst.input.trigger("change"); // fire the change event
            }

            if (inst.inline){
                this._updateDatepicker(inst);
            } else {
                this._hideDatepicker();
                this._lastInput = inst.input[0];
                if (typeof(inst.input[0]) !== "object") {
                    inst.input.focus(); // restore focus
                }
                this._lastInput = null;
            }
        },

        /* Update any alternate field to synchronise with the main field. */
        _updateAlternate: function(inst) {
            var altFormat, date, dateStr,
                altField = this._get(inst, "altField");

            if (altField) { // update alternate field too
                altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
                date = this._getDate(inst);
                dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
                $(altField).each(function() { $(this).val(dateStr); });
            }
        },

        /* Set as beforeShowDay function to prevent selection of weekends.
         * @param  date  Date - the date to customise
         * @return [boolean, string] - is this date selectable?, what is its CSS class?
         */
        noWeekends: function(date) {
            var day = date.getDay();
            return [(day > 0 && day < 6), ""];
        },

        /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
         * @param  date  Date - the date to get the week for
         * @return  number - the number of the week within the year that contains this date
         */
        iso8601Week: function(date) {
            var time,
                checkDate = new Date(date.getTime());

            // Find Thursday of this week starting on Monday
            checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));

            time = checkDate.getTime();
            checkDate.setMonth(0); // Compare with Jan 1
            checkDate.setDate(1);
            return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
        },

        /* Parse a string value into a date object.
         * See formatDate below for the possible formats.
         *
         * @param  format string - the expected format of the date
         * @param  value string - the date in the above format
         * @param  settings Object - attributes include:
         *                  shortYearCutoff  number - the cutoff year for determining the century (optional)
         *                  dayNamesShort   string[7] - abbreviated names of the days from Sunday (optional)
         *                  dayNames        string[7] - names of the days from Sunday (optional)
         *                  monthNamesShort string[12] - abbreviated names of the months (optional)
         *                  monthNames      string[12] - names of the months (optional)
         * @return  Date - the extracted date value or null if value is blank
         */
        parseDate: function (format, value, settings) {
            if (format == null || value == null) {
                throw "Invalid arguments";
            }

            value = (typeof value === "object" ? value.toString() : value + "");
            if (value === "") {
                return null;
            }

            var iFormat, dim, extra,
                iValue = 0,
                shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,
                shortYearCutoff = (typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
                    new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)),
                dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
                dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
                monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
                monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
                year = -1,
                month = -1,
                day = -1,
                doy = -1,
                literal = false,
                date,
                // Check whether a format character is doubled
                lookAhead = function(match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
                    if (matches) {
                        iFormat++;
                    }
                    return matches;
                },
                // Extract a number from the string value
                getNumber = function(match) {
                    var isDoubled = lookAhead(match),
                        size = (match === "@" ? 14 : (match === "!" ? 20 :
                        (match === "y" && isDoubled ? 4 : (match === "o" ? 3 : 2)))),
                        minSize = (match === "y" ? size : 1),
                        digits = new RegExp("^\\d{" + minSize + "," + size + "}"),
                        num = value.substring(iValue).match(digits);
                    if (!num) {
                        throw "Missing number at position " + iValue;
                    }
                    iValue += num[0].length;
                    return parseInt(num[0], 10);
                },
                // Extract a name from the string value and convert to an index
                getName = function(match, shortNames, longNames) {
                    var index = -1,
                        names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
                            return [ [k, v] ];
                        }).sort(function (a, b) {
                            return -(a[1].length - b[1].length);
                        });

                    $.each(names, function (i, pair) {
                        var name = pair[1];
                        if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
                            index = pair[0];
                            iValue += name.length;
                            return false;
                        }
                    });
                    if (index !== -1) {
                        return index + 1;
                    } else {
                        throw "Unknown name at position " + iValue;
                    }
                },
                // Confirm that a literal character matches the string value
                checkLiteral = function() {
                    if (value.charAt(iValue) !== format.charAt(iFormat)) {
                        throw "Unexpected literal at position " + iValue;
                    }
                    iValue++;
                };

            for (iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                        literal = false;
                    } else {
                        checkLiteral();
                    }
                } else {
                    switch (format.charAt(iFormat)) {
                        case "d":
                            day = getNumber("d");
                            break;
                        case "D":
                            getName("D", dayNamesShort, dayNames);
                            break;
                        case "o":
                            doy = getNumber("o");
                            break;
                        case "m":
                            month = getNumber("m");
                            break;
                        case "M":
                            month = getName("M", monthNamesShort, monthNames);
                            break;
                        case "y":
                            year = getNumber("y");
                            break;
                        case "@":
                            date = new Date(getNumber("@"));
                            year = date.getFullYear();
                            month = date.getMonth() + 1;
                            day = date.getDate();
                            break;
                        case "!":
                            date = new Date((getNumber("!") - this._ticksTo1970) / 10000);
                            year = date.getFullYear();
                            month = date.getMonth() + 1;
                            day = date.getDate();
                            break;
                        case "'":
                            if (lookAhead("'")){
                                checkLiteral();
                            } else {
                                literal = true;
                            }
                            break;
                        default:
                            checkLiteral();
                    }
                }
            }

            if (iValue < value.length){
                extra = value.substr(iValue);
                if (!/^\s+/.test(extra)) {
                    throw "Extra/unparsed characters found in date: " + extra;
                }
            }

            if (year === -1) {
                year = new Date().getFullYear();
            } else if (year < 100) {
                year += new Date().getFullYear() - new Date().getFullYear() % 100 +
                    (year <= shortYearCutoff ? 0 : -100);
            }

            if (doy > -1) {
                month = 1;
                day = doy;
                do {
                    dim = this._getDaysInMonth(year, month - 1);
                    if (day <= dim) {
                        break;
                    }
                    month++;
                    day -= dim;
                } while (true);
            }

            date = this._daylightSavingAdjust(new Date(year, month - 1, day));
            if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
                throw "Invalid date"; // E.g. 31/02/00
            }
            return date;
        },

        /* Standard date formats. */
        ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
        COOKIE: "D, dd M yy",
        ISO_8601: "yy-mm-dd",
        RFC_822: "D, d M y",
        RFC_850: "DD, dd-M-y",
        RFC_1036: "D, d M y",
        RFC_1123: "D, d M yy",
        RFC_2822: "D, d M yy",
        RSS: "D, d M y", // RFC 822
        TICKS: "!",
        TIMESTAMP: "@",
        W3C: "yy-mm-dd", // ISO 8601

        _ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
            Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

        /* Format a date object into a string value.
         * The format can be combinations of the following:
         * d  - day of month (no leading zero)
         * dd - day of month (two digit)
         * o  - day of year (no leading zeros)
         * oo - day of year (three digit)
         * D  - day name short
         * DD - day name long
         * m  - month of year (no leading zero)
         * mm - month of year (two digit)
         * M  - month name short
         * MM - month name long
         * y  - year (two digit)
         * yy - year (four digit)
         * @ - Unix timestamp (ms since 01/01/1970)
         * ! - Windows ticks (100ns since 01/01/0001)
         * "..." - literal text
         * '' - single quote
         *
         * @param  format string - the desired format of the date
         * @param  date Date - the date value to format
         * @param  settings Object - attributes include:
         *                  dayNamesShort   string[7] - abbreviated names of the days from Sunday (optional)
         *                  dayNames        string[7] - names of the days from Sunday (optional)
         *                  monthNamesShort string[12] - abbreviated names of the months (optional)
         *                  monthNames      string[12] - names of the months (optional)
         * @return  string - the date in the above format
         */
        formatDate: function (format, date, settings) {
            if (!date) {
                return "";
            }

            var iFormat,
                dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
                dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
                monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
                monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
                // Check whether a format character is doubled
                lookAhead = function(match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
                    if (matches) {
                        iFormat++;
                    }
                    return matches;
                },
                // Format a number, with leading zero if necessary
                formatNumber = function(match, value, len) {
                    var num = "" + value;
                    if (lookAhead(match)) {
                        while (num.length < len) {
                            num = "0" + num;
                        }
                    }
                    return num;
                },
                // Format a name, short or long as requested
                formatName = function(match, value, shortNames, longNames) {
                    return (lookAhead(match) ? longNames[value] : shortNames[value]);
                },
                output = "",
                literal = false;

            if (date) {
                for (iFormat = 0; iFormat < format.length; iFormat++) {
                    if (literal) {
                        if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                            literal = false;
                        } else {
                            output += format.charAt(iFormat);
                        }
                    } else {
                        switch (format.charAt(iFormat)) {
                            case "d":
                                output += formatNumber("d", date.getDate(), 2);
                                break;
                            case "D":
                                output += formatName("D", date.getDay(), dayNamesShort, dayNames);
                                break;
                            case "o":
                                output += formatNumber("o",
                                    Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
                                break;
                            case "m":
                                output += formatNumber("m", date.getMonth() + 1, 2);
                                break;
                            case "M":
                                output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
                                break;
                            case "y":
                                output += (lookAhead("y") ? date.getFullYear() :
                                    (date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
                                break;
                            case "@":
                                output += date.getTime();
                                break;
                            case "!":
                                output += date.getTime() * 10000 + this._ticksTo1970;
                                break;
                            case "'":
                                if (lookAhead("'")) {
                                    output += "'";
                                } else {
                                    literal = true;
                                }
                                break;
                            default:
                                output += format.charAt(iFormat);
                        }
                    }
                }
            }
            return output;
        },

        /* Extract all possible characters from the date format. */
        _possibleChars: function (format) {
            var iFormat,
                chars = "",
                literal = false,
                // Check whether a format character is doubled
                lookAhead = function(match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
                    if (matches) {
                        iFormat++;
                    }
                    return matches;
                };

            for (iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                        literal = false;
                    } else {
                        chars += format.charAt(iFormat);
                    }
                } else {
                    switch (format.charAt(iFormat)) {
                        case "d": case "m": case "y": case "@":
                            chars += "0123456789";
                            break;
                        case "D": case "M":
                            return null; // Accept anything
                        case "'":
                            if (lookAhead("'")) {
                                chars += "'";
                            } else {
                                literal = true;
                            }
                            break;
                        default:
                            chars += format.charAt(iFormat);
                    }
                }
            }
            return chars;
        },

        /* Get a setting value, defaulting if necessary. */
        _get: function(inst, name) {
            return inst.settings[name] !== undefined ?
                inst.settings[name] : this._defaults[name];
        },

        /* Parse existing date and initialise date picker. */
        _setDateFromField: function(inst, noDefault) {
            if (inst.input.val() === inst.lastVal) {
                return;
            }

            var dateFormat = this._get(inst, "dateFormat"),
                dates = inst.lastVal = inst.input ? inst.input.val() : null,
                defaultDate = this._getDefaultDate(inst),
                date = defaultDate,
                settings = this._getFormatConfig(inst);

            try {
                date = this.parseDate(dateFormat, dates, settings) || defaultDate;
            } catch (event) {
                dates = (noDefault ? "" : dates);
            }
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            inst.currentDay = (dates ? date.getDate() : 0);
            inst.currentMonth = (dates ? date.getMonth() : 0);
            inst.currentYear = (dates ? date.getFullYear() : 0);
            this._adjustInstDate(inst);
        },

        /* Retrieve the default date shown on opening. */
        _getDefaultDate: function(inst) {
            return this._restrictMinMax(inst,
                this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
        },

        /* A date may be specified as an exact value or a relative one. */
        _determineDate: function(inst, date, defaultDate) {
            var offsetNumeric = function(offset) {
                    var date = new Date();
                    date.setDate(date.getDate() + offset);
                    return date;
                },
                offsetString = function(offset) {
                    try {
                        return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
                            offset, $.datepicker._getFormatConfig(inst));
                    }
                    catch (e) {
                        // Ignore
                    }

                    var date = (offset.toLowerCase().match(/^c/) ?
                        $.datepicker._getDate(inst) : null) || new Date(),
                        year = date.getFullYear(),
                        month = date.getMonth(),
                        day = date.getDate(),
                        pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
                        matches = pattern.exec(offset);

                    while (matches) {
                        switch (matches[2] || "d") {
                            case "d" : case "D" :
                                day += parseInt(matches[1],10); break;
                            case "w" : case "W" :
                                day += parseInt(matches[1],10) * 7; break;
                            case "m" : case "M" :
                                month += parseInt(matches[1],10);
                                day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                                break;
                            case "y": case "Y" :
                                year += parseInt(matches[1],10);
                                day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                                break;
                        }
                        matches = pattern.exec(offset);
                    }
                    return new Date(year, month, day);
                },
                newDate = (date == null || date === "" ? defaultDate : (typeof date === "string" ? offsetString(date) :
                    (typeof date === "number" ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));

            newDate = (newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate);
            if (newDate) {
                newDate.setHours(0);
                newDate.setMinutes(0);
                newDate.setSeconds(0);
                newDate.setMilliseconds(0);
            }
            return this._daylightSavingAdjust(newDate);
        },

        /* Handle switch to/from daylight saving.
         * Hours may be non-zero on daylight saving cut-over:
         * > 12 when midnight changeover, but then cannot generate
         * midnight datetime, so jump to 1AM, otherwise reset.
         * @param  date  (Date) the date to check
         * @return  (Date) the corrected date
         */
        _daylightSavingAdjust: function(date) {
            if (!date) {
                return null;
            }
            date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
            return date;
        },

        /* Set the date(s) directly. */
        _setDate: function(inst, date, noChange) {
            var clear = !date,
                origMonth = inst.selectedMonth,
                origYear = inst.selectedYear,
                newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));

            inst.selectedDay = inst.currentDay = newDate.getDate();
            inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
            inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
            if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
                this._notifyChange(inst);
            }
            this._adjustInstDate(inst);
            if (inst.input) {
                inst.input.val(clear ? "" : this._formatDate(inst));
            }
        },

        /* Retrieve the date(s) directly. */
        _getDate: function(inst) {
            var startDate = (!inst.currentYear || (inst.input && inst.input.val() === "") ? null :
                this._daylightSavingAdjust(new Date(
                inst.currentYear, inst.currentMonth, inst.currentDay)));
                return startDate;
        },

        /* Attach the onxxx handlers.  These are declared statically so
         * they work with static code transformers like Caja.
         */
        _attachHandlers: function(inst) {
            var stepMonths = this._get(inst, "stepMonths"),
                id = "#" + inst.id.replace( /\\\\/g, "\\" );
            inst.dpDiv.find("[data-handler]").map(function () {
                var handler = {
                    prev: function () {
                        $.datepicker._adjustDate(id, -stepMonths, "M");
                    },
                    next: function () {
                        $.datepicker._adjustDate(id, +stepMonths, "M");
                    },
                    hide: function () {
                        $.datepicker._hideDatepicker();
                    },
                    today: function () {
                        $.datepicker._gotoToday(id);
                    },
                    selectDay: function () {
                        $.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
                        return false;
                    },
                    selectMonth: function () {
                        $.datepicker._selectMonthYear(id, this, "M");
                        return false;
                    },
                    selectYear: function () {
                        $.datepicker._selectMonthYear(id, this, "Y");
                        return false;
                    }
                };
                $(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
            });
        },

        /* Generate the HTML for the current state of the date picker. */
        _generateHTML: function(inst) {
            var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
                controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
                monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
                selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
                cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
                printDate, dRow, tbody, daySettings, otherMonth, unselectable,
                tempDate = new Date(),
                today = this._daylightSavingAdjust(
                    new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), // clear time
                isRTL = this._get(inst, "isRTL"),
                showButtonPanel = this._get(inst, "showButtonPanel"),
                hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"),
                navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"),
                numMonths = this._getNumberOfMonths(inst),
                showCurrentAtPos = this._get(inst, "showCurrentAtPos"),
                stepMonths = this._get(inst, "stepMonths"),
                isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1),
                currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
                    new Date(inst.currentYear, inst.currentMonth, inst.currentDay))),
                minDate = this._getMinMaxDate(inst, "min"),
                maxDate = this._getMinMaxDate(inst, "max"),
                drawMonth = inst.drawMonth - showCurrentAtPos,
                drawYear = inst.drawYear;

            if (drawMonth < 0) {
                drawMonth += 12;
                drawYear--;
            }
            if (maxDate) {
                maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
                    maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
                maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
                while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
                    drawMonth--;
                    if (drawMonth < 0) {
                        drawMonth = 11;
                        drawYear--;
                    }
                }
            }
            inst.drawMonth = drawMonth;
            inst.drawYear = drawYear;

            prevText = this._get(inst, "prevText");
            prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
                this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
                this._getFormatConfig(inst)));

            prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
                "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" +
                " title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" :
                (hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+ prevText +"'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>"));

            nextText = this._get(inst, "nextText");
            nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
                this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
                this._getFormatConfig(inst)));

            next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
                "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" +
                " title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" :
                (hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+ nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>"));

            currentText = this._get(inst, "currentText");
            gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today);
            currentText = (!navigationAsDateFormat ? currentText :
                this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));

            controls = (!inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
                this._get(inst, "closeText") + "</button>" : "");

            buttonPanel = (showButtonPanel) ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") +
                (this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" +
                ">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";

            firstDay = parseInt(this._get(inst, "firstDay"),10);
            firstDay = (isNaN(firstDay) ? 0 : firstDay);

            showWeek = this._get(inst, "showWeek");
            dayNames = this._get(inst, "dayNames");
            dayNamesMin = this._get(inst, "dayNamesMin");
            monthNames = this._get(inst, "monthNames");
            monthNamesShort = this._get(inst, "monthNamesShort");
            beforeShowDay = this._get(inst, "beforeShowDay");
            showOtherMonths = this._get(inst, "showOtherMonths");
            selectOtherMonths = this._get(inst, "selectOtherMonths");
            defaultDate = this._getDefaultDate(inst);
            html = "";
            dow;
            for (row = 0; row < numMonths[0]; row++) {
                group = "";
                this.maxRows = 4;
                for (col = 0; col < numMonths[1]; col++) {
                    selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
                    cornerClass = " ui-corner-all";
                    calender = "";
                    if (isMultiMonth) {
                        calender += "<div class='ui-datepicker-group";
                        if (numMonths[1] > 1) {
                            switch (col) {
                                case 0: calender += " ui-datepicker-group-first";
                                    cornerClass = " ui-corner-" + (isRTL ? "right" : "left"); break;
                                case numMonths[1]-1: calender += " ui-datepicker-group-last";
                                    cornerClass = " ui-corner-" + (isRTL ? "left" : "right"); break;
                                default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;
                            }
                        }
                        calender += "'>";
                    }
                    calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
                        (/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : "") +
                        (/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : "") +
                        this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
                        row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
                        "</div><table class='ui-datepicker-calendar'><thead>" +
                        "<tr>";
                    thead = (showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "");
                    for (dow = 0; dow < 7; dow++) { // days of the week
                        day = (dow + firstDay) % 7;
                        thead += "<th scope='col'" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" +
                            "<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
                    }
                    calender += thead + "</tr></thead><tbody>";
                    daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
                    if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
                        inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
                    }
                    leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
                    curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
                    numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
                    this.maxRows = numRows;
                    printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
                    for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows
                        calender += "<tr>";
                        tbody = (!showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
                            this._get(inst, "calculateWeek")(printDate) + "</td>");
                        for (dow = 0; dow < 7; dow++) { // create date picker days
                            daySettings = (beforeShowDay ?
                                beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);
                            otherMonth = (printDate.getMonth() !== drawMonth);
                            unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
                                (minDate && printDate < minDate) || (maxDate && printDate > maxDate);
                            tbody += "<td class='" +
                                ((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + // highlight weekends
                                (otherMonth ? " ui-datepicker-other-month" : "") + // highlight days from other months
                                ((printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent) || // user pressed key
                                (defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ?
                                // or defaultDate is current printedDate and defaultDate is selectedDate
                                " " + this._dayOverClass : "") + // highlight selected day
                                (unselectable ? " " + this._unselectableClass + " ui-state-disabled": "") +  // highlight unselectable days
                                (otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + // highlight custom dates
                                (printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + // highlight selected day
                                (printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + // highlight today (if different)
                                ((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + // cell title
                                (unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + // actions
                                (otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
                                (unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
                                (printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") +
                                (printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + // highlight selected day
                                (otherMonth ? " ui-priority-secondary" : "") + // distinguish dates from other months
                                "' href='#'>" + printDate.getDate() + "</a>")) + "</td>"; // display selectable date
                            printDate.setDate(printDate.getDate() + 1);
                            printDate = this._daylightSavingAdjust(printDate);
                        }
                        calender += tbody + "</tr>";
                    }
                    drawMonth++;
                    if (drawMonth > 11) {
                        drawMonth = 0;
                        drawYear++;
                    }
                    calender += "</tbody></table>" + (isMultiMonth ? "</div>" +
                                ((numMonths[0] > 0 && col === numMonths[1]-1) ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
                    group += calender;
                }
                html += group;
            }
            html += buttonPanel;
            inst._keyEvent = false;
            return html;
        },

        /* Generate the month and year header. */
        _generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,
                secondary, monthNames, monthNamesShort) {

            var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
                changeMonth = this._get(inst, "changeMonth"),
                changeYear = this._get(inst, "changeYear"),
                showMonthAfterYear = this._get(inst, "showMonthAfterYear"),
                html = "<div class='ui-datepicker-title'>",
                monthHtml = "";

            // month selection
            if (secondary || !changeMonth) {
                monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>";
            } else {
                inMinYear = (minDate && minDate.getFullYear() === drawYear);
                inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
                monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
                for ( month = 0; month < 12; month++) {
                    if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
                        monthHtml += "<option value='" + month + "'" +
                            (month === drawMonth ? " selected='selected'" : "") +
                            ">" + monthNamesShort[month] + "</option>";
                    }
                }
                monthHtml += "</select>";
            }

            if (!showMonthAfterYear) {
                html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");
            }

            // year selection
            if ( !inst.yearshtml ) {
                inst.yearshtml = "";
                if (secondary || !changeYear) {
                    html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
                } else {
                    // determine range of years to display
                    years = this._get(inst, "yearRange").split(":");
                    thisYear = new Date().getFullYear();
                    determineYear = function(value) {
                        var year = (value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) :
                            (value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) :
                            parseInt(value, 10)));
                        return (isNaN(year) ? thisYear : year);
                    };
                    year = determineYear(years[0]);
                    endYear = Math.max(year, determineYear(years[1] || ""));
                    year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
                    endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
                    inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
                    for (; year <= endYear; year++) {
                        inst.yearshtml += "<option value='" + year + "'" +
                            (year === drawYear ? " selected='selected'" : "") +
                            ">" + year + "</option>";
                    }
                    inst.yearshtml += "</select>";

                    html += inst.yearshtml;
                    inst.yearshtml = null;
                }
            }

            html += this._get(inst, "yearSuffix");
            if (showMonthAfterYear) {
                html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml;
            }
            html += "</div>"; // Close datepicker_header
            return html;
        },

        /* Adjust one of the date sub-fields. */
        _adjustInstDate: function(inst, offset, period) {
            var year = inst.drawYear + (period === "Y" ? offset : 0),
                month = inst.drawMonth + (period === "M" ? offset : 0),
                day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0),
                date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));

            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            if (period === "M" || period === "Y") {
                this._notifyChange(inst);
            }
        },

        /* Ensure a date is within any min/max bounds. */
        _restrictMinMax: function(inst, date) {
            var minDate = this._getMinMaxDate(inst, "min"),
                maxDate = this._getMinMaxDate(inst, "max"),
                newDate = (minDate && date < minDate ? minDate : date);
            return (maxDate && newDate > maxDate ? maxDate : newDate);
        },

        /* Notify change of month/year. */
        _notifyChange: function(inst) {
            var onChange = this._get(inst, "onChangeMonthYear");
            if (onChange) {
                onChange.apply((inst.input ? inst.input[0] : null),
                    [inst.selectedYear, inst.selectedMonth + 1, inst]);
            }
        },

        /* Determine the number of months to show. */
        _getNumberOfMonths: function(inst) {
            var numMonths = this._get(inst, "numberOfMonths");
            return (numMonths == null ? [1, 1] : (typeof numMonths === "number" ? [1, numMonths] : numMonths));
        },

        /* Determine the current maximum date - ensure no time components are set. */
        _getMinMaxDate: function(inst, minMax) {
            return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
        },

        /* Find the number of days in a given month. */
        _getDaysInMonth: function(year, month) {
            return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
        },

        /* Find the day of the week of the first of a month. */
        _getFirstDayOfMonth: function(year, month) {
            return new Date(year, month, 1).getDay();
        },

        /* Determines if we should allow a "next/prev" month display change. */
        _canAdjustMonth: function(inst, offset, curYear, curMonth) {
            var numMonths = this._getNumberOfMonths(inst),
                date = this._daylightSavingAdjust(new Date(curYear,
                curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));

            if (offset < 0) {
                date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
            }
            return this._isInRange(inst, date);
        },

        /* Is the given date in the accepted range? */
        _isInRange: function(inst, date) {
            var yearSplit, currentYear,
                minDate = this._getMinMaxDate(inst, "min"),
                maxDate = this._getMinMaxDate(inst, "max"),
                minYear = null,
                maxYear = null,
                years = this._get(inst, "yearRange");
                if (years){
                    yearSplit = years.split(":");
                    currentYear = new Date().getFullYear();
                    minYear = parseInt(yearSplit[0], 10);
                    maxYear = parseInt(yearSplit[1], 10);
                    if ( yearSplit[0].match(/[+\-].*/) ) {
                        minYear += currentYear;
                    }
                    if ( yearSplit[1].match(/[+\-].*/) ) {
                        maxYear += currentYear;
                    }
                }

            return ((!minDate || date.getTime() >= minDate.getTime()) &&
                (!maxDate || date.getTime() <= maxDate.getTime()) &&
                (!minYear || date.getFullYear() >= minYear) &&
                (!maxYear || date.getFullYear() <= maxYear));
        },

        /* Provide the configuration settings for formatting/parsing. */
        _getFormatConfig: function(inst) {
            var shortYearCutoff = this._get(inst, "shortYearCutoff");
            shortYearCutoff = (typeof shortYearCutoff !== "string" ? shortYearCutoff :
                new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
            return {shortYearCutoff: shortYearCutoff,
                dayNamesShort: this._get(inst, "dayNamesShort"), dayNames: this._get(inst, "dayNames"),
                monthNamesShort: this._get(inst, "monthNamesShort"), monthNames: this._get(inst, "monthNames")};
        },

        /* Format the given date for display. */
        _formatDate: function(inst, day, month, year) {
            if (!day) {
                inst.currentDay = inst.selectedDay;
                inst.currentMonth = inst.selectedMonth;
                inst.currentYear = inst.selectedYear;
            }
            var date = (day ? (typeof day === "object" ? day :
                this._daylightSavingAdjust(new Date(year, month, day))) :
                this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
            return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
        }
    });

    /*
     * Bind hover events for datepicker elements.
     * Done via delegate so the binding only occurs once in the lifetime of the parent div.
     * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
     */
    function datepicker_bindHover(dpDiv) {
        var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
        return dpDiv.delegate(selector, "mouseout", function() {
                $(this).removeClass("ui-state-hover");
                if (this.className.indexOf("ui-datepicker-prev") !== -1) {
                    $(this).removeClass("ui-datepicker-prev-hover");
                }
                if (this.className.indexOf("ui-datepicker-next") !== -1) {
                    $(this).removeClass("ui-datepicker-next-hover");
                }
            })
            .delegate( selector, "mouseover", datepicker_handleMouseover );
    }

    function datepicker_handleMouseover() {
        if (!$.datepicker._isDisabledDatepicker( datepicker_instActive.inline? datepicker_instActive.dpDiv.parent()[0] : datepicker_instActive.input[0])) {
            $(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
            $(this).addClass("ui-state-hover");
            if (this.className.indexOf("ui-datepicker-prev") !== -1) {
                $(this).addClass("ui-datepicker-prev-hover");
            }
            if (this.className.indexOf("ui-datepicker-next") !== -1) {
                $(this).addClass("ui-datepicker-next-hover");
            }
        }
    }

    /* jQuery extend now ignores nulls! */
    function datepicker_extendRemove(target, props) {
        $.extend(target, props);
        for (var name in props) {
            if (props[name] == null) {
                target[name] = props[name];
            }
        }
        return target;
    }

    /* Invoke the datepicker functionality.
       @param  options  string - a command, optionally followed by additional parameters or
                        Object - settings for attaching new datepicker functionality
       @return  jQuery object */
    $.fn.datepicker = function(options){

        /* Verify an empty collection wasn't passed - Fixes #6976 */
        if ( !this.length ) {
            return this;
        }

        /* Initialise the date picker. */
        if (!$.datepicker.initialized) {
            $(document).mousedown($.datepicker._checkExternalClick);
            $.datepicker.initialized = true;
        }

        /* Append datepicker main container to body if not exist. */
        if ($("#"+$.datepicker._mainDivId).length === 0) {
            $("body").append($.datepicker.dpDiv);
        }

        var otherArgs = Array.prototype.slice.call(arguments, 1);
        if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {
            return $.datepicker["_" + options + "Datepicker"].
                apply($.datepicker, [this[0]].concat(otherArgs));
        }
        if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
            return $.datepicker["_" + options + "Datepicker"].
                apply($.datepicker, [this[0]].concat(otherArgs));
        }
        return this.each(function() {
            typeof options === "string" ?
                $.datepicker["_" + options + "Datepicker"].
                    apply($.datepicker, [this].concat(otherArgs)) :
                $.datepicker._attachDatepicker(this, options);
        });
    };

    $.datepicker = new Datepicker(); // singleton instance
    $.datepicker.initialized = false;
    $.datepicker.uuid = new Date().getTime();
    $.datepicker.version = "1.11.4";

    var datepicker = $.datepicker;



    }));;(function(window, document, navigator, undefined){
    'use strict';

    // http://stackoverflow.com/questions/97962/debounce-clicks-when-submitting-a-web-form
    var debounce = function( callback, wait, cancelprevious )
    {
        var timeout;
        return function()
        {
            if( timeout )
            {
                if( ! cancelprevious )
                    return ;
                clearTimeout( timeout );
            }
            var context = this,
                args = arguments;
            timeout = setTimeout(
                function()
                {
                    timeout = null;
                    callback.apply( context, args );
                }, wait );
        };
    };

    // http://stackoverflow.com/questions/12949590/how-to-detach-event-in-ie-6-7-8-9-using-javascript
    var addEvent = function( element, type, handler, useCapture )
    {
        if( element.addEventListener ) {
            element.addEventListener( type, handler, useCapture ? true : false );
        }
        else if( element.attachEvent ) {
            element.attachEvent( 'on' + type, handler );
        }
        else if( element != window )
            element['on' + type] = handler;
    };
    var removeEvent = function( element, type, handler, useCapture )
    {
        if( element.removeEventListener ) {
            element.removeEventListener( type, handler, useCapture ? true : false );
        }
        else if( element.detachEvent) {
            element.detachEvent( 'on' + type, handler );
        }
        else if( element != window )
            element['on' + type] = null;
    };
    // http://www.cristinawithout.com/content/function-trigger-events-javascript
    var fireEvent = function( element, type, bubbles, cancelable )
    {
        if( document.createEvent ) {
            var event = document.createEvent('Event');
            event.initEvent( type, bubbles !== undefined ? bubbles : true, cancelable !== undefined ? cancelable : false );
            element.dispatchEvent(event);
        }
        else if( document.createEventObject ) { //IE
            var event = document.createEventObject();
            element.fireEvent( 'on' + type, event );
        }
        else if( typeof(element['on' + type]) == 'function' )
            element['on' + type]();
    };
    // prevent default
    var cancelEvent = function( e )
    {
        if( e.preventDefault )
            e.preventDefault();
        else
            e.returnValue = false;
        if( e.stopPropagation )
            e.stopPropagation();
        else
            e.cancelBubble = true;
        return false;
    };

    // http://stackoverflow.com/questions/13377887/javascript-node-undefined-in-ie8-and-under
    var Node_ELEMENT_NODE = typeof(Node) != 'undefined' ? Node.ELEMENT_NODE : 1;
    var Node_TEXT_NODE = typeof(Node) != 'undefined' ? Node.TEXT_NODE : 3;

    // http://stackoverflow.com/questions/2234979/how-to-check-in-javascript-if-one-element-is-a-child-of-another
    var isOrContainsNode = function( ancestor, descendant )
    {
        var node = descendant;
        while( node )
        {
            if( node === ancestor )
                return true;
            node = node.parentNode;
        }
        return false;
    };

    // http://stackoverflow.com/questions/667951/how-to-get-nodes-lying-inside-a-range-with-javascript
    var nextNode = function( node, container )
    {
        if( node.firstChild )
            return node.firstChild;
        while( node )
        {
            if( node == container ) // do not walk out of the container
                return null;
            if( node.nextSibling )
                return node.nextSibling;
            node = node.parentNode;
        }
        return null;
    };

    // save/restore selection
    // http://stackoverflow.com/questions/13949059/persisting-the-changes-of-range-objects-after-selection-in-html/13950376#13950376
    var saveSelection = function( containerNode )
    {
        if( window.getSelection )
        {
            var sel = window.getSelection();
            if( sel.rangeCount > 0 )
                return sel.getRangeAt(0);
        }
        else if( document.selection )
        {
            var sel = document.selection;
            return sel.createRange();
        }
        return null;
    };
    var restoreSelection = function( containerNode, savedSel )
    {
        if( ! savedSel )
            return;
        if( window.getSelection )
        {
            var sel = window.getSelection();
            sel.removeAllRanges();
            sel.addRange(savedSel);
        }
        else if( document.selection )
        {
            savedSel.select();
        }
    };

    // http://stackoverflow.com/questions/12603397/calculate-width-height-of-the-selected-text-javascript
    // http://stackoverflow.com/questions/6846230/coordinates-of-selected-text-in-browser-page
    var getSelectionRect = function()
    {
        if( window.getSelection )
        {
            var sel = window.getSelection();
            if( ! sel.rangeCount )
                return false;
            var range = sel.getRangeAt(0).cloneRange();
            if( range.getBoundingClientRect ) // Missing for Firefox 3.5+3.6
            {
                var rect = range.getBoundingClientRect();
                // Safari 5.1 returns null, IE9 returns 0/0/0/0 if image selected
                if( rect && rect.left && rect.top && rect.right && rect.bottom )
                    return {
                        // Modern browsers return floating-point numbers
                        left: parseInt(rect.left),
                        top: parseInt(rect.top),
                        width: parseInt(rect.right - rect.left),
                        height: parseInt(rect.bottom - rect.top)
                    };
                // on Webkit 'range.getBoundingClientRect()' sometimes return 0/0/0/0 - but 'range.getClientRects()' works
                var rects = range.getClientRects ? range.getClientRects() : [];
                for( var i=0; i < rects.length; ++i )
                {
                    var rect = rects[i];
                    if( rect.left && rect.top && rect.right && rect.bottom )
                        return {
                            // Modern browsers return floating-point numbers
                            left: parseInt(rect.left),
                            top: parseInt(rect.top),
                            width: parseInt(rect.right - rect.left),
                            height: parseInt(rect.bottom - rect.top)
                        };
                }
            }
            /*
            // Fall back to inserting a temporary element (only for Firefox 3.5 and 3.6)
            var span = document.createElement('span');
            if( span.getBoundingClientRect )
            {
                // Ensure span has dimensions and position by
                // adding a zero-width space character
                span.appendChild( document.createTextNode('\u200b') );
                range.insertNode( span );
                var rect = span.getBoundingClientRect();
                var spanParent = span.parentNode;
                spanParent.removeChild( span );
                // Glue any broken text nodes back together
                spanParent.normalize();
                return {
                    left: parseInt(rect.left),
                    top: parseInt(rect.top),
                    width: parseInt(rect.right - rect.left),
                    height: parseInt(rect.bottom - rect.top)
                };
            }
            */
        }
        else if( document.selection )
        {
            var sel = document.selection;
            if( sel.type != 'Control' )
            {
                var range = sel.createRange();
                // IE8 return 0/0/0/0 if caret right before newline
                if( range.boundingLeft || range.boundingTop || range.boundingWidth || range.boundingHeight )
                    return {
                        left: range.boundingLeft,
                        top: range.boundingTop,
                        width: range.boundingWidth,
                        height: range.boundingHeight
                    };
            }
        }
        return false;
    };

    var getSelectionCollapsed = function( containerNode )
    {
        if( window.getSelection )
        {
            var sel = window.getSelection();
            if( sel.isCollapsed )
                return true;
            return false;
        }
        else if( document.selection )
        {
            var sel = document.selection;
            if( sel.type == 'Text' )
            {
                var range = document.selection.createRange();
                var textrange = document.body.createTextRange();
                textrange.moveToElementText(containerNode);
                textrange.setEndPoint('EndToStart', range);
                return range.htmlText.length == 0;
            }
            if( sel.type == 'Control' ) // e.g. an image selected
                return false;
            // sel.type == 'None' -> collapsed selection
        }
        return true;
    };

    // http://stackoverflow.com/questions/7781963/js-get-array-of-all-selected-nodes-in-contenteditable-div
    var getSelectedNodes = function( containerNode )
    {
        if( window.getSelection )
        {
            var sel = window.getSelection();
            if( ! sel.rangeCount )
                return [];
            var nodes = [];
            for( var i=0; i < sel.rangeCount; ++i )
            {
                var range = sel.getRangeAt(i),
                    node = range.startContainer,
                    endNode = range.endContainer;
                while( node )
                {
                    // add this node?
                    if( node != containerNode )
                    {
                        var node_inside_selection = false;
                        if( sel.containsNode )
                            node_inside_selection = sel.containsNode( node, true );
                        else // IE11
                        {
                            // http://stackoverflow.com/questions/5884210/how-to-find-if-a-htmlelement-is-enclosed-in-selected-text
                            var noderange = document.createRange();
                            noderange.selectNodeContents( node );
                            for( var i=0; i < sel.rangeCount; ++i )
                            {
                                var range = sel.getRangeAt(i);
                                // start after or end before -> skip node
                                if( range.compareBoundaryPoints(range.END_TO_START,noderange) >= 0 &&
                                    range.compareBoundaryPoints(range.START_TO_END,noderange) <= 0 )
                                {
                                    node_inside_selection = true;
                                    break;
                                }
                            }
                        }
                        if( node_inside_selection )
                            nodes.push( node );
                    }
                    node = nextNode( node, node == endNode ? endNode : containerNode );
                }
            }
            // Fallback
            if( nodes.length == 0 && isOrContainsNode(containerNode,sel.focusNode) && sel.focusNode != containerNode )
                nodes.push( sel.focusNode );
            return nodes;
        }
        else if( document.selection )
        {
            var sel = document.selection;
            if( sel.type == 'Text' )
            {
                var nodes = [];
                var ranges = sel.createRangeCollection();
                for( var i=0; i < ranges.length; ++i )
                {
                    var range = ranges[i],
                        parentNode = range.parentElement(),
                        node = parentNode;
                    while( node )
                    {
                        // No clue how to detect whether a TextNode is within the selection...
                        // ElementNode is easy: http://stackoverflow.com/questions/5884210/how-to-find-if-a-htmlelement-is-enclosed-in-selected-text
                        var noderange = range.duplicate();
                        noderange.moveToElementText( node.nodeType != Node_ELEMENT_NODE ? node.parentNode : node );
                        // start after or end before -> skip node
                        if( noderange.compareEndPoints('EndToStart',range) >= 0 &&
                            noderange.compareEndPoints('StartToEnd',range) <= 0 )
                        {
                            // no "Array.indexOf()" in IE8
                            var in_array = false;
                            for( var j=0; j < nodes.length; ++j )
                            {
                                if( nodes[j] !== node )
                                    continue;
                                in_array = true;
                                break;
                            }
                            if( ! in_array )
                                nodes.push( node );
                        }
                        node = nextNode( node, parentNode );
                    }
                }
                // Fallback
                if( nodes.length == 0 && isOrContainsNode(containerNode,document.activeElement) && document.activeElement != containerNode )
                    nodes.push( document.activeElement );
                return nodes;
            }
            if( sel.type == 'Control' ) // e.g. an image selected
            {
                var nodes = [];
                // http://msdn.microsoft.com/en-us/library/ie/hh826021%28v=vs.85%29.aspx
                var range = sel.createRange();
                for( var i=0; i < range.length; ++i )
                    nodes.push( range(i) );
                return nodes;
            }
        }
        return [];
    };

    // http://stackoverflow.com/questions/8513368/collapse-selection-to-start-of-selection-not-div
    var collapseSelectionEnd = function()
    {
        if( window.getSelection )
        {
            var sel = window.getSelection();
            if( ! sel.isCollapsed )
            {
                // Form-submits via Enter throw 'NS_ERROR_FAILURE' on Firefox 34
                try {
                    sel.collapseToEnd();
                }
                catch( e ) {
                }
            }
        }
        else if( document.selection )
        {
            var sel = document.selection;
            if( sel.type != 'Control' )
            {
                var range = sel.createRange();
                range.collapse(false);
                range.select();
            }
        }
    };

    // http://stackoverflow.com/questions/15157435/get-last-character-before-caret-position-in-javascript
    // http://stackoverflow.com/questions/11247737/how-can-i-get-the-word-that-the-caret-is-upon-inside-a-contenteditable-div
    var expandSelectionCaret = function( containerNode, preceding, following )
    {
        if( window.getSelection )
        {
            var sel = window.getSelection();
            if( sel.modify )
            {
                for( var i=0; i < preceding; ++i )
                    sel.modify('extend', 'backward', 'character');
                for( var i=0; i < following; ++i )
                    sel.modify('extend', 'forward', 'character');
            }
            else
            {
                // not so easy if the steps would cover multiple nodes ...
                var range = sel.getRangeAt(0);
                range.setStart( range.startContainer, range.startOffset - preceding );
                range.setEnd( range.endContainer, range.endOffset + following );
                sel.removeAllRanges();
                sel.addRange(range);
            }
        }
        else if( document.selection )
        {
            var sel = document.selection;
            if( sel.type != 'Control' )
            {
                var range = sel.createRange();
                range.collapse(true);
                range.moveStart('character', -preceding);
                range.moveEnd('character', following);
                range.select();
            }
        }
    };

    // http://stackoverflow.com/questions/4652734/return-html-from-a-user-selected-text/4652824#4652824
    var getSelectionHtml = function( containerNode )
    {
        if( getSelectionCollapsed( containerNode ) )
            return null;
        if( window.getSelection )
        {
            var sel = window.getSelection();
            if( sel.rangeCount )
            {
                var container = document.createElement('div'),
                    len = sel.rangeCount;
                for( var i=0; i < len; ++i )
                {
                    var contents = sel.getRangeAt(i).cloneContents();
                    container.appendChild(contents);
                }
                return container.innerHTML;
            }
        }
        else if( document.selection )
        {
            var sel = document.selection;
            if( sel.type == 'Text' )
            {
                var range = sel.createRange();
                return range.htmlText;
            }
        }
        return null;
    };

    var selectionInside = function( containerNode, force )
    {
        // selection inside editor?
        if( window.getSelection )
        {
            var sel = window.getSelection();
            if( isOrContainsNode(containerNode,sel.anchorNode) && isOrContainsNode(containerNode,sel.focusNode) )
                return true;
            // selection at least partly outside editor
            if( ! force )
                return false;
            // force selection to editor
            var range = document.createRange();
            range.selectNodeContents( containerNode );
            range.collapse( false );
            sel.removeAllRanges();
            sel.addRange(range);
        }
        else if( document.selection )
        {
            var sel = document.selection;
            if( sel.type == 'Control' ) // e.g. an image selected
            {
                // http://msdn.microsoft.com/en-us/library/ie/hh826021%28v=vs.85%29.aspx
                var range = sel.createRange();
                if( range.length != 0 && isOrContainsNode(containerNode,range(0)) ) // test only the first element
                    return true;
            }
            else //if( sel.type == 'Text' || sel.type == 'None' )
            {
                // Range of container
                // http://stackoverflow.com/questions/12243898/how-to-select-all-text-in-contenteditable-div
                var rangeContainer = document.body.createTextRange();
                rangeContainer.moveToElementText(containerNode);
                // Compare with selection range
                var range = sel.createRange();
                if( rangeContainer.inRange(range) )
                    return true;
            }
            // selection at least partly outside editor
            if( ! force )
                return false;
            // force selection to editor
            // http://stackoverflow.com/questions/12243898/how-to-select-all-text-in-contenteditable-div
            var range = document.body.createTextRange();
            range.moveToElementText(containerNode);
            range.setEndPoint('StartToEnd',range); // collapse
            range.select();
        }
        return true;
    };

    /*
    var clipSelectionTo = function( containerNode )
    {
        if( window.getSelection && containerNode.compareDocumentPosition )
        {
            var sel = window.getSelection();
            var left_node = sel.anchorNode,
                left_offset = sel.anchorOffset,
                right_node = sel.focusNode,
                right_offset = sel.focusOffset;
            // http://stackoverflow.com/questions/10710733/dom-determine-if-the-anchornode-or-focusnode-is-on-the-left-side
            if( (left_node == right_node && left_offset > right_offset) ||
                (left_node.compareDocumentPosition(right_node) & Node.DOCUMENT_POSITION_PRECEDING) )
            {
                // Right-to-left selection
                left_node = sel.focusNode;
                left_offset = sel.focusOffset;
                right_node = sel.anchorNode,
                right_offset = sel.anchorOffset;
            }
            // Speed up: selection inside editor
            var left_inside = isOrContainsNode(containerNode,left_node),
                right_inside = isOrContainsNode(containerNode,right_node);
            if( left_inside && right_inside )
                return true;
            // Selection before/after container?
            if( ! left_inside && containerNode.compareDocumentPosition(left_node) & Node.DOCUMENT_POSITION_FOLLOWING )
                return false; // selection after
            if( ! right_inside && containerNode.compareDocumentPosition(right_node) & Node.DOCUMENT_POSITION_PRECEDING )
                return false; // selection before
            // Selection partly before/after container
            // http://stackoverflow.com/questions/12243898/how-to-select-all-text-in-contenteditable-div
            var range = document.createRange();
            range.selectNodeContents( containerNode );
            if( left_inside )
                range.setStart( left_node, left_offset );
            if( right_inside )
                range.setEnd( right_node, right_offset );
            sel.removeAllRanges();
            sel.addRange(range);
            return true;
        }
        else if( document.selection )
        {
            var sel = document.selection;
            if( sel.type == 'Text' )
            {
                // Range of container
                // http://stackoverflow.com/questions/12243898/how-to-select-all-text-in-contenteditable-div
                var rangeContainer = document.body.createTextRange();
                rangeContainer.moveToElementText(containerNode);
                // Compare with selection range
                var range = sel.createRange();
                if( rangeContainer.inRange(range) )
                    return true;
                // Selection before/after container?
                if( rangeContainer.compareEndPoints('StartToEnd',range) > 0 )
                    return false;
                if( rangeContainer.compareEndPoints('EndToStart',range) < 0 )
                    return false;
                // Selection partly before/after container
                if( rangeContainer.compareEndPoints('StartToStart',range) > 0 )
                    range.setEndPoint('StartToStart',rangeContainer);
                if( rangeContainer.compareEndPoints('EndToEnd',range) < 0 )
                    range.setEndPoint('EndToEnd',rangeContainer);
                // select range
                range.select();
                return true;
            }
        }
        return true;
    };
    */

    // http://stackoverflow.com/questions/6690752/insert-html-at-caret-in-a-contenteditable-div/6691294#6691294
    // http://stackoverflow.com/questions/4823691/insert-an-html-element-in-a-contenteditable-element
    // http://stackoverflow.com/questions/6139107/programatically-select-text-in-a-contenteditable-html-element
    var pasteHtmlAtCaret = function( containerNode, html )
    {
        if( window.getSelection )
        {
            // IE9 and non-IE
            var sel = window.getSelection();
            if( sel.getRangeAt && sel.rangeCount )
            {
                var range = sel.getRangeAt(0);
                // Range.createContextualFragment() would be useful here but is
                // only relatively recently standardized and is not supported in
                // some browsers (IE9, for one)
                var el = document.createElement('div');
                el.innerHTML = html;
                var frag = document.createDocumentFragment(), node, lastNode;
                while ( (node = el.firstChild) ) {
                    lastNode = frag.appendChild(node);
                }
                if( isOrContainsNode(containerNode, range.commonAncestorContainer) )
                {
                    range.deleteContents();
                    range.insertNode(frag);
                }
                else {
                    containerNode.appendChild(frag);
                }
                // Preserve the selection
                if( lastNode )
                {
                    range = range.cloneRange();
                    range.setStartAfter(lastNode);
                    range.collapse(true);
                    sel.removeAllRanges();
                    sel.addRange(range);
                }
            }
        }
        else if( document.selection )
        {
            // IE <= 8
            var sel = document.selection;
            if( sel.type != 'Control' )
            {
                var originalRange = sel.createRange();
                originalRange.collapse(true);
                var range = sel.createRange();
                if( isOrContainsNode(containerNode, range.parentElement()) )
                    range.pasteHTML( html );
                else // simply append to Editor
                {
                    var textRange = document.body.createTextRange();
                    textRange.moveToElementText(containerNode);
                    textRange.collapse(false);
                    textRange.select();
                    textRange.pasteHTML( html );
                }
                // Preserve the selection
                range = sel.createRange();
                range.setEndPoint('StartToEnd', originalRange);
                range.select();
            }
        }
    };

    // Interface: Create wysiwyg
    window.wysiwyg = function( option )
    {
        // Options
        option = option || {};
        var option_element = option.element || null;
        if( typeof(option_element) == 'string' )
            option_element = document.getElementById( option_element );
        var option_onkeydown = option.onKeyDown || null;
        var option_onkeypress = option.onKeyPress || null;
        var option_onkeyup = option.onKeyUp || null;
        var option_onselection = option.onSelection || null;
        var option_onplaceholder = option.onPlaceholder || null;
        var option_onclosepopup = option.onClosepopup || null;
        var option_hijackcontextmenu = option.hijackContextmenu || false;

        // Keep textarea if browser can't handle content-editable
        var is_textarea = option_element.nodeName == 'TEXTAREA' || option_element.nodeName == 'INPUT';
        if( is_textarea )
        {
            // http://stackoverflow.com/questions/1882205/how-do-i-detect-support-for-contenteditable-via-javascript
            var canContentEditable = 'contentEditable' in document.body;
            if( canContentEditable )
            {
                // Sniffer useragent...
                var webkit = navigator.userAgent.match(/(?:iPad|iPhone|Android).* AppleWebKit\/([^ ]+)/);
                if( webkit && 420 <= parseInt(webkit[1]) && parseInt(webkit[1]) < 534 ) // iPhone 1 was Webkit/420
                    canContentEditable = false;
            }
            if( ! canContentEditable )
            {
                // Keep textarea
                var node_textarea = option_element;
                // Add a 'newline' after each '<br>'
                var newlineAfterBR = function( html ) {
                    return html.replace(/<br[ \/]*>\n?/gi,'<br>\n');
                };
                node_textarea.value = newlineAfterBR( node_textarea.value );
                // Command structure
                var dummy_this = function() {
                    return this;
                };
                var dummy_null = function() {
                    return null;
                };
                return {
                    legacy: true,
                    // properties
                    getElement: function()
                    {
                        return node_textarea;
                    },
                    getHTML: function()
                    {
                        return node_textarea.value;
                    },
                    setHTML: function( html )
                    {
                        node_textarea.value = newlineAfterBR( html );
                        return this;
                    },
                    getSelectedHTML: dummy_null,
                    sync: dummy_this,
                    // selection and popup
                    collapseSelection: dummy_this,
                    expandSelection: dummy_this,
                    openPopup: dummy_null,
                    closePopup: dummy_this,
                    // exec commands
                    removeFormat: dummy_this,
                    bold: dummy_this,
                    italic: dummy_this,
                    underline: dummy_this,
                    strikethrough: dummy_this,
                    forecolor: dummy_this,
                    highlight: dummy_this,
                    fontName: dummy_this,
                    fontSize: dummy_this,
                    subscript: dummy_this,
                    superscript: dummy_this,
                    align: dummy_this,
                    format: dummy_this,
                    indent: dummy_this,
                    insertLink: dummy_this,
                    insertImage: dummy_this,
                    insertHTML: dummy_this,
                    insertList: dummy_this
                };
            }
        }

        // create content-editable
        var node_textarea = null,
            node_wysiwyg = null;
        if( is_textarea )
        {
            // Textarea
            node_textarea = option_element;
            node_textarea.style.display = 'none';

            // Contenteditable
            node_wysiwyg = document.createElement( 'DIV' );
            node_wysiwyg.innerHTML = node_textarea.value;
            var parent = node_textarea.parentNode,
                next = node_textarea.nextSibling;
            if( next )
                parent.insertBefore( node_wysiwyg, next );
            else
                parent.appendChild( node_wysiwyg );
        }
        else
            node_wysiwyg = option_element;
        node_wysiwyg.setAttribute( 'contentEditable', 'true' ); // IE7 is case sensitive

        // IE8 uses 'document' instead of 'window'
        // http://tanalin.com/en/articles/ie-version-js/
        var window_ie8 = (document.all && !document.addEventListener) ? document : window;

        // Sync Editor with Textarea
        var syncTextarea = null;
        if( is_textarea )
        {
            var previous_html = node_wysiwyg.innerHTML;
            syncTextarea = function()
            {
                var new_html = node_wysiwyg.innerHTML;
                if( new_html == previous_html )
                    return ;
                // HTML changed
                node_textarea.value = new_html;
                previous_html = new_html;
                // Event Handler
                fireEvent( node_textarea, 'change', false );
            };
        }

        // Show placeholder
        var showPlaceholder;
        if( option_onplaceholder )
        {
            var placeholder_visible = false;
            showPlaceholder = function()
            {
                // Test if wysiwyg has content
                var wysiwyg_empty = true;
                var node = node_wysiwyg;
                while( node )
                {
                    node = nextNode( node, node_wysiwyg );
                    // Test if node contains something visible
                    if( ! node )
                        ;
                    else if( node.nodeType == Node_ELEMENT_NODE )
                    {
                        if( node.nodeName == 'IMG' )
                        {
                            wysiwyg_empty = false;
                            break;
                        }
                    }
                    else if( node.nodeType == Node_TEXT_NODE )
                    {
                        var text = node.nodeValue;
                        if( text && text.search(/[^\s]/) != -1 )
                        {
                            wysiwyg_empty = false;
                            break;
                        }
                    }
                }
                if( placeholder_visible != wysiwyg_empty )
                {
                    option_onplaceholder( wysiwyg_empty );
                    placeholder_visible = wysiwyg_empty;
                }
            };
            showPlaceholder();
        }

        // Handle selection
        var popup_saved_selection = null, // preserve selection during popup
            handleSelection = null,
            debounced_handleSelection = null;
        if( option_onselection )
        {
            handleSelection = function( clientX, clientY, rightclick )
            {
                // Detect collapsed selection
                var collapsed = getSelectionCollapsed( node_wysiwyg );
                // List of all selected nodes
                var nodes = getSelectedNodes( node_wysiwyg );
                // Rectangle of the selection
                var rect = (clientX === null || clientY === null) ? null :
                            {
                                left: clientX,
                                top: clientY,
                                width: 0,
                                height: 0
                            };
                var selectionRect = getSelectionRect();
                if( selectionRect )
                    rect = selectionRect;
                if( rect )
                {
                    // So far 'rect' is relative to viewport
                    if( node_wysiwyg.getBoundingClientRect )
                    {
                        // Make it relative to the editor via 'getBoundingClientRect()'
                        var boundingrect = node_wysiwyg.getBoundingClientRect();
                        rect.left -= parseInt(boundingrect.left);
                        rect.top -= parseInt(boundingrect.top);
                    }
                    else
                    {
                        var node = node_wysiwyg,
                            offsetLeft = 0,
                            offsetTop = 0,
                            fixed = false;
                        do {
                            offsetLeft += node.offsetLeft ? parseInt(node.offsetLeft) : 0;
                            offsetTop += node.offsetTop ? parseInt(node.offsetTop) : 0;
                            if( node.style.position == 'fixed' )
                                fixed = true;
                        }
                        while( node = node.offsetParent );
                        rect.left -= offsetLeft - (fixed ? 0 : window.pageXOffset);
                        rect.top -= offsetTop - (fixed ? 0 : window.pageYOffset);
                    }
                    // Trim rectangle to the editor
                    if( rect.left < 0 )
                        rect.left = 0;
                    if( rect.top < 0 )
                        rect.top = 0;
                    if( rect.width > node_wysiwyg.offsetWidth )
                        rect.width = node_wysiwyg.offsetWidth;
                    if( rect.height > node_wysiwyg.offsetHeight )
                        rect.height = node_wysiwyg.offsetHeight;
                }
                else if( nodes.length )
                {
                    // What else could we do? Offset of first element...
                    for( var i=0; i < nodes.length; ++i )
                    {
                        var node = nodes[i];
                        if( node.nodeType != Node_ELEMENT_NODE )
                            continue;
                        rect = {
                                left: node.offsetLeft,
                                top: node.offsetTop,
                                width: node.offsetWidth,
                                height: node.offsetHeight
                            };
                        break;
                    }
                }
                // Callback
                option_onselection( collapsed, rect, nodes, rightclick );
            };
            debounced_handleSelection = debounce( handleSelection, 1 );
        }

        // Open popup
        var node_popup = null;
        var popupClickClose = function( e )
        {
            // http://www.quirksmode.org/js/events_properties.html
            if( !e )
                var e = window.event;
            var target = e.target || e.srcElement;
            if( target.nodeType == Node_TEXT_NODE ) // defeat Safari bug
                target = target.parentNode;
            // Click within popup?
            if( isOrContainsNode(node_popup,target) )
                return ;
            // close popup
            popupClose();
        };
        var popupOpen = function()
        {
            // Already open?
            if( node_popup )
                return node_popup;

            // Global click closes popup
            addEvent( window_ie8, 'mousedown', popupClickClose, true );

            // Create popup element
            node_popup = document.createElement( 'DIV' );
            var parent = node_wysiwyg.parentNode,
                next = node_wysiwyg.nextSibling;
            if( next )
                parent.insertBefore( node_popup, next );
            else
                parent.appendChild( node_popup );
            return node_popup;
        };
        var popupClose = function()
        {
            if( ! node_popup )
                return ;
            node_popup.parentNode.removeChild( node_popup );
            node_popup = null;
            removeEvent( window_ie8, 'mousedown', popupClickClose, true );
            if( option_onclosepopup )
                option_onclosepopup();
        };

        // Focus/Blur events
        addEvent( node_wysiwyg, 'focus', function()
        {
            // forward focus/blur to the textarea
            if( node_textarea )
                fireEvent( node_textarea, 'focus', false );
        });
        addEvent( node_wysiwyg, 'blur', function()
        {
            // sync textarea immediately
            if( syncTextarea )
                syncTextarea();
            // forward focus/blur to the textarea
            if( node_textarea )
                fireEvent( node_textarea, 'blur', false );
        });

        // Change events
        var debounced_changeHandler = null;
        if( showPlaceholder || syncTextarea )
        {
            // debounce 'syncTextarea' a second time, because 'innerHTML' is quite burdensome
            var debounced_syncTextarea = syncTextarea ? debounce( syncTextarea, 250, true ) : null; // high timeout is save, because of "onblur" fires immediately
            var changeHandler = function( e )
            {
                if( showPlaceholder )
                    showPlaceholder();
                if( debounced_syncTextarea )
                    debounced_syncTextarea();
            };
            debounced_changeHandler = debounce( changeHandler, 1 );

            // Catch change events
            // http://stackoverflow.com/questions/1391278/contenteditable-change-events/1411296#1411296
            // http://stackoverflow.com/questions/8694054/onchange-event-with-contenteditable/8694125#8694125
            // https://github.com/mindmup/bootstrap-wysiwyg/pull/50/files
            // http://codebits.glennjones.net/editing/events-contenteditable.htm
            addEvent( node_wysiwyg, 'input', debounced_changeHandler );
            addEvent( node_wysiwyg, 'DOMNodeInserted', debounced_changeHandler );
            addEvent( node_wysiwyg, 'DOMNodeRemoved', debounced_changeHandler );
            addEvent( node_wysiwyg, 'DOMSubtreeModified', debounced_changeHandler );
            addEvent( node_wysiwyg, 'DOMCharacterDataModified', debounced_changeHandler ); // polyfill input in IE 9-10
            addEvent( node_wysiwyg, 'propertychange', debounced_changeHandler );
            addEvent( node_wysiwyg, 'textInput', debounced_changeHandler );
            addEvent( node_wysiwyg, 'paste', debounced_changeHandler );
            addEvent( node_wysiwyg, 'cut', debounced_changeHandler );
            addEvent( node_wysiwyg, 'drop', debounced_changeHandler );
        }

        // Key events
        // http://sandbox.thewikies.com/html5-experiments/key-events.html
        var keyHandler = function( e, phase )
        {
            // http://www.quirksmode.org/js/events_properties.html
            if( !e )
                var e = window.event;
            // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent
            // http://stackoverflow.com/questions/1444477/keycode-and-charcode
            // http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion
            // http://unixpapa.com/js/key.html
            var key = e.which || e.keyCode,
                character = String.fromCharCode(key || e.charCode),
                shiftKey = e.shiftKey || false,
                altKey = e.altKey || false,
                ctrlKey = e.ctrlKey || false,
                metaKey = e.metaKey || false;
             if( phase == 1 )
            {
                // Callback
                if( option_onkeydown && option_onkeydown(key, character, shiftKey, altKey, ctrlKey, metaKey) === false )
                    return cancelEvent( e ); // dismiss key
            }
            else if( phase == 2 )
            {
                // Callback
                if( option_onkeypress && option_onkeypress(key, character, shiftKey, altKey, ctrlKey, metaKey) === false )
                    return cancelEvent( e ); // dismiss key
            }
            else if( phase == 3 )
            {
                // Callback
                if( option_onkeyup && option_onkeyup(key, character, shiftKey, altKey, ctrlKey, metaKey) === false )
                    return cancelEvent( e ); // dismiss key
            }

            // Keys can change the selection
            if( phase == 2 || phase == 3 )
            {
                popup_saved_selection = null;
                if( debounced_handleSelection )
                    debounced_handleSelection( null, null, false );
            }
            // Most keys can cause text-changes
            if( phase == 2 && debounced_changeHandler )
            {
                switch( key )
                {
                    case 33: // pageUp
                    case 34: // pageDown
                    case 35: // end
                    case 36: // home
                    case 37: // left
                    case 38: // up
                    case 39: // right
                    case 40: // down
                        // cursors do not
                        break;
                    default:
                        // call change handler
                        debounced_changeHandler();
                        break;
                }
            }
        };
        addEvent( node_wysiwyg, 'keydown', function( e )
        {
            return keyHandler( e, 1 );
        });
        addEvent( node_wysiwyg, 'keypress', function( e )
        {
            return keyHandler( e, 2 );
        });
        addEvent( node_wysiwyg, 'keyup', function( e )
        {
            return keyHandler( e, 3 );
        });

        // Mouse events
        var mouseHandler = function( e, rightclick )
        {
            // http://www.quirksmode.org/js/events_properties.html
            if( !e )
                var e = window.event;
            // mouse position
            var clientX = null,
                clientY = null;
            if( e.clientX && e.clientY )
            {
                clientX = e.clientX;
                clientY = e.clientY;
            }
            else if( e.pageX && e.pageY )
            {
                clientX = e.pageX - window.pageXOffset;
                clientY = e.pageY - window.pageYOffset;
            }
            // mouse button
            if( e.which && e.which == 3 )
                rightclick = true;
            else if( e.button && e.button == 2 )
                rightclick = true;

            // remove event handler
            removeEvent( window_ie8, 'mouseup', mouseHandler );
            // Callback selection
            popup_saved_selection = null;
            if( ! option_hijackcontextmenu && rightclick )
                return ;
            if( debounced_handleSelection )
                debounced_handleSelection( clientX, clientY, rightclick );
        };
        addEvent( node_wysiwyg, 'mousedown', function( e )
        {
            // catch event if 'mouseup' outside 'node_wysiwyg'
            removeEvent( window_ie8, 'mouseup', mouseHandler );
            addEvent( window_ie8, 'mouseup', mouseHandler );
        });
        addEvent( node_wysiwyg, 'mouseup', function( e )
        {
            mouseHandler( e );
            // Trigger change
            if( debounced_changeHandler )
                debounced_changeHandler();
        });
        addEvent( node_wysiwyg, 'dblclick', function( e )
        {
            mouseHandler( e );
        });
        addEvent( node_wysiwyg, 'selectionchange',  function( e )
        {
            mouseHandler( e );
        });
        if( option_hijackcontextmenu )
        {
            addEvent( node_wysiwyg, 'contextmenu', function( e )
            {
                mouseHandler( e, true );
                return cancelEvent( e );
            });
        }


        // exec command
        // https://developer.mozilla.org/en-US/docs/Web/API/document.execCommand
        // http://www.quirksmode.org/dom/execCommand.html
        var execCommand = function( command, param, force_selection )
        {
            // give selection to contenteditable element
            restoreSelection( node_wysiwyg, popup_saved_selection );
            if( ! selectionInside(node_wysiwyg, force_selection) ) // returns 'selection inside editor'
                return false;
            // for webkit, mozilla, opera
            if( window.getSelection )
            {
                // Buggy, call within 'try/catch'
                try {
                    if( document.queryCommandSupported && ! document.queryCommandSupported(command) )
                        return false;
                    return document.execCommand( command, false, param );
                }
                catch( e ) {
                }
            }
            // for IE
            else if( document.selection )
            {
                var sel = document.selection;
                if( sel.type != 'None' )
                {
                    var range = sel.createRange();
                    // Buggy, call within 'try/catch'
                    try {
                        if( ! range.queryCommandEnabled(command) )
                            return false;
                        return range.execCommand( command, false, param );
                    }
                    catch( e ) {
                    }
                }
            }
            return false;
        };

        // Command structure
        var trailingDiv = null;
        var IEtrailingDIV = function()
        {
            // Detect IE - http://stackoverflow.com/questions/17907445/how-to-detect-ie11
            if( document.all || !!window.MSInputMethodContext )
            {
                // Workaround IE11 - https://github.com/wysiwygjs/wysiwyg.js/issues/14
                trailingDiv = document.createElement( 'DIV' );
                node_wysiwyg.appendChild( trailingDiv );
            }
        };
        var callUpdates = function( selection_destroyed )
        {
            // Remove IE11 workaround
            if( trailingDiv )
            {
                node_wysiwyg.removeChild( trailingDiv );
                trailingDiv = null;
            }
            // change-handler
            if( debounced_changeHandler )
                debounced_changeHandler();
            // handle saved selection
            if( selection_destroyed )
            {
                collapseSelectionEnd();
                popup_saved_selection = null; // selection destroyed
            }
            else if( popup_saved_selection )
                popup_saved_selection = saveSelection( node_wysiwyg );
        };
        return {
            // properties
            getElement: function()
            {
                return node_wysiwyg;
            },
            getHTML: function()
            {
                return node_wysiwyg.innerHTML;
            },
            setHTML: function( html )
            {
                node_wysiwyg.innerHTML = html;
                callUpdates( true ); // selection destroyed
                return this;
            },
            getSelectedHTML: function()
            {
                restoreSelection( node_wysiwyg, popup_saved_selection );
                if( ! selectionInside(node_wysiwyg) )
                    return null;
                return getSelectionHtml( node_wysiwyg );
            },
            sync: function()
            {
                if( syncTextarea )
                    syncTextarea();
                return this;
            },
            // selection and popup
            collapseSelection: function()
            {
                collapseSelectionEnd();
                popup_saved_selection = null; // selection destroyed
                return this;
            },
            expandSelection: function( preceding, following )
            {
                restoreSelection( node_wysiwyg, popup_saved_selection );
                if( ! selectionInside(node_wysiwyg) )
                    return this;
                expandSelectionCaret( node_wysiwyg, preceding, following );
                popup_saved_selection = saveSelection( node_wysiwyg ); // save new selection
                return this;
            },
            openPopup: function()
            {
                if( ! popup_saved_selection )
                    popup_saved_selection = saveSelection( node_wysiwyg ); // save current selection
                return popupOpen();
            },
            closePopup: function()
            {
                popupClose();
                return this;
            },
            removeFormat: function()
            {
                execCommand( 'removeFormat' );
                execCommand( 'unlink' );
                callUpdates();
                return this;
            },
            bold: function()
            {
                execCommand( 'bold' );
                callUpdates();
                return this;
            },
            italic: function()
            {
                execCommand( 'italic' );
                callUpdates();
                return this;
            },
            underline: function()
            {
                execCommand( 'underline' );
                callUpdates();
                return this;
            },
            strikethrough: function()
            {
                execCommand( 'strikeThrough' );
                callUpdates();
                return this;
            },
            forecolor: function( color )
            {
                execCommand( 'foreColor', color );
                callUpdates();
                return this;
            },
            highlight: function( color )
            {
                // http://stackoverflow.com/questions/2756931/highlight-the-text-of-the-dom-range-element
                if( ! execCommand('hiliteColor',color) ) // some browsers apply 'backColor' to the whole block
                    execCommand( 'backColor', color );
                callUpdates();
                return this;
            },
            fontName: function( name )
            {
                execCommand( 'fontName', name );
                callUpdates();
                return this;
            },
            fontSize: function( size )
            {
                execCommand( 'fontSize', size );
                callUpdates();
                return this;
            },
            subscript: function()
            {
                execCommand( 'subscript' );
                callUpdates();
                return this;
            },
            superscript: function()
            {
                execCommand( 'superscript' );
                callUpdates();
                return this;
            },
            align: function( align )
            {
                IEtrailingDIV();
                if( align == 'left' )
                    execCommand( 'justifyLeft' );
                else if( align == 'center' )
                    execCommand( 'justifyCenter' );
                else if( align == 'right' )
                    execCommand( 'justifyRight' );
                else if( align == 'justify' )
                    execCommand( 'justifyFull' );
                callUpdates();
                return this;
            },
            format: function( tagname )
            {
                IEtrailingDIV();
                execCommand( 'formatBlock', tagname );
                callUpdates();
                return this;
            },
            indent: function( outdent )
            {
                IEtrailingDIV();
                execCommand( outdent ? 'outdent' : 'indent' );
                callUpdates();
                return this;
            },
            insertLink: function( url )
            {
                execCommand( 'createLink', url );
                callUpdates( true ); // selection destroyed
                return this;
            },
            insertImage: function( url )
            {
                execCommand( 'insertImage', url, true );
                callUpdates( true ); // selection destroyed
                return this;
            },
            insertHTML: function( html )
            {
                if( ! execCommand('insertHTML', html, true) )
                {
                    // IE 11 still does not support 'insertHTML'
                    restoreSelection( node_wysiwyg, popup_saved_selection );
                    selectionInside( node_wysiwyg, true );
                    pasteHtmlAtCaret( node_wysiwyg, html );
                }
                callUpdates( true ); // selection destroyed
                return this;
            },
            insertList: function( ordered )
            {
                IEtrailingDIV();
                execCommand( ordered ? 'insertOrderedList' : 'insertUnorderedList' );
                callUpdates();
                return this;
            }
        };
    };
})(window, document, navigator);
;(function(window, document, $, undefined){
    'use strict';

    // http://stackoverflow.com/questions/17242144/javascript-convert-hsb-hsv-color-to-rgb-accurately
    var HSVtoRGB = function( h, s, v )
    {
        var r, g, b, i, f, p, q, t;
        i = Math.floor(h * 6);
        f = h * 6 - i;
        p = v * (1 - s);
        q = v * (1 - f * s);
        t = v * (1 - (1 - f) * s);
        switch (i % 6)
        {
            case 0: r = v, g = t, b = p; break;
            case 1: r = q, g = v, b = p; break;
            case 2: r = p, g = v, b = t; break;
            case 3: r = p, g = q, b = v; break;
            case 4: r = t, g = p, b = v; break;
            case 5: r = v, g = p, b = q; break;
        }
        var hr = Math.floor(r * 255).toString(16);
        var hg = Math.floor(g * 255).toString(16);
        var hb = Math.floor(b * 255).toString(16);
        return '#' + (hr.length < 2 ? '0' : '') + hr +
                     (hg.length < 2 ? '0' : '') + hg +
                     (hb.length < 2 ? '0' : '') + hb;
    };

    // Encode htmlentities() - http://stackoverflow.com/questions/5499078/fastest-method-to-escape-html-tags-as-html-entities
    var html_encode = function( string )
    {
        return string.replace(/[&<>"]/g, function(tag)
        {
            var charsToReplace = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;'
            };
            return charsToReplace[tag] || tag;
        });
    };

    // Create the Editor
    var create_editor = function( $textarea, classes, placeholder, toolbar_position, toolbar_buttons, toolbar_submit, label_selectImage,
                                  placeholder_url, placeholder_embed, max_imagesize, on_imageupload, force_imageupload, video_from_url,
                                  on_keydown, on_keypress, on_keyup, on_autocomplete )
    {
        // Content: Insert link
        var wysiwygeditor_insertLink = function( wysiwygeditor, url )
        {
            if( ! url )
                ;
            else if( wysiwygeditor.getSelectedHTML() )
                wysiwygeditor.insertLink( url );
            else
                wysiwygeditor.insertHTML( '<a href="' + html_encode(url) + '">' + html_encode(url) + '</a>' );
            wysiwygeditor.closePopup().collapseSelection();
        };
        var content_insertlink = function(wysiwygeditor, $modify_link)
        {
            var $button = toolbar_button( toolbar_submit );
            var $inputurl = $('<input type="text" value="' + ($modify_link ? $modify_link.attr('href') : '') + '" />').addClass('wysiwyg-input')
                                .keypress(function(event){
                                    if( event.which != 10 && event.which != 13 )
                                        return ;
                                    if( $modify_link )
                                    {
                                        $modify_link.attr( 'href', $inputurl.val() );
                                        wysiwygeditor.closePopup().collapseSelection();
                                    }
                                    else
                                        wysiwygeditor_insertLink( wysiwygeditor,$inputurl.val() );
                                });
            if( placeholder_url )
                $inputurl.attr( 'placeholder', placeholder_url );
            var $okaybutton = $button.click(function(event){
                                    if( $modify_link )
                                    {
                                        $modify_link.attr( 'href', $inputurl.val() );
                                        wysiwygeditor.closePopup().collapseSelection();
                                    }
                                    else
                                        wysiwygeditor_insertLink( wysiwygeditor, $inputurl.val() );
                                    event.stopPropagation();
                                    event.preventDefault();
                                    return false;
                                });
            var $content = $('<div/>').addClass('wysiwyg-toolbar-form')
                                      .attr('unselectable','on');
            $content.append($inputurl).append($okaybutton);
            return $content;
        };

        // Content: Insert image
        var content_insertimage = function(wysiwygeditor)
        {
            var insert_image_wysiwyg = function( url, filename )
            {
                var html = '<img id="wysiwyg-insert-image" src="" alt=""' + (filename ? ' title="'+html_encode(filename)+'"' : '') + ' />';
                wysiwygeditor.insertHTML( html ).closePopup().collapseSelection();
                var $image = $('#wysiwyg-insert-image').removeAttr('id');
                if( max_imagesize )
                {
                    $image.css({maxWidth: max_imagesize[0]+'px',
                                maxHeight: max_imagesize[1]+'px'})
                          .load( function() {
                                $image.css({maxWidth: '',
                                            maxHeight: ''});
                                var image_width = $image.width(),
                                    image_height = $image.height();
                                if( image_width > max_imagesize[0] || image_height > max_imagesize[1] )
                                {
                                    if( (image_width/image_height) > (max_imagesize[0]/max_imagesize[1]) )
                                    {
                                        image_height = parseInt(image_height / image_width * max_imagesize[0]);
                                        image_width = max_imagesize[0];
                                    }
                                    else
                                    {
                                        image_width = parseInt(image_width / image_height * max_imagesize[1]);
                                        image_height = max_imagesize[1];
                                    }
                                    $image.attr('width',image_width)
                                          .attr('height',image_height);
                                }
                            });
                }
                $image.attr('src', url);
            };
            // Create popup
            var $content = $('<div/>').addClass('wysiwyg-toolbar-form')
                                      .attr('unselectable','on');
            // Add image via 'Browse...'
            var $fileuploader = null,
                $fileuploader_input = $('<input type="file" />')
                                        .css({position: 'absolute',
                                              left: 0,
                                              top: 0,
                                              width: '100%',
                                              height: '100%',
                                              opacity: 0,
                                              cursor: 'pointer'});
            if( ! force_imageupload && window.File && window.FileReader && window.FileList )
            {
                // File-API
                var loadImageFromFile = function( file )
                {
                    // Only process image files
                    if( ! file.type.match('image.*') )
                        return;
                    var reader = new FileReader();
                    reader.onload = function(event) {
                        var dataurl = event.target.result;
                        insert_image_wysiwyg( dataurl, file.name );
                    };
                    // Read in the image file as a data URL
                    reader.readAsDataURL( file );
                };
                $fileuploader = $fileuploader_input
                                    .attr('draggable','true')
                                    .change(function(event){
                                        var files = event.target.files; // FileList object
                                        for(var i=0; i < files.length; ++i)
                                            loadImageFromFile( files[i] );
                                    })
                                    .on('dragover',function(event){
                                        event.originalEvent.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
                                        event.stopPropagation();
                                        event.preventDefault();
                                        return false;
                                    })
                                    .on('drop', function(event){
                                        var files = event.originalEvent.dataTransfer.files; // FileList object.
                                        for(var i=0; i < files.length; ++i)
                                            loadImageFromFile( files[i] );
                                        event.stopPropagation();
                                        event.preventDefault();
                                        return false;
                                    });
            }
            else if( on_imageupload )
            {
                // Upload image to a server
                var $input = $fileuploader_input
                                    .change(function(event){
                                        on_imageupload.call( this, insert_image_wysiwyg );
                                    });
                $fileuploader = $('<form/>').append($input);
            }
            if( $fileuploader )
                $('<div/>').addClass( 'wysiwyg-browse' )
                           .html( label_selectImage )
                           .append( $fileuploader )
                           .appendTo( $content );
            // Add image via 'URL'
            var $button = toolbar_button( toolbar_submit );
            var $inputurl = $('<input type="text" value="" />').addClass('wysiwyg-input')
                                .keypress(function(event){
                                    if( event.which == 10 || event.which == 13 )
                                        insert_image_wysiwyg( $inputurl.val() );
                                });
            if( placeholder_url )
                $inputurl.attr( 'placeholder', placeholder_url );
            var $okaybutton = $button.click(function(event){
                                    insert_image_wysiwyg( $inputurl.val() );
                                    event.stopPropagation();
                                    event.preventDefault();
                                    return false;
                                });
            $content.append( $('<div/>').append($inputurl).append($okaybutton) );
            return $content;
        };

        // Content: Insert video
        var content_insertvideo = function(wysiwygeditor)
        {
            // Add video to editor
            var insert_video_wysiwyg = function( url, html )
            {
                url = $.trim(url||'');
                html = $.trim(html||'');
                var website_url = false;
                if( url.length && ! html.length )
                    website_url = url;
                else if( html.indexOf('<') == -1 && html.indexOf('>') == -1 &&
                         html.match(/^(?:https?:\/)?\/?(?:[^:\/\s]+)(?:(?:\/\w+)*\/)(?:[\w\-\.]+[^#?\s]+)(?:.*)?(?:#[\w\-]+)?$/) )
                    website_url = html;
                if( website_url && video_from_url )
                    html = video_from_url( website_url ) || '';
                if( ! html.length && website_url )
                    html = '<video src="' + html_encode(website_url) + '" />';
                wysiwygeditor.insertHTML( html ).closePopup().collapseSelection();
            };
            // Create popup
            var $content = $('<div/>').addClass('wysiwyg-toolbar-form')
                                      .attr('unselectable','on');
            // Add video via '<embed/>'
            var $textareaembed = $('<textarea>').addClass('wysiwyg-input wysiwyg-inputtextarea');
            if( placeholder_embed )
                $textareaembed.attr( 'placeholder', placeholder_embed );
            $('<div/>').addClass( 'wysiwyg-embedcode' )
                       .append( $textareaembed )
                       .appendTo( $content );
            // Add video via 'URL'
            var $button = toolbar_button( toolbar_submit );
            var $inputurl = $('<input type="text" value="" />').addClass('wysiwyg-input')
                                .keypress(function(event){
                                    if( event.which == 10 || event.which == 13 )
                                        insert_video_wysiwyg( $inputurl.val() );
                                });
            if( placeholder_url )
                $inputurl.attr( 'placeholder', placeholder_url );
            var $okaybutton = $button.click(function(event){
                                    insert_video_wysiwyg( $inputurl.val(), $textareaembed.val() );
                                    event.stopPropagation();
                                    event.preventDefault();
                                    return false;
                                });
            $content.append( $('<div/>').append($inputurl).append($okaybutton) );
            return $content;
        };

        // Content: Color palette
        var content_colorpalette = function( wysiwygeditor, forecolor )
        {
            var $content = $('<table/>')
                            .attr('cellpadding','0')
                            .attr('cellspacing','0')
                            .attr('unselectable','on');
            for( var row=1; row < 15; ++row ) // should be '16' - but last line looks so dark
            {
                var $rows = $('<tr/>');
                for( var col=0; col < 25; ++col ) // last column is grayscale
                {
                    var color;
                    if( col == 24 )
                    {
                        var gray = Math.floor(255 / 13 * (14 - row)).toString(16);
                        var hexg = (gray.length < 2 ? '0' : '') + gray;
                        color = '#' + hexg + hexg + hexg;
                    }
                    else
                    {
                        var hue        = col / 24;
                        var saturation = row <= 8 ? row     /8 : 1;
                        var value      = row  > 8 ? (16-row)/8 : 1;
                        color = HSVtoRGB( hue, saturation, value );
                    }
                    $('<td/>').addClass('wysiwyg-toolbar-color')
                              .attr('title', color)
                              .attr('unselectable','on')
                              .css({backgroundColor: color})
                              .click(function(){
                                  var color = this.title;
                                  if( forecolor )
                                      wysiwygeditor.forecolor( color ).closePopup().collapseSelection();
                                  else
                                      wysiwygeditor.highlight( color ).closePopup().collapseSelection();
                                  return false;
                              })
                              .appendTo( $rows );
                }
                $content.append( $rows );
            }
            return $content;
        };

        // Handlers
        var get_toolbar_handler = function( name, popup_callback )
        {
            switch( name )
            {
                case 'insertimage':
                    if( ! popup_callback )
                        return null;
                    return function( target ) {
                        popup_callback( content_insertimage(wysiwygeditor), target );
                    };
                case 'insertvideo':
                    if( ! popup_callback )
                        return null;
                    return function( target ) {
                        popup_callback( content_insertvideo(wysiwygeditor), target );
                    };
                case 'insertlink':
                    if( ! popup_callback )
                        return null;
                    return function( target ) {
                        popup_callback( content_insertlink(wysiwygeditor), target );
                    };
                case 'bold':
                    return function() {
                        wysiwygeditor.bold(); // .closePopup().collapseSelection()
                    };
                case 'italic':
                    return function() {
                        wysiwygeditor.italic(); // .closePopup().collapseSelection()
                    };
                case 'underline':
                    return function() {
                        wysiwygeditor.underline(); // .closePopup().collapseSelection()
                    };
                case 'strikethrough':
                    return function() {
                        wysiwygeditor.strikethrough(); // .closePopup().collapseSelection()
                    };
                case 'forecolor':
                    if( ! popup_callback )
                        return null;
                    return function( target ) {
                        popup_callback( content_colorpalette(wysiwygeditor,true), target );
                    };
                case 'highlight':
                    if( ! popup_callback )
                        return null;
                    return function( target ) {
                        popup_callback( content_colorpalette(wysiwygeditor,false), target );
                    };
                case 'alignleft':
                    return function() {
                        wysiwygeditor.align('left'); // .closePopup().collapseSelection()
                    };
                case 'aligncenter':
                    return function() {
                        wysiwygeditor.align('center'); // .closePopup().collapseSelection()
                    };
                case 'alignright':
                    return function() {
                        wysiwygeditor.align('right'); // .closePopup().collapseSelection()
                    };
                case 'alignjustify':
                    return function() {
                        wysiwygeditor.align('justify'); // .closePopup().collapseSelection()
                    };
                case 'subscript':
                    return function() {
                        wysiwygeditor.subscript(); // .closePopup().collapseSelection()
                    };
                case 'superscript':
                    return function() {
                        wysiwygeditor.superscript(); // .closePopup().collapseSelection()
                    };
                case 'indent':
                    return function() {
                        wysiwygeditor.indent(); // .closePopup().collapseSelection()
                    };
                case 'outdent':
                    return function() {
                        wysiwygeditor.indent(true); // .closePopup().collapseSelection()
                    };
                case 'orderedList':
                    return function() {
                        wysiwygeditor.insertList(true); // .closePopup().collapseSelection()
                    };
                case 'unorderedList':
                    return function() {
                        wysiwygeditor.insertList(); // .closePopup().collapseSelection()
                    };
                case 'removeformat':
                    return function() {
                        wysiwygeditor.removeFormat().closePopup().collapseSelection();
                    };
            }
            return null;
        }

        // Create the toolbar
        var toolbar_button = function( button ) {
            return $('<a/>').addClass( 'wysiwyg-toolbar-icon' )
                            .attr('href','#')
                            .attr('title', button.title)
                            .attr('unselectable','on')
                            .append(button.image);
        };
        var add_buttons_to_toolbar = function( $toolbar, selection, popup_open_callback, popup_position_callback )
        {
            $.each( toolbar_buttons, function(key, value) {
                if( ! value )
                    return ;
                // Skip buttons on the toolbar
                if( selection === false && 'showstatic' in value && ! value.showstatic )
                    return ;
                // Skip buttons on selection
                if( selection === true && 'showselection' in value && ! value.showselection )
                    return ;
                // Click handler
                var toolbar_handler;
                if( 'click' in value )
                    toolbar_handler = function( target ) {
                        value.click( $(target) );
                    };
                else if( 'popup' in value )
                    toolbar_handler = function( target ) {
                        var $popup = popup_open_callback();
                        var overwrite_offset = value.popup( $popup, $(target) );
                        popup_position_callback( $popup, target, overwrite_offset );
                    };
                else
                    toolbar_handler = get_toolbar_handler( key, function( $content, target ) {
                        var $popup = popup_open_callback();
                        $popup.append( $content );
                        popup_position_callback( $popup, target );
                        $popup.find('input[type=text]:first').focus();
                    });
                // Create the toolbar button
                var $button;
                if( toolbar_handler )
                    $button = toolbar_button( value ).click( function(event) {
                        toolbar_handler( event.currentTarget );
                        // Give the focus back to the editor. Technically not necessary
                        if( get_toolbar_handler(key) ) // only if not a popup-handler
                            wysiwygeditor.getElement().focus();
                        event.stopPropagation();
                        event.preventDefault();
                        return false;
                    });
                else if( value.html )
                    $button = $(value.html);
                if( $button )
                    $toolbar.append( $button );
            });
        };
        var popup_position = function( $popup, $container, left, top )  // left+top relative to $container
        {
            // Test parents
            var container_node = $container.get(0),
                offsetparent = container_node.offsetParent,
                offsetparent_offset = { left: 0, top: 0 },  //$.offset() does not work with Safari 3 and 'position:fixed'
                offsetparent_fixed = false,
                offsetparent_overflow = false,
                popup_width = $popup.width(),
                node = offsetparent;
            while( node )
            {
                offsetparent_offset.left += node.offsetLeft;
                offsetparent_offset.top += node.offsetTop;
                var $node = $(node);
                if( $node.css('position') == 'fixed' )
                    offsetparent_fixed = true;
                if( $node.css('overflow') != 'visible' )
                    offsetparent_overflow = true;
                node = node.offsetParent;
            }
            // Move $popup as high as possible in the DOM tree: offsetParent of $container
            var $offsetparent = $(offsetparent || document.body);
            $offsetparent.append( $popup );
            left += container_node.offsetLeft; // $container.position() does not work with Safari 3
            top += container_node.offsetTop;
            // Trim to offset-parent
            if( offsetparent_fixed || offsetparent_overflow )
            {
                if( left + popup_width > $offsetparent.width() - 1 )
                    left = $offsetparent.width() - popup_width - 1;
                if( left < 1 )
                    left = 1;
            }
            // Trim to viewport
            var viewport_width = $(window).width();
            if( offsetparent_offset.left + left + popup_width > viewport_width - 1 )
                left = viewport_width - offsetparent_offset.left - popup_width - 1;
            var scroll_left = offsetparent_fixed ? 0 : $(window).scrollLeft();
            if( offsetparent_offset.left + left < scroll_left + 1 )
                left = scroll_left - offsetparent_offset.left + 1;
            // Set offset
            $popup.css({ left: parseInt(left) + 'px',
                         top: parseInt(top) + 'px' });
        };


        // Transform the textarea to contenteditable
        var hotkeys = {},
            autocomplete = null;
        var create_wysiwyg = function( $textarea, $container, placeholder )
        {
            var handle_autocomplete = function( keypress, key, character, shiftKey, altKey, ctrlKey, metaKey )
            {
                if( ! on_autocomplete )
                    return ;
                var typed = autocomplete || '';
                switch( key )
                {
                    case  8: // backspace
                        typed = typed.substring( 0, typed.length - 1 );
                        // fall through
                    case 13: // enter
                    case 27: // escape
                    case 33: // pageUp
                    case 34: // pageDown
                    case 35: // end
                    case 36: // home
                    case 37: // left
                    case 38: // up
                    case 39: // right
                    case 40: // down
                        if( keypress )
                            return ;
                        character = false;
                        break;
                    default:
                        if( ! keypress )
                            return ;
                        typed += character;
                        break;
                }
                var rc = on_autocomplete( typed, key, character, shiftKey, altKey, ctrlKey, metaKey );
                if( typeof(rc) == 'object' && rc.length )
                {
                    // Show autocomplete
                    var $popup = $(wysiwygeditor.openPopup());
                    $popup.hide().addClass( 'wysiwyg-popup wysiwyg-popuphover' ) // show later
                          .empty().append( rc );
                    autocomplete = typed;
                }
                else
                {
                    // Hide autocomplete
                    wysiwygeditor.closePopup();
                    autocomplete = null;
                    return rc; // swallow key if 'false'
                }
            };

            // Options to wysiwyg.js
            var option = {
                element: $textarea.get(0),
                onKeyDown: function( key, character, shiftKey, altKey, ctrlKey, metaKey )
                    {
                        // Ask master
                        if( on_keydown && on_keydown(key, character, shiftKey, altKey, ctrlKey, metaKey) === false )
                            return false; // swallow key
                        // Exec hotkey (onkeydown because e.g. CTRL+B would oben the bookmarks)
                        if( character && !shiftKey && !altKey && ctrlKey && !metaKey )
                        {
                            var hotkey = character.toLowerCase();
                            if( ! hotkeys[hotkey] )
                                return ;
                            hotkeys[hotkey]();
                            return false; // prevent default
                        }
                        // Handle autocomplete
                        return handle_autocomplete( false, key, character, shiftKey, altKey, ctrlKey, metaKey );
                    },
                onKeyPress: function( key, character, shiftKey, altKey, ctrlKey, metaKey )
                    {
                        // Ask master
                        if( on_keypress && on_keypress(key, character, shiftKey, altKey, ctrlKey, metaKey) === false )
                            return false; // swallow key
                        // Handle autocomplete
                        return handle_autocomplete( true, key, character, shiftKey, altKey, ctrlKey, metaKey );
                    },
                onKeyUp: function( key, character, shiftKey, altKey, ctrlKey, metaKey )
                    {
                        // Ask master
                        if( on_keyup && on_keyup(key, character, shiftKey, altKey, ctrlKey, metaKey) === false )
                            return false; // swallow key
                    },
                onSelection: function( collapsed, rect, nodes, rightclick )
                    {
                        var show_popup = true,
                            $special_popup = null;
                        // Click on a link opens the link-popup
                        if( collapsed )
                            $.each( nodes, function(index, node) {
                                if( $(node).parents('a').length != 0 ) { // only clicks on text-nodes
                                    $special_popup = content_insertlink( wysiwygeditor, $(node).parents('a:first') )
                                    return false; // break
                                }
                            });
                        // Fix type error - https://github.com/wysiwygjs/wysiwyg.js/issues/4
                        if( ! rect )
                            show_popup = false;
                        // Force a special popup?
                        else if( $special_popup )
                            ;
                        // A right-click always opens the popup
                        else if( rightclick )
                            ;
                        // Autocomplete popup?
                        else if( autocomplete )
                            ;
                        // No selection-popup wanted?
                        else if( toolbar_position != 'selection' && toolbar_position != 'top-selection' && toolbar_position != 'bottom-selection' )
                            show_popup = false;
                        // Selected popup wanted, but nothing selected (=selection collapsed)
                        else if( collapsed )
                            show_popup = false;
                        // Only one image? Better: Display a special image-popup
                        else if( nodes.length == 1 && nodes[0].nodeName == 'IMG' ) // nodes is not a sparse array
                            show_popup = false;
                        if( ! show_popup )
                        {
                            wysiwygeditor.closePopup();
                            return ;
                        }
                        // Popup position
                        var $popup;
                        var apply_popup_position = function()
                        {
                            var popup_width = $popup.outerWidth();
                            // Point is the center of the selection - relative to $container not the element
                            var container_offset = $container.offset(),
                                editor_offset = $(wysiwygeditor.getElement()).offset();
                            var left = rect.left + parseInt(rect.width / 2) - parseInt(popup_width / 2) + editor_offset.left - container_offset.left;
                            var top = rect.top + rect.height + editor_offset.top - container_offset.top;
                            popup_position( $popup, $container, left, top );
                        };
                        // Open popup
                        $popup = $(wysiwygeditor.openPopup());
                        // if wrong popup -> close and open a new one
                        if( ! $popup.hasClass('wysiwyg-popuphover') || (!$popup.data('special')) != (!$special_popup) )
                            $popup = $(wysiwygeditor.closePopup().openPopup());
                        if( autocomplete )
                            $popup.show();
                        else if( ! $popup.hasClass('wysiwyg-popup') )
                        {
                            // add classes + buttons
                            $popup.addClass( 'wysiwyg-popup wysiwyg-popuphover' );
                            if( $special_popup )
                                $popup.empty().append( $special_popup ).data('special',true);
                            else
                                add_buttons_to_toolbar( $popup, true,
                                    function() {
                                        return $popup.empty();
                                    },
                                    apply_popup_position );
                        }
                        // Apply position
                        apply_popup_position();
                    },
                onClosepopup: function() {
                        autocomplete = null;
                    },
                hijackContextmenu: (toolbar_position == 'selection')
            };
            if( placeholder )
            {
                var $placeholder = $('<div/>').addClass( 'wysiwyg-placeholder' )
                                              .html( placeholder )
                                              .hide();
                $container.prepend( $placeholder );
                option.onPlaceholder = function( visible ) {
                    if( visible )
                        $placeholder.show();
                    else
                        $placeholder.hide();
                };
            }

            var wysiwygeditor = wysiwyg( option );
            return wysiwygeditor;
        }


        // Create a container
        var $container = $('<div/>').addClass('wysiwyg-container');
        if( classes )
            $container.addClass( classes );
        $textarea.wrap( $container );
        $container = $textarea.parent( '.wysiwyg-container' );

        // Create the editor-wrapper if placeholder
        var $wrapper = false;
        if( placeholder )
        {
            $wrapper = $('<div/>').addClass('wysiwyg-wrapper')
                                  .click(function(){     // Clicking the placeholder focus editor - fixes IE6-IE8
                                     wysiwygeditor.getElement().focus();
                                  });
            $textarea.wrap( $wrapper );
            $wrapper = $textarea.parent( '.wysiwyg-wrapper' );
        }

        // Create the WYSIWYG Editor
        var wysiwygeditor = create_wysiwyg( $textarea, placeholder ? $wrapper : $container, placeholder );
        if( wysiwygeditor.legacy )
        {
            var $textarea = $(wysiwygeditor.getElement());
            $textarea.addClass( 'wysiwyg-textarea' );
            if( $textarea.is(':visible') ) // inside the DOM
                $textarea.width( $container.width() - ($textarea.outerWidth() - $textarea.width()) );
        }
        else
            $(wysiwygeditor.getElement()).addClass( 'wysiwyg-editor' );

        // Hotkey+Commands-List
        var commands = {};
        $.each( toolbar_buttons, function(key, value) {
            if( ! value || ! value.hotkey )
                return ;
            var toolbar_handler = get_toolbar_handler( key );
            if( ! toolbar_handler )
                return ;
            hotkeys[value.hotkey.toLowerCase()] = toolbar_handler;
            commands[key] = toolbar_handler;
        });

        // Toolbar on top or bottom
        if( toolbar_position != 'selection' )
        {
            var toolbar_top = toolbar_position == 'top' || toolbar_position == 'top-selection';
            var $toolbar = $('<div/>').addClass( 'wysiwyg-toolbar' ).addClass( toolbar_top ? 'wysiwyg-toolbar-top' : 'wysiwyg-toolbar-bottom' );
            add_buttons_to_toolbar( $toolbar, false,
                function() {
                    // Open a popup from the toolbar
                    var $popup = $(wysiwygeditor.openPopup());
                    // if wrong popup -> create a new one
                    if( $popup.hasClass('wysiwyg-popup') && $popup.hasClass('wysiwyg-popuphover') )
                        $popup = $(wysiwygeditor.closePopup().openPopup());
                    if( ! $popup.hasClass('wysiwyg-popup') )
                        // add classes + content
                        $popup.addClass( 'wysiwyg-popup' );
                    return $popup;
                },
                function( $popup, target, overwrite_offset ) {
                    // Popup position
                    var $button = $(target);
                    var popup_width = $popup.outerWidth();
                    // Point is the top/bottom-center of the button
                    var left = $button.offset().left - $container.offset().left + parseInt($button.width() / 2) - parseInt(popup_width / 2);
                    var top = $button.offset().top - $container.offset().top;
                    if( toolbar_top )
                        top += $button.outerHeight();
                    else
                        top -= $popup.outerHeight();
                    if( overwrite_offset )
                    {
                        left = overwrite_offset.left;
                        top = overwrite_offset.top;
                    }
                    popup_position( $popup, $container, left, top );
                });
            if( toolbar_top )
                $container.prepend( $toolbar );
            else
                $container.append( $toolbar );
        }

        // Export userdata
        return {
            wysiwygeditor: wysiwygeditor,
            $container: $container
        };
    };

    // jQuery Interface
    $.fn.wysiwyg = function( option, param )
    {
        if( ! option || typeof(option) === 'object' )
        {
            option = $.extend( {}, option );
            return this.each(function() {
                var $that = $(this);
                // Already an editor
                if( $that.data( 'wysiwyg') )
                    return ;

                // Two modes: toolbar on top and on bottom
                var classes = option.classes,
                    placeholder = option.placeholder || $that.attr('placeholder'),
                    toolbar_position = (option.toolbar && (option.toolbar == 'top' || option.toolbar == 'top-selection' || option.toolbar == 'bottom' || option.toolbar == 'bottom-selection' || option.toolbar == 'selection')) ? option.toolbar : 'top-selection',
                    toolbar_buttons = option.buttons,
                    toolbar_submit = option.submit,
                    label_selectImage = option.selectImage,
                    placeholder_url = option.placeholderUrl || null,
                    placeholder_embed = option.placeholderEmbed || null,
                    max_imagesize = option.maxImageSize || null,
                    on_imageupload = option.onImageUpload || null,
                    force_imageupload = option.forceImageUpload && on_imageupload,
                    video_from_url = option.videoFromUrl || null,
                    on_keydown = option.onKeyDown || null,
                    on_keypress = option.onKeyPress || null,
                    on_keyup = option.onKeyUp || null,
                    on_autocomplete = option.onAutocomplete || null;

                // Create the WYSIWYG Editor
                var data = create_editor( $that, classes, placeholder, toolbar_position, toolbar_buttons, toolbar_submit, label_selectImage,
                                          placeholder_url, placeholder_embed, max_imagesize, on_imageupload, force_imageupload, video_from_url,
                                          on_keydown, on_keypress, on_keyup, on_autocomplete );
                $that.data( 'wysiwyg', data );
            });
        }
        else if( this.length == 1 )
        {
            var data = this.data('wysiwyg');
            if( ! data )
                return this;
            if( option == 'container' )
                return data.$container;
            if( option == 'shell' )
                return data.wysiwygeditor;
        }
        return this;
    };
})(window, document, jQuery);
;$(document).ready(function() {

    // Featured editor
    $('.cTextDiv').each( function(index, element)
    {
        $(element).wysiwyg({
            classes: 'some-more-classes',
            // 'selection'|'top'|'top-selection'|'bottom'|'bottom-selection'
            toolbar: 'top-selection',
            buttons: {
                // Dummy-HTML-Plugin
                // dummybutton1: index != 1 ? false : {
                //     html: $('<input class="submit" type="button" value="bold" />').click(function() {
                //                 // We simply make 'bold'
                //                 if( $(element).wysiwyg('shell').getSelectedHTML() )
                //                     $(element).wysiwyg('shell').bold();
                //                 else
                //                     alert( 'Please selection some text' );
                //             }),
                //     //showstatic: true,    // wanted on the toolbar
                //     showselection: false    // wanted on selection
                // },
                // Dummy-Button-Plugin
                // dummybutton2: index != 1 ? false : {
                //     title: 'Dummy',
                //     image: '\uf1e7',
                //     click: function( $button ) {
                //             alert('Do something');
                //            },
                //     //showstatic: true,    // wanted on the toolbar
                //     showselection: false    // wanted on selection
                // },
                // Smiley plugin
                smilies: {
                    title: 'Smilies',
                    image: '\uf118', // <img src="path/to/image.png" width="16" height="16" alt="" />
                    popup: function( $popup, $button ) {
                            var list_smilies = [
                                '<img src="/Media/smiley/1.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/2.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/3.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/4.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/5.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/6.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/7.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/8.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/9.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/10.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/11.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/12.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/13.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/14.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/15.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/16.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/17.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/18.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/19.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/20.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/21.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/22.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/23.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/24.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/25.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/26.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/27.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/28.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/29.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/30.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/31.gif" width="40" height="40" alt="" />',
                                '<img src="/Media/smiley/32.gif" width="40" height="40" alt="" />'
                            ];
                            var $smilies = $('<div/>').addClass('wysiwyg-plugin-smilies')
                                                      .attr('unselectable','on');
                            $.each( list_smilies, function(index,smiley) {
                                if( index != 0 )
                                    $smilies.append(' ');
                                var $image = $(smiley).attr('unselectable','on');
                                // Append smiley
                                var imagehtml = ' '+$('<div/>').append($image.clone()).html()+' ';
                                $image
                                    .css({ cursor: 'pointer' })
                                    .click(function(event) {
                                        $(element).wysiwyg('shell').insertHTML(imagehtml); // .closePopup(); - do not close the popup
                                    })
                                    .appendTo( $smilies );
                            });
                            var $container = $(element).wysiwyg('container');
                            $smilies.css({ maxWidth: parseInt($container.width()*0.95)+'px' });
                            $popup.append( $smilies );
                            // Smilies do not close on click, so force the popup-position to cover the toolbar
                            var $toolbar = $button.parents( '.wysiwyg-toolbar' );
                            if( ! $toolbar.length ) // selection toolbar?
                                return ;
                            return { // this prevents applying default position
                                left: parseInt( ($toolbar.outerWidth() - $popup.outerWidth()) / 2 ),
                                top: $toolbar.hasClass('wysiwyg-toolbar-bottom') ? ($container.outerHeight() - parseInt($button.outerHeight()/4)) : (parseInt($button.outerHeight()/4) - $popup.height())
                            };
                           },
                    //showstatic: true,    // wanted on the toolbar
                    showselection: index == 2 ? true : false    // wanted on selection
                },
                // insertimage: {
                //     title: 'Insert image',
                //     image: '\uf030', // <img src="path/to/image.png" width="16" height="16" alt="" />
                //     //showstatic: true,    // wanted on the toolbar
                //     showselection: index == 2 ? true : false    // wanted on selection
                // },
                // insertvideo: {
                //     title: 'Insert video',
                //     image: '\uf03d', // <img src="path/to/image.png" width="16" height="16" alt="" />
                //     //showstatic: true,    // wanted on the toolbar
                //     showselection: index == 2 ? true : false    // wanted on selection
                // },
                // insertlink: {
                //     title: 'Insert link',
                //     image: '\uf08e' // <img src="path/to/image.png" width="16" height="16" alt="" />
                // },
                // // Fontname plugin
                // fontname: index == 1 ? false : {
                //     title: 'Font',
                //     image: '\uf031', // <img src="path/to/image.png" width="16" height="16" alt="" />
                //     popup: function( $popup, $button ) {
                //             var list_fontnames = {
                //                     // Name : Font
                //                     'Arial, Helvetica' : 'Arial,Helvetica',
                //                     'Verdana'          : 'Verdana,Geneva',
                //                     'Georgia'          : 'Georgia',
                //                     'Courier New'      : 'Courier New,Courier',
                //                     'Times New Roman'  : 'Times New Roman,Times'
                //                 };
                //             var $list = $('<div/>').addClass('wysiwyg-plugin-list')
                //                                    .attr('unselectable','on');
                //             $.each( list_fontnames, function( name, font ) {
                //                 var $link = $('<a/>').attr('href','#')
                //                                     .css( 'font-family', font )
                //                                     .html( name )
                //                                     .click(function(event) {
                //                                         $(element).wysiwyg('shell').fontName(font).closePopup();
                //                                         // prevent link-href-#
                //                                         event.stopPropagation();
                //                                         event.preventDefault();
                //                                         return false;
                //                                     });
                //                 $list.append( $link );
                //             });
                //             $popup.append( $list );
                //            },
                //     //showstatic: true,    // wanted on the toolbar
                //     showselection: index == 0 ? true : false    // wanted on selection
                // },
                // Fontsize plugin
                // fontsize: index != 1 ? false : {
                //     title: 'Size',
                //     image: '\uf034', // <img src="path/to/image.png" width="16" height="16" alt="" />
                //     popup: function( $popup, $button ) {
                //             // Hack: http://stackoverflow.com/questions/5868295/document-execcommand-fontsize-in-pixels/5870603#5870603
                //             var list_fontsizes = [];
                //             for( var i=8; i <= 11; ++i )
                //                 list_fontsizes.push(i+'px');
                //             for( var i=12; i <= 28; i+=2 )
                //                 list_fontsizes.push(i+'px');
                //             list_fontsizes.push('36px');
                //             list_fontsizes.push('48px');
                //             list_fontsizes.push('72px');
                //             var $list = $('<div/>').addClass('wysiwyg-plugin-list')
                //                                    .attr('unselectable','on');
                //             $.each( list_fontsizes, function( index, size ) {
                //                 var $link = $('<a/>').attr('href','#')
                //                                     .html( size )
                //                                     .click(function(event) {
                //                                         $(element).wysiwyg('shell').fontSize(7).closePopup();
                //                                         $(element).wysiwyg('container')
                //                                                 .find('font[size=7]')
                //                                                 .removeAttr("size")
                //                                                 .css("font-size", size);
                //                                         // prevent link-href-#
                //                                         event.stopPropagation();
                //                                         event.preventDefault();
                //                                         return false;
                //                                     });
                //                 $list.append( $link );
                //             });
                //             $popup.append( $list );
                //            }
                //     //showstatic: true,    // wanted on the toolbar
                //     //showselection: true    // wanted on selection
                // },
                // // Header plugin
                // header: index != 1 ? false : {
                //     title: 'Header',
                //     image: '\uf1dc', // <img src="path/to/image.png" width="16" height="16" alt="" />
                //     popup: function( $popup, $button ) {
                //             var list_headers = {
                //                     // Name : Font
                //                     'Header 1' : '<h1>',
                //                     'Header 2' : '<h2>',
                //                     'Header 3' : '<h3>',
                //                     'Header 4' : '<h4>',
                //                     'Header 5' : '<h5>',
                //                     'Header 6' : '<h6>',
                //                     'Code'     : '<pre>'
                //                 };
                //             var $list = $('<div/>').addClass('wysiwyg-plugin-list')
                //                                    .attr('unselectable','on');
                //             $.each( list_headers, function( name, format ) {
                //                 var $link = $('<a/>').attr('href','#')
                //                                      .css( 'font-family', format )
                //                                      .html( name )
                //                                      .click(function(event) {
                //                                         $(element).wysiwyg('shell').format(format).closePopup();
                //                                         // prevent link-href-#
                //                                         event.stopPropagation();
                //                                         event.preventDefault();
                //                                         return false;
                //                                     });
                //                 $list.append( $link );
                //             });
                //             $popup.append( $list );
                //            }
                //     //showstatic: true,    // wanted on the toolbar
                //     //showselection: false    // wanted on selection
                // },
                bold: {
                    title: 'Bold (Ctrl+B)',
                    image: '\uf032', // <img src="path/to/image.png" width="16" height="16" alt="" />
                    hotkey: 'b'
                },
                italic: {
                    title: 'Italic (Ctrl+I)',
                    image: '\uf033', // <img src="path/to/image.png" width="16" height="16" alt="" />
                    hotkey: 'i'
                },
                // underline: {
                //     title: 'Underline (Ctrl+U)',
                //     image: '\uf0cd', // <img src="path/to/image.png" width="16" height="16" alt="" />
                //     hotkey: 'u'
                // },
                // strikethrough: {
                //     title: 'Strikethrough (Ctrl+S)',
                //     image: '\uf0cc', // <img src="path/to/image.png" width="16" height="16" alt="" />
                //     hotkey: 's'
                // },
                forecolor: {
                    title: 'Text color',
                    image: '\uf1fc' // <img src="path/to/image.png" width="16" height="16" alt="" />
                },
                //highlight: {
                //    title: 'Background color',
                //    image: '\uf043' // <img src="path/to/image.png" width="16" height="16" alt="" />
                //},
                // alignleft: index != 0 ? false : {
                //     title: 'Left',
                //     image: '\uf036', // <img src="path/to/image.png" width="16" height="16" alt="" />
                //     //showstatic: true,    // wanted on the toolbar
                //     showselection: false    // wanted on selection
                // },
                // aligncenter: index != 0 ? false : {
                //     title: 'Center',
                //     image: '\uf037', // <img src="path/to/image.png" width="16" height="16" alt="" />
                //     //showstatic: true,    // wanted on the toolbar
                //     showselection: false    // wanted on selection
                // },
                // alignright: index != 0 ? false : {
                //     title: 'Right',
                //     image: '\uf038', // <img src="path/to/image.png" width="16" height="16" alt="" />
                //     //showstatic: true,    // wanted on the toolbar
                //     showselection: false    // wanted on selection
                // },
                // alignjustify: index != 0 ? false : {
                //     title: 'Justify',
                //     image: '\uf039', // <img src="path/to/image.png" width="16" height="16" alt="" />
                //     //showstatic: true,    // wanted on the toolbar
                //     showselection: false    // wanted on selection
                // },
                // subscript: index == 1 ? false : {
                //     title: 'Subscript',
                //     image: '\uf12c', // <img src="path/to/image.png" width="16" height="16" alt="" />
                //     //showstatic: true,    // wanted on the toolbar
                //     showselection: true    // wanted on selection
                // },
                // superscript: index == 1 ? false : {
                //     title: 'Superscript',
                //     image: '\uf12b', // <img src="path/to/image.png" width="16" height="16" alt="" />
                //     //showstatic: true,    // wanted on the toolbar
                //     showselection: true    // wanted on selection
                // },
                // indent: index != 0 ? false : {
                //     title: 'Indent',
                //     image: '\uf03c', // <img src="path/to/image.png" width="16" height="16" alt="" />
                //     //showstatic: true,    // wanted on the toolbar
                //     showselection: false    // wanted on selection
                // },
                // outdent: index != 0 ? false : {
                //     title: 'Outdent',
                //     image: '\uf03b', // <img src="path/to/image.png" width="16" height="16" alt="" />
                //     //showstatic: true,    // wanted on the toolbar
                //     showselection: false    // wanted on selection
                // },
                // orderedList: index != 0 ? false : {
                //     title: 'Ordered list',
                //     image: '\uf0cb', // <img src="path/to/image.png" width="16" height="16" alt="" />
                //     //showstatic: true,    // wanted on the toolbar
                //     showselection: false    // wanted on selection
                // },
                // unorderedList: index != 0 ? false : {
                //     title: 'Unordered list',
                //     image: '\uf0ca', // <img src="path/to/image.png" width="16" height="16" alt="" />
                //     //showstatic: true,    // wanted on the toolbar
                //     showselection: false    // wanted on selection
                // },
                // removeformat: {
                //     title: 'Remove format',
                //     image: '\uf12d' // <img src="path/to/image.png" width="16" height="16" alt="" />
                // }
            },
            // Submit-Button
            submit: {
                title: 'Submit',
                image: '\uf00c' // <img src="path/to/image.png" width="16" height="16" alt="" />
            },
            // Other properties
            selectImage: 'Click or drop image',
            placeholderUrl: 'www.example.com',
            placeholderEmbed: '<embed/>',
            maxImageSize: [600,200],
            onKeyDown: function( key, character, shiftKey, altKey, ctrlKey, metaKey ) {
                            // E.g.: submit form on enter-key:
                            //if( (key == 10 || key == 13) && !shiftKey && !altKey && !ctrlKey && !metaKey ) {
                            //    submit_form();
                            //    return false; // swallow enter
                            //}
                        },
            onKeyPress: function( key, character, shiftKey, altKey, ctrlKey, metaKey ) {
                        },
            onKeyUp: function( key, character, shiftKey, altKey, ctrlKey, metaKey ) {
                        },
     //        onAutocomplete: function( typed, key, character, shiftKey, altKey, ctrlKey, metaKey ) {
     //                        if( typed.indexOf('@') == 0 ) // startswith '@'
     //                        {
     //                            var usernames = [
     //                                    'Evelyn',
     //                                    'Harry',
     //                                    'Amelia',
     //                                    'Oliver',
     //                                    'Isabelle',
     //                                    'Eddie',
     //                                    'Editha',
     //                                    'Jacob',
     //                                    'Emily',
     //                                    'George',
     //                                    'Edison'
     //                                ];
     //                            var $list = $('<div/>').addClass('wysiwyg-plugin-list')
     //                                                   .attr('unselectable','on');
     //                            $.each( usernames, function( index, username ) {
     //                                if( username.toLowerCase().indexOf(typed.substring(1).toLowerCase()) !== 0 ) // don't count first character '@'
     //                                    return;
     //                                var $link = $('<a/>').attr('href','#')
     //                                                    .text( username )
     //                                                    .click(function(event) {
     //                                                        var url = 'http://example.com/user/' + username,
     //                                                            html = '<a href="' + url + '">@' + username + '</a> ';
     //                                                        var editor = $(element).wysiwyg('shell');
     //                                                        // Expand selection and set inject HTML
     //                                                        editor.expandSelection( typed.length, 0 ).insertHTML( html );
     //                                                        editor.closePopup().getElement().focus();
     //                                                        // prevent link-href-#
     //                                                        event.stopPropagation();
     //                                                        event.preventDefault();
     //                                                        return false;
     //                                                    });
     //                                $list.append( $link );
     //                            });
     //                            if( $list.children().length )
     //                            {
     //                                if( key == 13 )
     //                                {
					// alert('46');
     //                                    $list.children(':first').click();
     //                                    return false; // swallow enter
     //                                }
     //                                // Show popup
     //                                else if( character || key == 8 )
     //                                    return $list;
     //                            }
     //                        }
     //                    },
            onImageUpload: function( insert_image ) {
                            // A bit tricky, because we can't easily upload a file via
                            // '$.ajax()' on a legacy browser without XMLHttpRequest2.
                            // You have to submit the form into an '<iframe/>' element.
                            // Call 'insert_image(url)' as soon as the file is online
                            // and the URL is available.
                            // Example server script (written in PHP):
                            /*
                            <?php
                            $upload = $_FILES['upload-filename'];
                            // Crucial: Forbid code files
                            $file_extension = pathinfo( $upload['name'], PATHINFO_EXTENSION );
                            if( $file_extension != 'jpeg' && $file_extension != 'jpg' && $file_extension != 'png' && $file_extension != 'gif' )
                                die("Wrong file extension.");
                            $filename = 'image-'.md5(microtime(true)).'.'.$file_extension;
                            $filepath = '/path/to/'.$filename;
                            $serverpath = 'http://domain.com/path/to/'.$filename;
                            move_uploaded_file( $upload['tmp_name'], $filepath );
                            echo $serverpath;
                            */
                            // Example client script (without upload-progressbar):
                            var iframe_name = 'legacy-uploader-' + Math.random().toString(36).substring(2);
                            $('<iframe>').attr('name',iframe_name)
                                         .load(function() {
                                            // <iframe> is ready - we will find the URL in the iframe-body
                                            var iframe = this;
                                            var iframedoc = iframe.contentDocument ? iframe.contentDocument :
                                                           (iframe.contentWindow ? iframe.contentWindow.document : iframe.document);
                                            var iframebody = iframedoc.getElementsByTagName('body')[0];
                                            var image_url = iframebody.innerHTML;
                                            insert_image( image_url );
                                            $(iframe).remove();
                                         })
                                         .appendTo(document.body);
                            var $input = $(this);
                            $input.attr('name','upload-filename')
                                  .parents('form')
                                  .attr('action','/script.php') // accessing cross domain <iframes> could be difficult
                                  .attr('method','POST')
                                  .attr('enctype','multipart/form-data')
                                  .attr('target',iframe_name)
                                  .submit();
                        },
            forceImageUpload: false,    // upload images even if File-API is present
            videoFromUrl: function( url ) {
                // Contributions are welcome :-)

                // youtube - http://stackoverflow.com/questions/3392993/php-regex-to-get-youtube-video-id
                var youtube_match = url.match( /^(?:http(?:s)?:\/\/)?(?:[a-z0-9.]+\.)?(?:youtu\.be|youtube\.com)\/(?:(?:watch)?\?(?:.*&)?v(?:i)?=|(?:embed|v|vi|user)\/)([^\?&\"'>]+)/ );
                if( youtube_match && youtube_match[1].length == 11 )
                    return '<iframe src="//www.youtube.com/embed/' + youtube_match[1] + '" width="640" height="360" frameborder="0" allowfullscreen></iframe>';

                // vimeo - http://embedresponsively.com/
                var vimeo_match = url.match( /^(?:http(?:s)?:\/\/)?(?:[a-z0-9.]+\.)?vimeo\.com\/([0-9]+)$/ );
                if( vimeo_match )
                    return '<iframe src="//player.vimeo.com/video/' + vimeo_match[1] + '" width="640" height="360" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';

                // dailymotion - http://embedresponsively.com/
                var dailymotion_match = url.match( /^(?:http(?:s)?:\/\/)?(?:[a-z0-9.]+\.)?dailymotion\.com\/video\/([0-9a-z]+)$/ );
                if( dailymotion_match )
                    return '<iframe src="//www.dailymotion.com/embed/video/' + dailymotion_match[1] + '" width="640" height="360" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';

                // undefined -> create '<video/>' tag
            }
        })
        .change(function() {
            if( typeof console != 'undefined' )
                ;//console.log( 'change' );
        })
        .focus(function() {
            if( typeof console != 'undefined' )
                ;//console.log( 'focus' );
        })
        .blur(function() {
            if( typeof console != 'undefined' )
                ;//console.log( 'blur' );
        });
    });


    var isNODE;

    function getCaretPosition(editableDiv) {
        var caretPos = 0,
            sel, range;
        if (window.getSelection) {
            sel = window.getSelection();
            if ( !! sel.anchorNode) {
                isNODE = sel.baseNode;
            }
            if (sel.rangeCount) {
                range = sel.getRangeAt(0);
                if (range.commonAncestorContainer.parentNode == editableDiv) {
                    caretPos = range.endOffset;
                }
            }
        } else if (document.selection && document.selection.createRange) {
            range = document.selection.createRange();
            if (range.parentElement() == editableDiv) {
                var tempEl = document.createElement("span");
                editableDiv.insertBefore(tempEl, editableDiv.firstChild);
                var tempRange = range.duplicate();
                tempRange.moveToElementText(tempEl);
                tempRange.setEndPoint("EndToEnd", range);
                caretPos = tempRange.html.length;
            }
        }
        return caretPos;
    }



    var pos;
    var n;


    function progres() {
        var progres;
        var send_koll = $('.send_koll .now_prog').html();
        var send_all = $(".send_koll .all_prog").html();
        progres = ((send_koll / send_all) * 100) + '%';
        $(".progres_line").css('width', progres);
    }

    if ($('.text_block_massege').length) {
        $(".text_block_massege").on('click', '.smile_but', function() {
            $(this).prev(".smile_block").stop().toggle(300);
        });

        $(".cTextDiv").on('blur', function() {
            var text_from = $(this).html();
            $(".text_block_massege textarea").val(text_from);
        });


        /*
        $(".but_for_send").on('click', '.send', function(event) {
            event.preventDefault();
            var man_live;
            var name;
            var pic;
            if ($('.cTextDiv').html().length > 0) {
                if ($(".man_live.main").length) {
                    man_live = 'man_live';
                    name = $(".man_live").find(".name").html();
                    pic = $(this).closest(".but_for_send").prev(".man_who_write").find(".img_man_w").find('img').attr('src');

                }
                if ($(".girl_live.main").length) {
                    man_live = 'girl_live';
                    name = $(".girl_live").find(".name").html();
                    pic = $(this).closest(".but_for_send").prev(".girl_who_write").find(".img_man_w").find('img').attr('src');
                }
                var p = $('.cTextDiv').html();
                for (var i = 0; i < 30; i++) {
                    p = p.split('&lt;').join('<');
                    p = p.split('&gt;').join('>');
                };
                $('.cTextDiv').html(p);
                var message = $(".cTextDiv").html();
                var translate = $(".translate_mess").html();
                $(".live_write").append('<li class="clearFix ' + man_live + '"><div class="fll"><div class="img_live"><img src="' + pic + '" alt=""></div><div class="name">' + name + '</div></div><div class="flr"><time datetime="21:08:56">21:08:56</time></div><div class="flc"><div class="message_main"><div class="message_in">' + message + '</div><div class="translator"><div class="message_trans">' + translate + '</div></div></div></div></li>');
                $(".cTextDiv").html('');
                if ($(".chat_main").find(".but_invite").hasClass('off')) {
                    $(".translator").addClass('off');
                } else {
                    $(".translator").removeClass('off');
                }
            } else {
                return false;
            }
            setTimeout(function() {
                var scrH = 0;
                scrH = $(this).closest('.live_chat_block').find('.live_write').height();
                $('.ms_bar').mCustomScrollbar("scrollTo", 'bottom');
            }, 100);
        });

        */
        $(".cTextDiv").keyup(function(event) {
            if (event.keyCode == 13 && event.shiftKey) {
		return false;
                
            } else if(event.keyCode == 13 && !event.shiftKey) {
		$(".message_block .send").click();
	    }
        });
    }


   


        
   /*

    if ($(".chat_invitation").length) {
        $(".chat_invitation").on('click', '.but_invite', function(event) {
            event.preventDefault();
            $(this).toggleClass('off');
            $(".but_invite_block").find("p").toggleClass('show');
        });
    }

    */

    if ($(".hide_block_mans").length) {
        $(".hide_block_mans").on('click', '.hide_block', function(event) {
            event.preventDefault();
            $(".wConteiner").find(".mans").stop().slideUp(500);
            $(".wConteiner").find(".girls").stop().slideUp(500);
            $(this).removeClass('show');
            $(this).next(".show_block").addClass('show');
            $(".hid_online").removeClass('cur');
        });
        $(".hide_block_mans").on('click', '.show_block', function(event) {
            event.preventDefault();
            $(".wConteiner").find(".mans").stop().slideDown(500);
            $(".wConteiner").find(".girls").stop().slideDown(500);
            $(this).removeClass('show');
            $(this).prev(".hide_block").addClass('show');
            $(".hid_online").addClass('cur');
        });
    }

    if ($('.controls').length) {
        $(".controls").on('click', '.hid_online', function() {
            if ($(this).hasClass('cur')) {
                $(this).removeClass('cur');
                $(".wConteiner").find(".mans").stop().slideUp(500);
                $(".wConteiner").find(".girls").stop().slideUp(500);
                $(".hide_block_mans").find(".hide_block").removeClass('show');
                $(".hide_block_mans").find(".show_block").addClass('show');
            } else {
                $(this).addClass('cur');
                $(".wConteiner").find(".mans").stop().slideDown(500);
                $(".wConteiner").find(".girls").stop().slideDown(500);
                $(".hide_block_mans").find(".hide_block").addClass('show');
                $(".hide_block_mans").find(".show_block").removeClass('show');
            }
        });

        /*
        $(".controls").on('click', '.play_online', function() {
            if ($(this).hasClass('cur')) {
                $(this).removeClass('cur');
                $(".video2")[0].pause();
            } else {
                $(this).addClass('cur');
                $(".video2")[0].play();
            }
        });

        

        $(".controls").on('click', '.mute_online', function() {
            if ($(this).hasClass('cur')) {
                $(this).removeClass('cur');
                $(".video2").prop('muted', true);
            } else {
                $(this).addClass('cur');
                $(".video2").prop('muted', false);
            }
        });
*/

        $(".controls").on('click', '.chat_online', function() {
            if ($(this).hasClass('cur')) {
                $(this).removeClass('cur');
                $(".chat_main").stop().slideUp(300);
            } else {
                $(this).addClass('cur');
                $(".chat_main").stop().slideDown(300);
            }
        });

        $(".open_controls").on('click', function() {
            $(".controls").stop().slideToggle(300);
        });
        $(".full_size_but").on('click', function() {
            $(this).toggleClass('act');
            $(this).closest(".video_online").toggleClass('full_screen');
        });
    }

    if ($(".hide_block_video").length) {
        $(".hide_block_video").on('click', '.hide_block', function(event) {
            event.preventDefault();
            $(".wConteiner").find(".video_block").stop().slideUp(300);
            $(this).removeClass('show');
            $(this).next(".show_block").addClass('show');
            $(".contact_list_ul").addClass("full_size");
            setTimeout(function() {
                $(".contact_list_ul").mCustomScrollbar("destroy");
                $(".contact_list_ul").mCustomScrollbar();
            }, 400);
        });
        $(".hide_block_video").on('click', '.show_block', function(event) {
            event.preventDefault();
            $(".wConteiner").find(".video_block").stop().slideDown(300);
            $(this).removeClass('show');
            $(this).prev(".hide_block").addClass('show');
            $(".contact_list_ul").removeClass("full_size");
            setTimeout(function() {
                $(".contact_list_ul").mCustomScrollbar("destroy");
                $(".contact_list_ul").mCustomScrollbar();
            }, 400);
        });
    }

    if ($(".video_video").length) {
        $(".video_video").on('click', '.prevue_v', function() {
            $(this).closest(".video_video").find('video')[0].play();
            $(this).addClass('hide');
        });
    }

    var item_pop;


  /*

    $('.delivery_pop').magnificPopup({
        type: 'inline',
        midClick: true,
        removalDelay: 300,
        mainClass: 'zoom-in'
    });

    $('.invite_to_chat').magnificPopup({
        type: 'inline',
        midClick: true,
        removalDelay: 300,
        mainClass: 'zoom-in'
    });

    $('.delete').magnificPopup({
        type: 'inline',
        midClick: true,
        removalDelay: 300,
        mainClass: 'zoom-in',
        callbacks: {
            elementParse: function(item) {
                item_pop = item.el.get(0);
            }
        }
    });

    $('.delete2').magnificPopup({
        type: 'inline',
        midClick: true,
        removalDelay: 300,
        mainClass: 'zoom-in',
        callbacks: {
            elementParse: function(item) {
                item_pop = item.el.get(0);
            }
        }
    });

    if($(".delete").length) {
        $(document).on('click', '#delete_pop .wButton', function(event){
            event.preventDefault();        
                if($(this).hasClass('delete_men')){
                    $(item_pop).closest("li").remove();
                }
            $.magnificPopup.close();
        });
    }

    if($(".delete2").length) {
        $(document).on('click', '#delete_pop2 .wButton', function(event){
            event.preventDefault();
                if($(this).hasClass('delete_men')){
                    $(item_pop).prev('.contact_list_ul').find("li").remove();
                }
            $.magnificPopup.close();
        });
    }

*/

    if ($(".hid_menu").length) {
        $('.hid_menu').on('click', '.show_menu', function() {
            $(".hid_menu").toggleClass('show');
        });
    }



    if ($(".restart").length) {
        $(".restart").on('click', function(event) {
            event.preventDefault();
            var x = $(this);
            $(this).addClass('rotate');
            setTimeout(function() {
                x.removeClass('rotate');
            }, 300);
        });
    }

    if ($(".video_mute").length) {
        $(".video_mute").on('click', function(event) {
            event.preventDefault();
            $(this).toggleClass('voice');
            $('.video_video .controls').toggleClass('show');
        });
    }

    


    if($(".play_onlines").length) {
        $(".play_online").on('click', function(){
            $('.video_online').toggleClass('hide_chat_window');
        });
    }


    $(window).resize(function() {
        if ($(window).width() > 1300) {
            $(".controls").addClass('show');
        } else {
            $(".controls").removeClass('show');
        }
    });

    $(window).load(function() {


       

        progres();

        $(".mans_online").mCustomScrollbar();
        $(".contact_list_ul").mCustomScrollbar();
        $(".ms_bar").mCustomScrollbar();

        setTimeout(function() {
            $(".icon_block").find('.man_online').addClass('show');
            $(".icon_block").find('.man_online_ignore').addClass('show');
        }, 0);

       




        if($(".video_online").length) {
            $('.video_online').addClass('hide_chat_window');
        }


        if($('.preloader').length){
            $('.preloader').addClass('hide');
            
        }

    });



        $(".message_up_block").on('click', '.close_hid', function(event){
            event.preventDefault();
            $(this).closest(".message_girl").remove();
        });
        $(document).find('.hid_but').on('click',function(event){
            event.preventDefault();
            
            $(this).closest(".message_girl").toggleClass('hidden_hid');
        });
        



   var favorite = function(action, id, it) {
        var type = 'user';
        if(it.hasClass('favouriteVideoLink')) {
            type = 'video';
        } else if(it.hasClass('favouriteImageLink')) {
            type = 'image';
        }

        $.ajax({
            url: '/ajax/favorite',
            type: 'POST',
            dataType: 'JSON',
            data: {
                action: action,
                id: id,
                type: type
            },
            success: function(data){
                if(!data.success) {
                    generate(data.response, 'warning');
                } else if(it.hasClass('favouriteLink')) {
                    it.closest(".favor_change").find("a").addClass("show");
                    it.removeClass('show');
                } else if(it.hasClass('favorite')) {
                    if(it.hasClass('inFavourite')) {
                        $('.servise ul[data-id="' + id + '"] a.favorite').removeClass('inFavourite');
                    } else {
                        $('.servise ul[data-id="' + id + '"] a.favorite').addClass('inFavourite');
                    }
                } else if(it.hasClass('searchList')) {
                    if(it.hasClass('add_f')) {
                        it.removeClass('add_f');
                    } else {
                        it.addClass('add_f');
                    }
                }
            }
        });
    };



    $('body').on('click', '.servise a.favorite', function(e){
        e.preventDefault();
        if(!$(this).hasClass('favouriteListItem')) {
            var it = $(this);
            var action = 'remove';
            if(!$(this).hasClass('inFavourite')) {
                action = 'add';
            }
            favorite(action, it.closest('ul').data('id'), it);
        }
    });






});





;/*
== malihu jquery custom scrollbar plugin == 
Version: 3.0.6 
Plugin URI: http://manos.malihu.gr/jquery-custom-content-scroller 
Author: malihu
Author URI: http://manos.malihu.gr
License: MIT License (MIT)
*/

/*
Copyright 2010 Manos Malihutsakis (email: manos@malihu.gr)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

/*
The code below is fairly long, fully commented and should be normally used in development. 
For production, use either the minified jquery.mCustomScrollbar.min.js script or 
the production-ready jquery.mCustomScrollbar.concat.min.js which contains the plugin 
and dependencies (minified). 
*/

;(function($,window,document){

(function(init){
	var _rjs=typeof define==="function" && define.amd, /* RequireJS */
		_dlp=("https:"==document.location.protocol) ? "https:" : "http:", /* location protocol */
		_url="cdnjs.cloudflare.com/ajax/libs/jquery-mousewheel/3.1.12/jquery.mousewheel.min.js";
	if(!_rjs){
		/* load jquery-mousewheel plugin (via CDN) if it's not present or not loaded via RequireJS 
		(works when mCustomScrollbar fn is called on window load) */
		$.event.special.mousewheel || $("head").append(decodeURI("%3Cscript src="+_dlp+"//"+_url+"%3E%3C/script%3E"));
	}
	init();
}(function(){
	
	/* 
	----------------------------------------
	PLUGIN NAMESPACE, PREFIX, DEFAULT SELECTOR(S) 
	----------------------------------------
	*/
	
	var pluginNS="mCustomScrollbar",
		pluginPfx="mCS",
		defaultSelector=".mCustomScrollbar",
	
	
		
	
	
	/* 
	----------------------------------------
	DEFAULT OPTIONS 
	----------------------------------------
	*/
	
		defaults={
			/*
			set element/content width/height programmatically 
			values: boolean, pixels, percentage 
				option						default
				-------------------------------------
				setWidth					false
				setHeight					false
			*/
			/*
			set the initial css top property of content  
			values: string (e.g. "-100px", "10%" etc.)
			*/
			setTop:0,
			/*
			set the initial css left property of content  
			values: string (e.g. "-100px", "10%" etc.)
			*/
			setLeft:0,
			/* 
			scrollbar axis (vertical and/or horizontal scrollbars) 
			values (string): "y", "x", "yx"
			*/
			axis:"y",
			/*
			position of scrollbar relative to content  
			values (string): "inside", "outside" ("outside" requires elements with position:relative)
			*/
			scrollbarPosition:"inside",
			/*
			scrolling inertia
			values: integer (milliseconds)
			*/
			scrollInertia:950,
			/* 
			auto-adjust scrollbar dragger length
			values: boolean
			*/
			autoDraggerLength:true,
			/*
			auto-hide scrollbar when idle 
			values: boolean
				option						default
				-------------------------------------
				autoHideScrollbar			false
			*/
			/*
			auto-expands scrollbar on mouse-over and dragging
			values: boolean
				option						default
				-------------------------------------
				autoExpandScrollbar			false
			*/
			/*
			always show scrollbar, even when there's nothing to scroll 
			values: integer (0=disable, 1=always show dragger rail, 2=always show dragger rail, dragger and buttons), boolean
			*/
			alwaysShowScrollbar:0,
			/*
			scrolling always snaps to a multiple of this number in pixels
			values: integer
				option						default
				-------------------------------------
				snapAmount					null
			*/
			/*
			when snapping, snap with this number in pixels as an offset 
			values: integer
			*/
			snapOffset:0,
			/* 
			mouse-wheel scrolling
			*/
			mouseWheel:{
				/* 
				enable mouse-wheel scrolling
				values: boolean
				*/
				enable:true,
				/* 
				scrolling amount in pixels
				values: "auto", integer 
				*/
				scrollAmount:"auto",
				/* 
				mouse-wheel scrolling axis 
				the default scrolling direction when both vertical and horizontal scrollbars are present 
				values (string): "y", "x" 
				*/
				axis:"y",
				/* 
				prevent the default behaviour which automatically scrolls the parent element(s) when end of scrolling is reached 
				values: boolean
					option						default
					-------------------------------------
					preventDefault				null
				*/
				/*
				the reported mouse-wheel delta value. The number of lines (translated to pixels) one wheel notch scrolls.  
				values: "auto", integer 
				"auto" uses the default OS/browser value 
				*/
				deltaFactor:"auto",
				/*
				normalize mouse-wheel delta to -1 or 1 (disables mouse-wheel acceleration) 
				values: boolean
					option						default
					-------------------------------------
					normalizeDelta				null
				*/
				/*
				invert mouse-wheel scrolling direction 
				values: boolean
					option						default
					-------------------------------------
					invert						null
				*/
				/*
				the tags that disable mouse-wheel when cursor is over them
				*/
				disableOver:["select","option","keygen","datalist","textarea"]
			},
			/* 
			scrollbar buttons
			*/
			scrollButtons:{ 
				/*
				enable scrollbar buttons
				values: boolean
					option						default
					-------------------------------------
					enable						null
				*/
				/*
				scrollbar buttons scrolling type 
				values (string): "stepless", "stepped"
				*/
				scrollType:"stepless",
				/*
				scrolling amount in pixels
				values: "auto", integer 
				*/
				scrollAmount:"auto"
				/*
				tabindex of the scrollbar buttons
				values: false, integer
					option						default
					-------------------------------------
					tabindex					null
				*/
			},
			/* 
			keyboard scrolling
			*/
			keyboard:{ 
				/*
				enable scrolling via keyboard
				values: boolean
				*/
				enable:true,
				/*
				keyboard scrolling type 
				values (string): "stepless", "stepped"
				*/
				scrollType:"stepless",
				/*
				scrolling amount in pixels
				values: "auto", integer 
				*/
				scrollAmount:"auto"
			},
			/*
			enable content touch-swipe scrolling 
			values: boolean, integer, string (number)
			integer values define the axis-specific minimum amount required for scrolling momentum
			*/
			contentTouchScroll:25,
			/*
			advanced option parameters
			*/
			advanced:{
				/*
				auto-expand content horizontally (for "x" or "yx" axis) 
				values: boolean
					option						default
					-------------------------------------
					autoExpandHorizontalScroll	null
				*/
				/*
				auto-scroll to elements with focus
				*/
				autoScrollOnFocus:"input,textarea,select,button,datalist,keygen,a[tabindex],area,object,[contenteditable='true']",
				/*
				auto-update scrollbars on content, element or viewport resize 
				should be true for fluid layouts/elements, adding/removing content dynamically, hiding/showing elements, content with images etc. 
				values: boolean
				*/
				updateOnContentResize:true,
				/*
				auto-update scrollbars each time each image inside the element is fully loaded 
				values: boolean
				*/
				updateOnImageLoad:true
				/*
				auto-update scrollbars based on the amount and size changes of specific selectors 
				useful when you need to update the scrollbar(s) automatically, each time a type of element is added, removed or changes its size 
				values: boolean, string (e.g. "ul li" will auto-update scrollbars each time list-items inside the element are changed) 
				a value of true (boolean) will auto-update scrollbars each time any element is changed
					option						default
					-------------------------------------
					updateOnSelectorChange		null
				*/
				/*
				extra selectors that'll release scrollbar dragging upon mouseup, pointerup, touchend etc. (e.g. "selector-1, selector-2")
					option						default
					-------------------------------------
					releaseDraggableSelectors	null
				*/
			},
			/* 
			scrollbar theme 
			values: string (see CSS/plugin URI for a list of ready-to-use themes)
			*/
			theme:"light",
			/*
			user defined callback functions
			*/
			callbacks:{
				/*
				Available callbacks: 
					callback					default
					-------------------------------------
					onInit						null
					onScrollStart				null
					onScroll					null
					onTotalScroll				null
					onTotalScrollBack			null
					whileScrolling				null
					onTotalScrollOffset			0
					onTotalScrollBackOffset		0
					alwaysTriggerOffsets		true
					onOverflowY					null
					onOverflowX					null
					onOverflowYNone				null
					onOverflowXNone				null
					onImageLoad					null
					onSelectorChange			null
					onUpdate					null
				*/
				onTotalScrollOffset:0,
				onTotalScrollBackOffset:0,
				alwaysTriggerOffsets:true
			}
			/*
			add scrollbar(s) on all elements matching the current selector, now and in the future 
			values: boolean, string 
			string values: "on" (enable), "once" (disable after first invocation), "off" (disable)
			liveSelector values: string (selector)
				option						default
				-------------------------------------
				live						false
				liveSelector				null
			*/
		},
	
	
	
	
	
	/* 
	----------------------------------------
	VARS, CONSTANTS 
	----------------------------------------
	*/
	
		totalInstances=0, /* plugin instances amount */
		liveTimers={}, /* live option timers */
		oldIE=(window.attachEvent && !window.addEventListener) ? 1 : 0, /* detect IE < 9 */
		touchActive=false, /* global touch state (for touch and pointer events) */
		/* general plugin classes */
		classes=[
			"mCSB_dragger_onDrag","mCSB_scrollTools_onDrag","mCS_img_loaded","mCS_disabled","mCS_destroyed","mCS_no_scrollbar",
			"mCS-autoHide","mCS-dir-rtl","mCS_no_scrollbar_y","mCS_no_scrollbar_x","mCS_y_hidden","mCS_x_hidden","mCSB_draggerContainer",
			"mCSB_buttonUp","mCSB_buttonDown","mCSB_buttonLeft","mCSB_buttonRight"
		],
		
	
	
	
	
	/* 
	----------------------------------------
	METHODS 
	----------------------------------------
	*/
	
		methods={
			
			/* 
			plugin initialization method 
			creates the scrollbar(s), plugin data object and options
			----------------------------------------
			*/
			
			init:function(options){
				
				var options=$.extend(true,{},defaults,options),
					selector=_selector.call(this); /* validate selector */
				
				/* 
				if live option is enabled, monitor for elements matching the current selector and 
				apply scrollbar(s) when found (now and in the future) 
				*/
				if(options.live){
					var liveSelector=options.liveSelector || this.selector || defaultSelector, /* live selector(s) */
						$liveSelector=$(liveSelector); /* live selector(s) as jquery object */
					if(options.live==="off"){
						/* 
						disable live if requested 
						usage: $(selector).mCustomScrollbar({live:"off"}); 
						*/
						removeLiveTimers(liveSelector);
						return;
					}
					liveTimers[liveSelector]=setTimeout(function(){
						/* call mCustomScrollbar fn on live selector(s) every half-second */
						$liveSelector.mCustomScrollbar(options);
						if(options.live==="once" && $liveSelector.length){
							/* disable live after first invocation */
							removeLiveTimers(liveSelector);
						}
					},500);
				}else{
					removeLiveTimers(liveSelector);
				}
				
				/* options backward compatibility (for versions < 3.0.0) and normalization */
				options.setWidth=(options.set_width) ? options.set_width : options.setWidth;
				options.setHeight=(options.set_height) ? options.set_height : options.setHeight;
				options.axis=(options.horizontalScroll) ? "x" : _findAxis(options.axis);
				options.scrollInertia=options.scrollInertia>0 && options.scrollInertia<17 ? 17 : options.scrollInertia;
				if(typeof options.mouseWheel!=="object" &&  options.mouseWheel==true){ /* old school mouseWheel option (non-object) */
					options.mouseWheel={enable:true,scrollAmount:"auto",axis:"y",preventDefault:false,deltaFactor:"auto",normalizeDelta:false,invert:false}
				}
				options.mouseWheel.scrollAmount=!options.mouseWheelPixels ? options.mouseWheel.scrollAmount : options.mouseWheelPixels;
				options.mouseWheel.normalizeDelta=!options.advanced.normalizeMouseWheelDelta ? options.mouseWheel.normalizeDelta : options.advanced.normalizeMouseWheelDelta;
				options.scrollButtons.scrollType=_findScrollButtonsType(options.scrollButtons.scrollType); 
				
				_theme(options); /* theme-specific options */
				
				/* plugin constructor */
				return $(selector).each(function(){
					
					var $this=$(this);
					
					if(!$this.data(pluginPfx)){ /* prevent multiple instantiations */
					
						/* store options and create objects in jquery data */
						$this.data(pluginPfx,{
							idx:++totalInstances, /* instance index */
							opt:options, /* options */
							scrollRatio:{y:null,x:null}, /* scrollbar to content ratio */
							overflowed:null, /* overflowed axis */
							contentReset:{y:null,x:null}, /* object to check when content resets */
							bindEvents:false, /* object to check if events are bound */
							tweenRunning:false, /* object to check if tween is running */
							sequential:{}, /* sequential scrolling object */
							langDir:$this.css("direction"), /* detect/store direction (ltr or rtl) */
							cbOffsets:null, /* object to check whether callback offsets always trigger */
							/* 
							object to check how scrolling events where last triggered 
							"internal" (default - triggered by this script), "external" (triggered by other scripts, e.g. via scrollTo method) 
							usage: object.data("mCS").trigger
							*/
							trigger:null
						});
						
						var d=$this.data(pluginPfx),o=d.opt,
							/* HTML data attributes */
							htmlDataAxis=$this.data("mcs-axis"),htmlDataSbPos=$this.data("mcs-scrollbar-position"),htmlDataTheme=$this.data("mcs-theme");
						 
						if(htmlDataAxis){o.axis=htmlDataAxis;} /* usage example: data-mcs-axis="y" */
						if(htmlDataSbPos){o.scrollbarPosition=htmlDataSbPos;} /* usage example: data-mcs-scrollbar-position="outside" */
						if(htmlDataTheme){ /* usage example: data-mcs-theme="minimal" */
							o.theme=htmlDataTheme;
							_theme(o); /* theme-specific options */
						}
						
						_pluginMarkup.call(this); /* add plugin markup */
						
						$("#mCSB_"+d.idx+"_container img:not(."+classes[2]+")").addClass(classes[2]); /* flag loaded images */
						
						methods.update.call(null,$this); /* call the update method */
					
					}
					
				});
				
			},
			/* ---------------------------------------- */
			
			
			
			/* 
			plugin update method 
			updates content and scrollbar(s) values, events and status 
			----------------------------------------
			usage: $(selector).mCustomScrollbar("update");
			*/
			
			update:function(el,cb){
				
				var selector=el || _selector.call(this); /* validate selector */
				
				return $(selector).each(function(){
					
					var $this=$(this);
					
					if($this.data(pluginPfx)){ /* check if plugin has initialized */
						
						var d=$this.data(pluginPfx),o=d.opt,
							mCSB_container=$("#mCSB_"+d.idx+"_container"),
							mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")];
						
						if(!mCSB_container.length){return;}
						
						if(d.tweenRunning){_stop($this);} /* stop any running tweens while updating */
						
						/* if element was disabled or destroyed, remove class(es) */
						if($this.hasClass(classes[3])){$this.removeClass(classes[3]);}
						if($this.hasClass(classes[4])){$this.removeClass(classes[4]);}
						
						_maxHeight.call(this); /* detect/set css max-height value */
						
						_expandContentHorizontally.call(this); /* expand content horizontally */
						
						if(o.axis!=="y" && !o.advanced.autoExpandHorizontalScroll){
							mCSB_container.css("width",_contentWidth(mCSB_container.children()));
						}
						
						d.overflowed=_overflowed.call(this); /* determine if scrolling is required */
						
						_scrollbarVisibility.call(this); /* show/hide scrollbar(s) */
						
						/* auto-adjust scrollbar dragger length analogous to content */
						if(o.autoDraggerLength){_setDraggerLength.call(this);}
						
						_scrollRatio.call(this); /* calculate and store scrollbar to content ratio */
						
						_bindEvents.call(this); /* bind scrollbar events */
						
						/* reset scrolling position and/or events */
						var to=[Math.abs(mCSB_container[0].offsetTop),Math.abs(mCSB_container[0].offsetLeft)];
						if(o.axis!=="x"){ /* y/yx axis */
							if(!d.overflowed[0]){ /* y scrolling is not required */
								_resetContentPosition.call(this); /* reset content position */
								if(o.axis==="y"){
									_unbindEvents.call(this);
								}else if(o.axis==="yx" && d.overflowed[1]){
									_scrollTo($this,to[1].toString(),{dir:"x",dur:0,overwrite:"none"});
								}
							}else if(mCSB_dragger[0].height()>mCSB_dragger[0].parent().height()){
								_resetContentPosition.call(this); /* reset content position */
							}else{ /* y scrolling is required */
								_scrollTo($this,to[0].toString(),{dir:"y",dur:0,overwrite:"none"});
								d.contentReset.y=null;
							}
						}
						if(o.axis!=="y"){ /* x/yx axis */
							if(!d.overflowed[1]){ /* x scrolling is not required */
								_resetContentPosition.call(this); /* reset content position */
								if(o.axis==="x"){
									_unbindEvents.call(this);
								}else if(o.axis==="yx" && d.overflowed[0]){
									_scrollTo($this,to[0].toString(),{dir:"y",dur:0,overwrite:"none"});
								}
							}else if(mCSB_dragger[1].width()>mCSB_dragger[1].parent().width()){
								_resetContentPosition.call(this); /* reset content position */
							}else{ /* x scrolling is required */
								_scrollTo($this,to[1].toString(),{dir:"x",dur:0,overwrite:"none"});
								d.contentReset.x=null;
							}
						}
						
						/* callbacks: onImageLoad, onSelectorChange, onUpdate */
						if(cb && d){
							if(cb===2 && o.callbacks.onImageLoad && typeof o.callbacks.onImageLoad==="function"){
								o.callbacks.onImageLoad.call(this);
							}else if(cb===3 && o.callbacks.onSelectorChange && typeof o.callbacks.onSelectorChange==="function"){
								o.callbacks.onSelectorChange.call(this);
							}else if(o.callbacks.onUpdate && typeof o.callbacks.onUpdate==="function"){
								o.callbacks.onUpdate.call(this);
							}
						}
						
						_autoUpdate.call(this); /* initialize automatic updating (for dynamic content, fluid layouts etc.) */
						
					}
					
				});
				
			},
			/* ---------------------------------------- */
			
			
			
			/* 
			plugin scrollTo method 
			triggers a scrolling event to a specific value
			----------------------------------------
			usage: $(selector).mCustomScrollbar("scrollTo",value,options);
			*/
		
			scrollTo:function(val,options){
				
				/* prevent silly things like $(selector).mCustomScrollbar("scrollTo",undefined); */
				if(typeof val=="undefined" || val==null){return;}
				
				var selector=_selector.call(this); /* validate selector */
				
				return $(selector).each(function(){
					
					var $this=$(this);
					
					if($this.data(pluginPfx)){ /* check if plugin has initialized */
					
						var d=$this.data(pluginPfx),o=d.opt,
							/* method default options */
							methodDefaults={
								trigger:"external", /* method is by default triggered externally (e.g. from other scripts) */
								scrollInertia:o.scrollInertia, /* scrolling inertia (animation duration) */
								scrollEasing:"mcsEaseInOut", /* animation easing */
								moveDragger:false, /* move dragger instead of content */
								timeout:60, /* scroll-to delay */
								callbacks:true, /* enable/disable callbacks */
								onStart:true,
								onUpdate:true,
								onComplete:true
							},
							methodOptions=$.extend(true,{},methodDefaults,options),
							to=_arr.call(this,val),dur=methodOptions.scrollInertia>0 && methodOptions.scrollInertia<17 ? 17 : methodOptions.scrollInertia;
						
						/* translate yx values to actual scroll-to positions */
						to[0]=_to.call(this,to[0],"y");
						to[1]=_to.call(this,to[1],"x");
						
						/* 
						check if scroll-to value moves the dragger instead of content. 
						Only pixel values apply on dragger (e.g. 100, "100px", "-=100" etc.) 
						*/
						if(methodOptions.moveDragger){
							to[0]*=d.scrollRatio.y;
							to[1]*=d.scrollRatio.x;
						}
						
						methodOptions.dur=dur;
						
						setTimeout(function(){ 
							/* do the scrolling */
							if(to[0]!==null && typeof to[0]!=="undefined" && o.axis!=="x" && d.overflowed[0]){ /* scroll y */
								methodOptions.dir="y";
								methodOptions.overwrite="all";
								_scrollTo($this,to[0].toString(),methodOptions);
							}
							if(to[1]!==null && typeof to[1]!=="undefined" && o.axis!=="y" && d.overflowed[1]){ /* scroll x */
								methodOptions.dir="x";
								methodOptions.overwrite="none";
								_scrollTo($this,to[1].toString(),methodOptions);
							}
						},methodOptions.timeout);
						
					}
					
				});
				
			},
			/* ---------------------------------------- */
			
			
			
			/*
			plugin stop method 
			stops scrolling animation
			----------------------------------------
			usage: $(selector).mCustomScrollbar("stop");
			*/
			stop:function(){
				
				var selector=_selector.call(this); /* validate selector */
				
				return $(selector).each(function(){
					
					var $this=$(this);
					
					if($this.data(pluginPfx)){ /* check if plugin has initialized */
										
						_stop($this);
					
					}
					
				});
				
			},
			/* ---------------------------------------- */
			
			
			
			/*
			plugin disable method 
			temporarily disables the scrollbar(s) 
			----------------------------------------
			usage: $(selector).mCustomScrollbar("disable",reset); 
			reset (boolean): resets content position to 0 
			*/
			disable:function(r){
				
				var selector=_selector.call(this); /* validate selector */
				
				return $(selector).each(function(){
					
					var $this=$(this);
					
					if($this.data(pluginPfx)){ /* check if plugin has initialized */
						
						var d=$this.data(pluginPfx);
						
						_autoUpdate.call(this,"remove"); /* remove automatic updating */
						
						_unbindEvents.call(this); /* unbind events */
						
						if(r){_resetContentPosition.call(this);} /* reset content position */
						
						_scrollbarVisibility.call(this,true); /* show/hide scrollbar(s) */
						
						$this.addClass(classes[3]); /* add disable class */
					
					}
					
				});
				
			},
			/* ---------------------------------------- */
			
			
			
			/*
			plugin destroy method 
			completely removes the scrollbar(s) and returns the element to its original state
			----------------------------------------
			usage: $(selector).mCustomScrollbar("destroy"); 
			*/
			destroy:function(){
				
				var selector=_selector.call(this); /* validate selector */
				
				return $(selector).each(function(){
					
					var $this=$(this);
					
					if($this.data(pluginPfx)){ /* check if plugin has initialized */
					
						var d=$this.data(pluginPfx),o=d.opt,
							mCustomScrollBox=$("#mCSB_"+d.idx),
							mCSB_container=$("#mCSB_"+d.idx+"_container"),
							scrollbar=$(".mCSB_"+d.idx+"_scrollbar");
					
						if(o.live){removeLiveTimers(o.liveSelector || $(selector).selector);} /* remove live timers */
						
						_autoUpdate.call(this,"remove"); /* remove automatic updating */
						
						_unbindEvents.call(this); /* unbind events */
						
						_resetContentPosition.call(this); /* reset content position */
						
						$this.removeData(pluginPfx); /* remove plugin data object */
						
						_delete(this,"mcs"); /* delete callbacks object */
						
						/* remove plugin markup */
						scrollbar.remove(); /* remove scrollbar(s) first (those can be either inside or outside plugin's inner wrapper) */
						mCSB_container.find("img."+classes[2]).removeClass(classes[2]); /* remove loaded images flag */
						mCustomScrollBox.replaceWith(mCSB_container.contents()); /* replace plugin's inner wrapper with the original content */
						/* remove plugin classes from the element and add destroy class */
						$this.removeClass(pluginNS+" _"+pluginPfx+"_"+d.idx+" "+classes[6]+" "+classes[7]+" "+classes[5]+" "+classes[3]).addClass(classes[4]);
					
					}
					
				});
				
			}
			/* ---------------------------------------- */
			
		},
	
	
	
	
		
	/* 
	----------------------------------------
	FUNCTIONS
	----------------------------------------
	*/
	
	/* validates selector (if selector is invalid or undefined uses the default one) */
		_selector=function(){
			return (typeof $(this)!=="object" || $(this).length<1) ? defaultSelector : this;
		},
		/* -------------------- */
		
		/* changes options according to theme */
		_theme=function(obj){
			var fixedSizeScrollbarThemes=["rounded","rounded-dark","rounded-dots","rounded-dots-dark"],
				nonExpandedScrollbarThemes=["rounded-dots","rounded-dots-dark","3d","3d-dark","3d-thick","3d-thick-dark","inset","inset-dark","inset-2","inset-2-dark","inset-3","inset-3-dark"],
				disabledScrollButtonsThemes=["minimal","minimal-dark"],
				enabledAutoHideScrollbarThemes=["minimal","minimal-dark"],
				scrollbarPositionOutsideThemes=["minimal","minimal-dark"];
			obj.autoDraggerLength=$.inArray(obj.theme,fixedSizeScrollbarThemes) > -1 ? false : obj.autoDraggerLength;
			obj.autoExpandScrollbar=$.inArray(obj.theme,nonExpandedScrollbarThemes) > -1 ? false : obj.autoExpandScrollbar;
			obj.scrollButtons.enable=$.inArray(obj.theme,disabledScrollButtonsThemes) > -1 ? false : obj.scrollButtons.enable;
			obj.autoHideScrollbar=$.inArray(obj.theme,enabledAutoHideScrollbarThemes) > -1 ? true : obj.autoHideScrollbar;
			obj.scrollbarPosition=$.inArray(obj.theme,scrollbarPositionOutsideThemes) > -1 ? "outside" : obj.scrollbarPosition;
		},
		/* -------------------- */
		
		
		/* live option timers removal */
		removeLiveTimers=function(selector){
			if(liveTimers[selector]){
				clearTimeout(liveTimers[selector]);
				_delete(liveTimers,selector);
			}
		},
		/* -------------------- */
		
		
		/* normalizes axis option to valid values: "y", "x", "yx" */
		_findAxis=function(val){
			return (val==="yx" || val==="xy" || val==="auto") ? "yx" : (val==="x" || val==="horizontal") ? "x" : "y";
		},
		/* -------------------- */
		
		
		/* normalizes scrollButtons.scrollType option to valid values: "stepless", "stepped" */
		_findScrollButtonsType=function(val){
			return (val==="stepped" || val==="pixels" || val==="step" || val==="click") ? "stepped" : "stepless";
		},
		/* -------------------- */
		
		
		/* generates plugin markup */
		_pluginMarkup=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				expandClass=o.autoExpandScrollbar ? " "+classes[1]+"_expand" : "",
				scrollbar=["<div id='mCSB_"+d.idx+"_scrollbar_vertical' class='mCSB_scrollTools mCSB_"+d.idx+"_scrollbar mCS-"+o.theme+" mCSB_scrollTools_vertical"+expandClass+"'><div class='"+classes[12]+"'><div id='mCSB_"+d.idx+"_dragger_vertical' class='mCSB_dragger' style='position:absolute;' oncontextmenu='return false;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>","<div id='mCSB_"+d.idx+"_scrollbar_horizontal' class='mCSB_scrollTools mCSB_"+d.idx+"_scrollbar mCS-"+o.theme+" mCSB_scrollTools_horizontal"+expandClass+"'><div class='"+classes[12]+"'><div id='mCSB_"+d.idx+"_dragger_horizontal' class='mCSB_dragger' style='position:absolute;' oncontextmenu='return false;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>"],
				wrapperClass=o.axis==="yx" ? "mCSB_vertical_horizontal" : o.axis==="x" ? "mCSB_horizontal" : "mCSB_vertical",
				scrollbars=o.axis==="yx" ? scrollbar[0]+scrollbar[1] : o.axis==="x" ? scrollbar[1] : scrollbar[0],
				contentWrapper=o.axis==="yx" ? "<div id='mCSB_"+d.idx+"_container_wrapper' class='mCSB_container_wrapper' />" : "",
				autoHideClass=o.autoHideScrollbar ? " "+classes[6] : "",
				scrollbarDirClass=(o.axis!=="x" && d.langDir==="rtl") ? " "+classes[7] : "";
			if(o.setWidth){$this.css("width",o.setWidth);} /* set element width */
			if(o.setHeight){$this.css("height",o.setHeight);} /* set element height */
			o.setLeft=(o.axis!=="y" && d.langDir==="rtl") ? "989999px" : o.setLeft; /* adjust left position for rtl direction */
			$this.addClass(pluginNS+" _"+pluginPfx+"_"+d.idx+autoHideClass+scrollbarDirClass).wrapInner("<div id='mCSB_"+d.idx+"' class='mCustomScrollBox mCS-"+o.theme+" "+wrapperClass+"'><div id='mCSB_"+d.idx+"_container' class='mCSB_container' style='position:relative; top:"+o.setTop+"; left:"+o.setLeft+";' dir="+d.langDir+" /></div>");
			var mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container");
			if(o.axis!=="y" && !o.advanced.autoExpandHorizontalScroll){
				mCSB_container.css("width",_contentWidth(mCSB_container.children()));
			}
			if(o.scrollbarPosition==="outside"){
				if($this.css("position")==="static"){ /* requires elements with non-static position */
					$this.css("position","relative");
				}
				$this.css("overflow","visible");
				mCustomScrollBox.addClass("mCSB_outside").after(scrollbars);
			}else{
				mCustomScrollBox.addClass("mCSB_inside").append(scrollbars);
				mCSB_container.wrap(contentWrapper);
			}
			_scrollButtons.call(this); /* add scrollbar buttons */
			/* minimum dragger length */
			var mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")];
			mCSB_dragger[0].css("min-height",mCSB_dragger[0].height());
			mCSB_dragger[1].css("min-width",mCSB_dragger[1].width());
		},
		/* -------------------- */
		
		
		/* calculates content width */
		_contentWidth=function(el){
			return Math.max.apply(Math,el.map(function(){return $(this).outerWidth(true);}).get());
		},
		/* -------------------- */
		
		
		/* expands content horizontally */
		_expandContentHorizontally=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				mCSB_container=$("#mCSB_"+d.idx+"_container");
			if(o.advanced.autoExpandHorizontalScroll && o.axis!=="y"){
				/* 
				wrap content with an infinite width div and set its position to absolute and width to auto. 
				Setting width to auto before calculating the actual width is important! 
				We must let the browser set the width as browser zoom values are impossible to calculate.
				*/
				mCSB_container.css({"position":"absolute","width":"auto"})
					.wrap("<div class='mCSB_h_wrapper' style='position:relative; left:0; width:999999px;' />")
					.css({ /* set actual width, original position and un-wrap */
						/* 
						get the exact width (with decimals) and then round-up. 
						Using jquery outerWidth() will round the width value which will mess up with inner elements that have non-integer width
						*/
						"width":(Math.ceil(mCSB_container[0].getBoundingClientRect().right+0.4)-Math.floor(mCSB_container[0].getBoundingClientRect().left)),
						"position":"relative"
					}).unwrap();
			}
		},
		/* -------------------- */
		
		
		/* adds scrollbar buttons */
		_scrollButtons=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				mCSB_scrollTools=$(".mCSB_"+d.idx+"_scrollbar:first"),
				tabindex=!_isNumeric(o.scrollButtons.tabindex) ? "" : "tabindex='"+o.scrollButtons.tabindex+"'",
				btnHTML=[
					"<a href='#' class='"+classes[13]+"' oncontextmenu='return false;' "+tabindex+" />",
					"<a href='#' class='"+classes[14]+"' oncontextmenu='return false;' "+tabindex+" />",
					"<a href='#' class='"+classes[15]+"' oncontextmenu='return false;' "+tabindex+" />",
					"<a href='#' class='"+classes[16]+"' oncontextmenu='return false;' "+tabindex+" />"
				],
				btn=[(o.axis==="x" ? btnHTML[2] : btnHTML[0]),(o.axis==="x" ? btnHTML[3] : btnHTML[1]),btnHTML[2],btnHTML[3]];
			if(o.scrollButtons.enable){
				mCSB_scrollTools.prepend(btn[0]).append(btn[1]).next(".mCSB_scrollTools").prepend(btn[2]).append(btn[3]);
			}
		},
		/* -------------------- */
		
		
		/* detects/sets css max-height value */
		_maxHeight=function(){
			var $this=$(this),d=$this.data(pluginPfx),
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mh=$this.css("max-height") || "none",pct=mh.indexOf("%")!==-1,
				bs=$this.css("box-sizing");
			if(mh!=="none"){
				var val=pct ? $this.parent().height()*parseInt(mh)/100 : parseInt(mh);
				/* if element's css box-sizing is "border-box", subtract any paddings and/or borders from max-height value */
				if(bs==="border-box"){val-=(($this.innerHeight()-$this.height())+($this.outerHeight()-$this.innerHeight()));}
				mCustomScrollBox.css("max-height",Math.round(val));
			}
		},
		/* -------------------- */
		
		
		/* auto-adjusts scrollbar dragger length */
		_setDraggerLength=function(){
			var $this=$(this),d=$this.data(pluginPfx),
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")],
				ratio=[mCustomScrollBox.height()/mCSB_container.outerHeight(false),mCustomScrollBox.width()/mCSB_container.outerWidth(false)],
				l=[
					parseInt(mCSB_dragger[0].css("min-height")),Math.round(ratio[0]*mCSB_dragger[0].parent().height()),
					parseInt(mCSB_dragger[1].css("min-width")),Math.round(ratio[1]*mCSB_dragger[1].parent().width())
				],
				h=oldIE && (l[1]<l[0]) ? l[0] : l[1],w=oldIE && (l[3]<l[2]) ? l[2] : l[3];
			mCSB_dragger[0].css({
				"height":h,"max-height":(mCSB_dragger[0].parent().height()-10)
			}).find(".mCSB_dragger_bar").css({"line-height":l[0]+"px"});
			mCSB_dragger[1].css({
				"width":w,"max-width":(mCSB_dragger[1].parent().width()-10)
			});
		},
		/* -------------------- */
		
		
		/* calculates scrollbar to content ratio */
		_scrollRatio=function(){
			var $this=$(this),d=$this.data(pluginPfx),
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")],
				scrollAmount=[mCSB_container.outerHeight(false)-mCustomScrollBox.height(),mCSB_container.outerWidth(false)-mCustomScrollBox.width()],
				ratio=[
					scrollAmount[0]/(mCSB_dragger[0].parent().height()-mCSB_dragger[0].height()),
					scrollAmount[1]/(mCSB_dragger[1].parent().width()-mCSB_dragger[1].width())
				];
			d.scrollRatio={y:ratio[0],x:ratio[1]};
		},
		/* -------------------- */
		
		
		/* toggles scrolling classes */
		_onDragClasses=function(el,action,xpnd){
			var expandClass=xpnd ? classes[0]+"_expanded" : "",
				scrollbar=el.closest(".mCSB_scrollTools");
			if(action==="active"){
				el.toggleClass(classes[0]+" "+expandClass); scrollbar.toggleClass(classes[1]); 
				el[0]._draggable=el[0]._draggable ? 0 : 1;
			}else{
				if(!el[0]._draggable){
					if(action==="hide"){
						el.removeClass(classes[0]); scrollbar.removeClass(classes[1]);
					}else{
						el.addClass(classes[0]); scrollbar.addClass(classes[1]);
					}
				}
			}
		},
		/* -------------------- */
		
		
		/* checks if content overflows its container to determine if scrolling is required */
		_overflowed=function(){
			var $this=$(this),d=$this.data(pluginPfx),
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				contentHeight=d.overflowed==null ? mCSB_container.height() : mCSB_container.outerHeight(false),
				contentWidth=d.overflowed==null ? mCSB_container.width() : mCSB_container.outerWidth(false);
			return [contentHeight>mCustomScrollBox.height(),contentWidth>mCustomScrollBox.width()];
		},
		/* -------------------- */
		
		
		/* resets content position to 0 */
		_resetContentPosition=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")];
			_stop($this); /* stop any current scrolling before resetting */
			if((o.axis!=="x" && !d.overflowed[0]) || (o.axis==="y" && d.overflowed[0])){ /* reset y */
				mCSB_dragger[0].add(mCSB_container).css("top",0);
				_scrollTo($this,"_resetY");
			}
			if((o.axis!=="y" && !d.overflowed[1]) || (o.axis==="x" && d.overflowed[1])){ /* reset x */
				var cx=dx=0;
				if(d.langDir==="rtl"){ /* adjust left position for rtl direction */
					cx=mCustomScrollBox.width()-mCSB_container.outerWidth(false);
					dx=Math.abs(cx/d.scrollRatio.x);
				}
				mCSB_container.css("left",cx);
				mCSB_dragger[1].css("left",dx);
				_scrollTo($this,"_resetX");
			}
		},
		/* -------------------- */
		
		
		/* binds scrollbar events */
		_bindEvents=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt;
			if(!d.bindEvents){ /* check if events are already bound */
				_draggable.call(this);
				if(o.contentTouchScroll){_contentDraggable.call(this);}
				_selectable.call(this);
				if(o.mouseWheel.enable){ /* bind mousewheel fn when plugin is available */
					function _mwt(){
						mousewheelTimeout=setTimeout(function(){
							if(!$.event.special.mousewheel){
								_mwt();
							}else{
								clearTimeout(mousewheelTimeout);
								_mousewheel.call($this[0]);
							}
						},100);
					}
					var mousewheelTimeout;
					_mwt();
				}
				_draggerRail.call(this);
				_wrapperScroll.call(this);
				if(o.advanced.autoScrollOnFocus){_focus.call(this);}
				if(o.scrollButtons.enable){_buttons.call(this);}
				if(o.keyboard.enable){_keyboard.call(this);}
				d.bindEvents=true;
			}
		},
		/* -------------------- */
		
		
		/* unbinds scrollbar events */
		_unbindEvents=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				namespace=pluginPfx+"_"+d.idx,
				sb=".mCSB_"+d.idx+"_scrollbar",
				sel=$("#mCSB_"+d.idx+",#mCSB_"+d.idx+"_container,#mCSB_"+d.idx+"_container_wrapper,"+sb+" ."+classes[12]+",#mCSB_"+d.idx+"_dragger_vertical,#mCSB_"+d.idx+"_dragger_horizontal,"+sb+">a"),
				mCSB_container=$("#mCSB_"+d.idx+"_container");
			if(o.advanced.releaseDraggableSelectors){sel.add($(o.advanced.releaseDraggableSelectors));}
			if(d.bindEvents){ /* check if events are bound */
				/* unbind namespaced events from document/selectors */
				$(document).unbind("."+namespace);
				sel.each(function(){
					$(this).unbind("."+namespace);
				});
				/* clear and delete timeouts/objects */
				clearTimeout($this[0]._focusTimeout); _delete($this[0],"_focusTimeout");
				clearTimeout(d.sequential.step); _delete(d.sequential,"step");
				clearTimeout(mCSB_container[0].onCompleteTimeout); _delete(mCSB_container[0],"onCompleteTimeout");
				d.bindEvents=false;
			}
		},
		/* -------------------- */
		
		
		/* toggles scrollbar visibility */
		_scrollbarVisibility=function(disabled){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				contentWrapper=$("#mCSB_"+d.idx+"_container_wrapper"),
				content=contentWrapper.length ? contentWrapper : $("#mCSB_"+d.idx+"_container"),
				scrollbar=[$("#mCSB_"+d.idx+"_scrollbar_vertical"),$("#mCSB_"+d.idx+"_scrollbar_horizontal")],
				mCSB_dragger=[scrollbar[0].find(".mCSB_dragger"),scrollbar[1].find(".mCSB_dragger")];
			if(o.axis!=="x"){
				if(d.overflowed[0] && !disabled){
					scrollbar[0].add(mCSB_dragger[0]).add(scrollbar[0].children("a")).css("display","block");
					content.removeClass(classes[8]+" "+classes[10]);
				}else{
					if(o.alwaysShowScrollbar){
						if(o.alwaysShowScrollbar!==2){mCSB_dragger[0].add(scrollbar[0].children("a")).css("display","none");}
						content.removeClass(classes[10]);
					}else{
						scrollbar[0].css("display","none");
						content.addClass(classes[10]);
					}
					content.addClass(classes[8]);
				}
			}
			if(o.axis!=="y"){
				if(d.overflowed[1] && !disabled){
					scrollbar[1].add(mCSB_dragger[1]).add(scrollbar[1].children("a")).css("display","block");
					content.removeClass(classes[9]+" "+classes[11]);
				}else{
					if(o.alwaysShowScrollbar){
						if(o.alwaysShowScrollbar!==2){mCSB_dragger[1].add(scrollbar[1].children("a")).css("display","none");}
						content.removeClass(classes[11]);
					}else{
						scrollbar[1].css("display","none");
						content.addClass(classes[11]);
					}
					content.addClass(classes[9]);
				}
			}
			if(!d.overflowed[0] && !d.overflowed[1]){
				$this.addClass(classes[5]);
			}else{
				$this.removeClass(classes[5]);
			}
		},
		/* -------------------- */
		
		
		/* returns input coordinates of pointer, touch and mouse events (relative to document) */
		_coordinates=function(e){
			var t=e.type;
			switch(t){
				case "pointerdown": case "MSPointerDown": case "pointermove": case "MSPointerMove": case "pointerup": case "MSPointerUp":
					return [e.originalEvent.pageY,e.originalEvent.pageX,false];
					break;
				case "touchstart": case "touchmove": case "touchend":
					var touch=e.originalEvent.touches[0] || e.originalEvent.changedTouches[0],
						touches=e.originalEvent.touches.length || e.originalEvent.changedTouches.length;
					return [touch.pageY,touch.pageX,touches>1];
					break;
				default:
					return [e.pageY,e.pageX,false];
			}
		},
		/* -------------------- */
		
		
		/* 
		SCROLLBAR DRAG EVENTS
		scrolls content via scrollbar dragging 
		*/
		_draggable=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				namespace=pluginPfx+"_"+d.idx,
				draggerId=["mCSB_"+d.idx+"_dragger_vertical","mCSB_"+d.idx+"_dragger_horizontal"],
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				mCSB_dragger=$("#"+draggerId[0]+",#"+draggerId[1]),
				draggable,dragY,dragX,
				rds=o.advanced.releaseDraggableSelectors ? mCSB_dragger.add($(o.advanced.releaseDraggableSelectors)) : mCSB_dragger;
			mCSB_dragger.bind("mousedown."+namespace+" touchstart."+namespace+" pointerdown."+namespace+" MSPointerDown."+namespace,function(e){
				e.stopImmediatePropagation();
				e.preventDefault();
				if(!_mouseBtnLeft(e)){return;} /* left mouse button only */
				touchActive=true;
				if(oldIE){document.onselectstart=function(){return false;}} /* disable text selection for IE < 9 */
				_iframe(false); /* enable scrollbar dragging over iframes by disabling their events */
				_stop($this);
				draggable=$(this);
				var offset=draggable.offset(),y=_coordinates(e)[0]-offset.top,x=_coordinates(e)[1]-offset.left,
					h=draggable.height()+offset.top,w=draggable.width()+offset.left;
				if(y<h && y>0 && x<w && x>0){
					dragY=y; 
					dragX=x;
				}
				_onDragClasses(draggable,"active",o.autoExpandScrollbar); 
			}).bind("touchmove."+namespace,function(e){
				e.stopImmediatePropagation();
				e.preventDefault();
				var offset=draggable.offset(),y=_coordinates(e)[0]-offset.top,x=_coordinates(e)[1]-offset.left;
				_drag(dragY,dragX,y,x);
			});
			$(document).bind("mousemove."+namespace+" pointermove."+namespace+" MSPointerMove."+namespace,function(e){
				if(draggable){
					var offset=draggable.offset(),y=_coordinates(e)[0]-offset.top,x=_coordinates(e)[1]-offset.left;
					if(dragY===y){return;} /* has it really moved? */
					_drag(dragY,dragX,y,x);
				}
			}).add(rds).bind("mouseup."+namespace+" touchend."+namespace+" pointerup."+namespace+" MSPointerUp."+namespace,function(e){
				if(draggable){
					_onDragClasses(draggable,"active",o.autoExpandScrollbar); 
					draggable=null;
				}
				touchActive=false;
				if(oldIE){document.onselectstart=null;} /* enable text selection for IE < 9 */
				_iframe(true); /* enable iframes events */
			});
			function _iframe(evt){
				var el=mCSB_container.find("iframe");
				if(!el.length){return;} /* check if content contains iframes */
				var val=!evt ? "none" : "auto";
				el.css("pointer-events",val); /* for IE11, iframe's display property should not be "block" */
			}
			function _drag(dragY,dragX,y,x){
				mCSB_container[0].idleTimer=o.scrollInertia<233 ? 250 : 0;
				if(draggable.attr("id")===draggerId[1]){
					var dir="x",to=((draggable[0].offsetLeft-dragX)+x)*d.scrollRatio.x;
				}else{
					var dir="y",to=((draggable[0].offsetTop-dragY)+y)*d.scrollRatio.y;
				}
				_scrollTo($this,to.toString(),{dir:dir,drag:true});
			}
		},
		/* -------------------- */
		
		
		/* 
		TOUCH SWIPE EVENTS
		scrolls content via touch swipe 
		Emulates the native touch-swipe scrolling with momentum found in iOS, Android and WP devices 
		*/
		_contentDraggable=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				namespace=pluginPfx+"_"+d.idx,
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")],
				dragY,dragX,touchStartY,touchStartX,touchMoveY=[],touchMoveX=[],startTime,runningTime,endTime,distance,speed,amount,
				durA=0,durB,overwrite=o.axis==="yx" ? "none" : "all",touchIntent=[];
			mCSB_container.bind("touchstart."+namespace+" pointerdown."+namespace+" MSPointerDown."+namespace,function(e){
				if(!_pointerTouch(e) || touchActive || _coordinates(e)[2]){return;}
				var offset=mCSB_container.offset();
				dragY=_coordinates(e)[0]-offset.top;
				dragX=_coordinates(e)[1]-offset.left;
				touchIntent=[_coordinates(e)[0],_coordinates(e)[1]];
			}).bind("touchmove."+namespace+" pointermove."+namespace+" MSPointerMove."+namespace,function(e){
				if(!_pointerTouch(e) || touchActive || _coordinates(e)[2]){return;}
				e.stopImmediatePropagation();
				runningTime=_getTime();
				var offset=mCustomScrollBox.offset(),y=_coordinates(e)[0]-offset.top,x=_coordinates(e)[1]-offset.left,
					easing="mcsLinearOut";
				touchMoveY.push(y);
				touchMoveX.push(x);
				touchIntent[2]=Math.abs(_coordinates(e)[0]-touchIntent[0]); touchIntent[3]=Math.abs(_coordinates(e)[1]-touchIntent[1]);
				if(d.overflowed[0]){
					var limit=mCSB_dragger[0].parent().height()-mCSB_dragger[0].height(),
						prevent=((dragY-y)>0 && (y-dragY)>-(limit*d.scrollRatio.y) && (touchIntent[3]*2<touchIntent[2] || o.axis==="yx"));
				}
				if(d.overflowed[1]){
					var limitX=mCSB_dragger[1].parent().width()-mCSB_dragger[1].width(),
						preventX=((dragX-x)>0 && (x-dragX)>-(limitX*d.scrollRatio.x) && (touchIntent[2]*2<touchIntent[3] || o.axis==="yx"));
				}
				if(prevent || preventX){e.preventDefault();} /* prevent native document scrolling */
				amount=o.axis==="yx" ? [(dragY-y),(dragX-x)] : o.axis==="x" ? [null,(dragX-x)] : [(dragY-y),null];
				mCSB_container[0].idleTimer=250;
				if(d.overflowed[0]){_drag(amount[0],durA,easing,"y","all",true);}
				if(d.overflowed[1]){_drag(amount[1],durA,easing,"x",overwrite,true);}
			});
			mCustomScrollBox.bind("touchstart."+namespace+" pointerdown."+namespace+" MSPointerDown."+namespace,function(e){
				if(!_pointerTouch(e) || touchActive || _coordinates(e)[2]){return;}
				e.stopImmediatePropagation();
				_stop($this);
				startTime=_getTime();
				var offset=mCustomScrollBox.offset();
				touchStartY=_coordinates(e)[0]-offset.top;
				touchStartX=_coordinates(e)[1]-offset.left;
				touchMoveY=[]; touchMoveX=[];
			}).bind("touchend."+namespace+" pointerup."+namespace+" MSPointerUp."+namespace,function(e){
				if(!_pointerTouch(e) || touchActive || _coordinates(e)[2]){return;}
				e.stopImmediatePropagation();
				endTime=_getTime();
				var offset=mCustomScrollBox.offset(),y=_coordinates(e)[0]-offset.top,x=_coordinates(e)[1]-offset.left;
				if((endTime-runningTime)>30){return;}
				speed=1000/(endTime-startTime);
				var easing="mcsEaseOut",slow=speed<2.5,
					diff=slow ? [touchMoveY[touchMoveY.length-2],touchMoveX[touchMoveX.length-2]] : [0,0];
				distance=slow ? [(y-diff[0]),(x-diff[1])] : [y-touchStartY,x-touchStartX];
				var absDistance=[Math.abs(distance[0]),Math.abs(distance[1])];
				speed=slow ? [Math.abs(distance[0]/4),Math.abs(distance[1]/4)] : [speed,speed];
				var a=[
					Math.abs(mCSB_container[0].offsetTop)-(distance[0]*_m((absDistance[0]/speed[0]),speed[0])),
					Math.abs(mCSB_container[0].offsetLeft)-(distance[1]*_m((absDistance[1]/speed[1]),speed[1]))
				];
				amount=o.axis==="yx" ? [a[0],a[1]] : o.axis==="x" ? [null,a[1]] : [a[0],null];
				durB=[(absDistance[0]*4)+o.scrollInertia,(absDistance[1]*4)+o.scrollInertia];
				var md=parseInt(o.contentTouchScroll) || 0; /* absolute minimum distance required */
				amount[0]=absDistance[0]>md ? amount[0] : 0;
				amount[1]=absDistance[1]>md ? amount[1] : 0;
				if(d.overflowed[0]){_drag(amount[0],durB[0],easing,"y",overwrite,false);}
				if(d.overflowed[1]){_drag(amount[1],durB[1],easing,"x",overwrite,false);}
			});
			function _m(ds,s){
				var r=[s*1.5,s*2,s/1.5,s/2];
				if(ds>90){
					return s>4 ? r[0] : r[3];
				}else if(ds>60){
					return s>3 ? r[3] : r[2];
				}else if(ds>30){
					return s>8 ? r[1] : s>6 ? r[0] : s>4 ? s : r[2];
				}else{
					return s>8 ? s : r[3];
				}
			}
			function _drag(amount,dur,easing,dir,overwrite,drag){
				if(!amount){return;}
				_scrollTo($this,amount.toString(),{dur:dur,scrollEasing:easing,dir:dir,overwrite:overwrite,drag:drag});
			}
		},
		/* -------------------- */
		
		
		/* 
		SELECT TEXT EVENTS 
		scrolls content when text is selected 
		*/
		_selectable=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,seq=d.sequential,
				namespace=pluginPfx+"_"+d.idx,
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				wrapper=mCSB_container.parent(),
				action;
			mCSB_container.bind("mousedown."+namespace,function(e){
				if(!action){action=1; touchActive=true;}
			}).add(document).bind("mousemove."+namespace,function(e){
				if(action && _sel()){
					var offset=mCSB_container.offset(),
						y=_coordinates(e)[0]-offset.top+mCSB_container[0].offsetTop,x=_coordinates(e)[1]-offset.left+mCSB_container[0].offsetLeft;
					if(y>0 && y<wrapper.height() && x>0 && x<wrapper.width()){
						if(seq.step){_seq("off",null,"stepped");}
					}else{
						if(o.axis!=="x" && d.overflowed[0]){
							if(y<0){
								_seq("on",38);
							}else if(y>wrapper.height()){
								_seq("on",40);
							}
						}
						if(o.axis!=="y" && d.overflowed[1]){
							if(x<0){
								_seq("on",37);
							}else if(x>wrapper.width()){
								_seq("on",39);
							}
						}
					}
				}
			}).bind("mouseup."+namespace,function(e){
				if(action){action=0; _seq("off",null);}
				touchActive=false;
			});
			function _sel(){
				return 	window.getSelection ? window.getSelection().toString() : 
						document.selection && document.selection.type!="Control" ? document.selection.createRange().text : 0;
			}
			function _seq(a,c,s){
				seq.type=s && action ? "stepped" : "stepless";
				seq.scrollAmount=10;
				_sequentialScroll($this,a,c,"mcsLinearOut",s ? 60 : null);
			}
		},
		/* -------------------- */
		
		
		/* 
		MOUSE WHEEL EVENT
		scrolls content via mouse-wheel 
		via mouse-wheel plugin (https://github.com/brandonaaron/jquery-mousewheel)
		*/
		_mousewheel=function(){
			var $this=$(this),d=$this.data(pluginPfx);
			if(d){ /* Check if the scrollbar is ready to use mousewheel events (issue: #185) */
				var o=d.opt,
					namespace=pluginPfx+"_"+d.idx,
					mCustomScrollBox=$("#mCSB_"+d.idx),
					mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")],
					iframe=$("#mCSB_"+d.idx+"_container").find("iframe"),
					el=mCustomScrollBox /* mousewheel element selector */;
				/* check for cross domain iframes and bind mousewheel event on them in addition to default mousewheel element selector */
				if(iframe.length){
					iframe.each(function(){
						var iFobj=this;
						if(_canAccessIFrame(iFobj)){ /* check if iframe can be accessed */
							el=el.add($(iFobj).contents().find("body"));
						}
					});
				}
				el.bind("mousewheel."+namespace,function(e,delta){
					_stop($this);
					if(_disableMousewheel($this,e.target)){return;} /* disables mouse-wheel when hovering specific elements */
					var deltaFactor=o.mouseWheel.deltaFactor!=="auto" ? parseInt(o.mouseWheel.deltaFactor) : (oldIE && e.deltaFactor<100) ? 100 : e.deltaFactor || 100;
					if(o.axis==="x" || o.mouseWheel.axis==="x"){
						var dir="x",
							px=[Math.round(deltaFactor*d.scrollRatio.x),parseInt(o.mouseWheel.scrollAmount)],
							amount=o.mouseWheel.scrollAmount!=="auto" ? px[1] : px[0]>=mCustomScrollBox.width() ? mCustomScrollBox.width()*0.9 : px[0],
							contentPos=Math.abs($("#mCSB_"+d.idx+"_container")[0].offsetLeft),
							draggerPos=mCSB_dragger[1][0].offsetLeft,
							limit=mCSB_dragger[1].parent().width()-mCSB_dragger[1].width(),
							dlt=e.deltaX || e.deltaY || delta;
					}else{
						var dir="y",
							px=[Math.round(deltaFactor*d.scrollRatio.y),parseInt(o.mouseWheel.scrollAmount)],
							amount=o.mouseWheel.scrollAmount!=="auto" ? px[1] : px[0]>=mCustomScrollBox.height() ? mCustomScrollBox.height()*0.9 : px[0],
							contentPos=Math.abs($("#mCSB_"+d.idx+"_container")[0].offsetTop),
							draggerPos=mCSB_dragger[0][0].offsetTop,
							limit=mCSB_dragger[0].parent().height()-mCSB_dragger[0].height(),
							dlt=e.deltaY || delta;
					}
					if((dir==="y" && !d.overflowed[0]) || (dir==="x" && !d.overflowed[1])){return;}
					if(o.mouseWheel.invert){dlt=-dlt;}
					if(o.mouseWheel.normalizeDelta){dlt=dlt<0 ? -1 : 1;}
					if((dlt>0 && draggerPos!==0) || (dlt<0 && draggerPos!==limit) || o.mouseWheel.preventDefault){
						e.stopImmediatePropagation();
						e.preventDefault();
					}
					_scrollTo($this,(contentPos-(dlt*amount)).toString(),{dir:dir});
				});
			}
			/* check if iframe can be accessed */
			function _canAccessIFrame(iframe){
				var html=null;
				try{
					var doc=iframe.contentDocument || iframe.contentWindow.document;
					html=doc.body.innerHTML;
				}catch(err){/* do nothing */}
				return(html!==null);
			}
		},
		/* -------------------- */
		
		
		/* disables mouse-wheel when hovering specific elements like select, datalist etc. */
		_disableMousewheel=function(el,target){
			var tag=target.nodeName.toLowerCase(),
				tags=el.data(pluginPfx).opt.mouseWheel.disableOver,
				/* elements that require focus */
				focusTags=["select","textarea"];
			return $.inArray(tag,tags) > -1 && !($.inArray(tag,focusTags) > -1 && !$(target).is(":focus"));
		},
		/* -------------------- */
		
		
		/* 
		DRAGGER RAIL CLICK EVENT
		scrolls content via dragger rail 
		*/
		_draggerRail=function(){
			var $this=$(this),d=$this.data(pluginPfx),
				namespace=pluginPfx+"_"+d.idx,
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				wrapper=mCSB_container.parent(),
				mCSB_draggerContainer=$(".mCSB_"+d.idx+"_scrollbar ."+classes[12]);
			mCSB_draggerContainer.bind("touchstart."+namespace+" pointerdown."+namespace+" MSPointerDown."+namespace,function(e){
				touchActive=true;
			}).bind("touchend."+namespace+" pointerup."+namespace+" MSPointerUp."+namespace,function(e){
				touchActive=false;
			}).bind("click."+namespace,function(e){
				if($(e.target).hasClass(classes[12]) || $(e.target).hasClass("mCSB_draggerRail")){
					_stop($this);
					var el=$(this),mCSB_dragger=el.find(".mCSB_dragger");
					if(el.parent(".mCSB_scrollTools_horizontal").length>0){
						if(!d.overflowed[1]){return;}
						var dir="x",
							clickDir=e.pageX>mCSB_dragger.offset().left ? -1 : 1,
							to=Math.abs(mCSB_container[0].offsetLeft)-(clickDir*(wrapper.width()*0.9));
					}else{
						if(!d.overflowed[0]){return;}
						var dir="y",
							clickDir=e.pageY>mCSB_dragger.offset().top ? -1 : 1,
							to=Math.abs(mCSB_container[0].offsetTop)-(clickDir*(wrapper.height()*0.9));
					}
					_scrollTo($this,to.toString(),{dir:dir,scrollEasing:"mcsEaseInOut"});
				}
			});
		},
		/* -------------------- */
		
		
		/* 
		FOCUS EVENT
		scrolls content via element focus (e.g. clicking an input, pressing TAB key etc.)
		*/
		_focus=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				namespace=pluginPfx+"_"+d.idx,
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				wrapper=mCSB_container.parent();
			mCSB_container.bind("focusin."+namespace,function(e){
				var el=$(document.activeElement),
					nested=mCSB_container.find(".mCustomScrollBox").length,
					dur=0;
				if(!el.is(o.advanced.autoScrollOnFocus)){return;}
				_stop($this);
				clearTimeout($this[0]._focusTimeout);
				$this[0]._focusTimer=nested ? (dur+17)*nested : 0;
				$this[0]._focusTimeout=setTimeout(function(){
					var	to=[_childPos(el)[0],_childPos(el)[1]],
						contentPos=[mCSB_container[0].offsetTop,mCSB_container[0].offsetLeft],
						isVisible=[
							(contentPos[0]+to[0]>=0 && contentPos[0]+to[0]<wrapper.height()-el.outerHeight(false)),
							(contentPos[1]+to[1]>=0 && contentPos[0]+to[1]<wrapper.width()-el.outerWidth(false))
						],
						overwrite=(o.axis==="yx" && !isVisible[0] && !isVisible[1]) ? "none" : "all";
					if(o.axis!=="x" && !isVisible[0]){
						_scrollTo($this,to[0].toString(),{dir:"y",scrollEasing:"mcsEaseInOut",overwrite:overwrite,dur:dur});
					}
					if(o.axis!=="y" && !isVisible[1]){
						_scrollTo($this,to[1].toString(),{dir:"x",scrollEasing:"mcsEaseInOut",overwrite:overwrite,dur:dur});
					}
				},$this[0]._focusTimer);
			});
		},
		/* -------------------- */
		
		
		/* sets content wrapper scrollTop/scrollLeft always to 0 */
		_wrapperScroll=function(){
			var $this=$(this),d=$this.data(pluginPfx),
				namespace=pluginPfx+"_"+d.idx,
				wrapper=$("#mCSB_"+d.idx+"_container").parent();
			wrapper.bind("scroll."+namespace,function(e){
				if(wrapper.scrollTop()!==0 || wrapper.scrollLeft()!==0){
					$(".mCSB_"+d.idx+"_scrollbar").css("visibility","hidden"); /* hide scrollbar(s) */
				}
			});
		},
		/* -------------------- */
		
		
		/* 
		BUTTONS EVENTS
		scrolls content via up, down, left and right buttons 
		*/
		_buttons=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,seq=d.sequential,
				namespace=pluginPfx+"_"+d.idx,
				sel=".mCSB_"+d.idx+"_scrollbar",
				btn=$(sel+">a");
			btn.bind("mousedown."+namespace+" touchstart."+namespace+" pointerdown."+namespace+" MSPointerDown."+namespace+" mouseup."+namespace+" touchend."+namespace+" pointerup."+namespace+" MSPointerUp."+namespace+" mouseout."+namespace+" pointerout."+namespace+" MSPointerOut."+namespace+" click."+namespace,function(e){
				e.preventDefault();
				if(!_mouseBtnLeft(e)){return;} /* left mouse button only */
				var btnClass=$(this).attr("class");
				seq.type=o.scrollButtons.scrollType;
				switch(e.type){
					case "mousedown": case "touchstart": case "pointerdown": case "MSPointerDown":
						if(seq.type==="stepped"){return;}
						touchActive=true;
						d.tweenRunning=false;
						_seq("on",btnClass);
						break;
					case "mouseup": case "touchend": case "pointerup": case "MSPointerUp":
					case "mouseout": case "pointerout": case "MSPointerOut":
						if(seq.type==="stepped"){return;}
						touchActive=false;
						if(seq.dir){_seq("off",btnClass);}
						break;
					case "click":
						if(seq.type!=="stepped" || d.tweenRunning){return;}
						_seq("on",btnClass);
						break;
				}
				function _seq(a,c){
					seq.scrollAmount=o.snapAmount || o.scrollButtons.scrollAmount;
					_sequentialScroll($this,a,c);
				}
			});
		},
		/* -------------------- */
		
		
		/* 
		KEYBOARD EVENTS
		scrolls content via keyboard 
		Keys: up arrow, down arrow, left arrow, right arrow, PgUp, PgDn, Home, End
		*/
		_keyboard=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,seq=d.sequential,
				namespace=pluginPfx+"_"+d.idx,
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				wrapper=mCSB_container.parent(),
				editables="input,textarea,select,datalist,keygen,[contenteditable='true']";
			mCustomScrollBox.attr("tabindex","0").bind("blur."+namespace+" keydown."+namespace+" keyup."+namespace,function(e){
				switch(e.type){
					case "blur":
						if(d.tweenRunning && seq.dir){_seq("off",null);}
						break;
					case "keydown": case "keyup":
						var code=e.keyCode ? e.keyCode : e.which,action="on";
						if((o.axis!=="x" && (code===38 || code===40)) || (o.axis!=="y" && (code===37 || code===39))){
							/* up (38), down (40), left (37), right (39) arrows */
							if(((code===38 || code===40) && !d.overflowed[0]) || ((code===37 || code===39) && !d.overflowed[1])){return;}
							if(e.type==="keyup"){action="off";}
							if(!$(document.activeElement).is(editables)){
								e.preventDefault();
								e.stopImmediatePropagation();
								_seq(action,code);
							}
						}else if(code===33 || code===34){
							/* PgUp (33), PgDn (34) */
							if(d.overflowed[0] || d.overflowed[1]){
								e.preventDefault();
								e.stopImmediatePropagation();
							}
							if(e.type==="keyup"){
								_stop($this);
								var keyboardDir=code===34 ? -1 : 1;
								if(o.axis==="x" || (o.axis==="yx" && d.overflowed[1] && !d.overflowed[0])){
									var dir="x",to=Math.abs(mCSB_container[0].offsetLeft)-(keyboardDir*(wrapper.width()*0.9));
								}else{
									var dir="y",to=Math.abs(mCSB_container[0].offsetTop)-(keyboardDir*(wrapper.height()*0.9));
								}
								_scrollTo($this,to.toString(),{dir:dir,scrollEasing:"mcsEaseInOut"});
							}
						}else if(code===35 || code===36){
							/* End (35), Home (36) */
							if(!$(document.activeElement).is(editables)){
								if(d.overflowed[0] || d.overflowed[1]){
									e.preventDefault();
									e.stopImmediatePropagation();
								}
								if(e.type==="keyup"){
									if(o.axis==="x" || (o.axis==="yx" && d.overflowed[1] && !d.overflowed[0])){
										var dir="x",to=code===35 ? Math.abs(wrapper.width()-mCSB_container.outerWidth(false)) : 0;
									}else{
										var dir="y",to=code===35 ? Math.abs(wrapper.height()-mCSB_container.outerHeight(false)) : 0;
									}
									_scrollTo($this,to.toString(),{dir:dir,scrollEasing:"mcsEaseInOut"});
								}
							}
						}
						break;
				}
				function _seq(a,c){
					seq.type=o.keyboard.scrollType;
					seq.scrollAmount=o.snapAmount || o.keyboard.scrollAmount;
					if(seq.type==="stepped" && d.tweenRunning){return;}
					_sequentialScroll($this,a,c);
				}
			});
		},
		/* -------------------- */
		
		
		/* scrolls content sequentially (used when scrolling via buttons, keyboard arrows etc.) */
		_sequentialScroll=function(el,action,trigger,e,s){
			var d=el.data(pluginPfx),o=d.opt,seq=d.sequential,
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				once=seq.type==="stepped" ? true : false;
			switch(action){
				case "on":
					seq.dir=[
						(trigger===classes[16] || trigger===classes[15] || trigger===39 || trigger===37 ? "x" : "y"),
						(trigger===classes[13] || trigger===classes[15] || trigger===38 || trigger===37 ? -1 : 1)
					];
					_stop(el);
					if(_isNumeric(trigger) && seq.type==="stepped"){return;}
					_on(once);
					break;
				case "off":
					_off();
					if(once || (d.tweenRunning && seq.dir)){
						_on(true);
					}
					break;
			}
			/* starts sequence */
			function _on(once){
				var c=seq.type!=="stepped", /* continuous scrolling */
					t=s ? s : !once ? 1000/60 : c ? o.scrollInertia/1.5 : o.scrollInertia, /* timer */
					m=!once ? 2.5 : c ? 7.5 : 40, /* multiplier */
					contentPos=[Math.abs(mCSB_container[0].offsetTop),Math.abs(mCSB_container[0].offsetLeft)],
					ratio=[d.scrollRatio.y>10 ? 10 : d.scrollRatio.y,d.scrollRatio.x>10 ? 10 : d.scrollRatio.x],
					amount=seq.dir[0]==="x" ? contentPos[1]+(seq.dir[1]*(ratio[1]*m)) : contentPos[0]+(seq.dir[1]*(ratio[0]*m)),
					px=seq.dir[0]==="x" ? contentPos[1]+(seq.dir[1]*parseInt(seq.scrollAmount)) : contentPos[0]+(seq.dir[1]*parseInt(seq.scrollAmount)),
					to=seq.scrollAmount!=="auto" ? px : amount,
					easing=e ? e : !once ? "mcsLinear" : c ? "mcsLinearOut" : "mcsEaseInOut",
					onComplete=!once ? false : true;
				if(once && t<17){
					to=seq.dir[0]==="x" ? contentPos[1] : contentPos[0];
				}
				_scrollTo(el,to.toString(),{dir:seq.dir[0],scrollEasing:easing,dur:t,onComplete:onComplete});
				if(once){
					seq.dir=false;
					return;
				}
				clearTimeout(seq.step);
				seq.step=setTimeout(function(){
					_on();
				},t);
			}
			/* stops sequence */
			function _off(){
				clearTimeout(seq.step);
				_delete(seq,"step");
				_stop(el);
			}
		},
		/* -------------------- */
		
		
		/* returns a yx array from value */
		_arr=function(val){
			var o=$(this).data(pluginPfx).opt,vals=[];
			if(typeof val==="function"){val=val();} /* check if the value is a single anonymous function */
			/* check if value is object or array, its length and create an array with yx values */
			if(!(val instanceof Array)){ /* object value (e.g. {y:"100",x:"100"}, 100 etc.) */
				vals[0]=val.y ? val.y : val.x || o.axis==="x" ? null : val;
				vals[1]=val.x ? val.x : val.y || o.axis==="y" ? null : val;
			}else{ /* array value (e.g. [100,100]) */
				vals=val.length>1 ? [val[0],val[1]] : o.axis==="x" ? [null,val[0]] : [val[0],null];
			}
			/* check if array values are anonymous functions */
			if(typeof vals[0]==="function"){vals[0]=vals[0]();}
			if(typeof vals[1]==="function"){vals[1]=vals[1]();}
			return vals;
		},
		/* -------------------- */
		
		
		/* translates values (e.g. "top", 100, "100px", "#id") to actual scroll-to positions */
		_to=function(val,dir){
			if(val==null || typeof val=="undefined"){return;}
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				wrapper=mCSB_container.parent(),
				t=typeof val;
			if(!dir){dir=o.axis==="x" ? "x" : "y";}
			var contentLength=dir==="x" ? mCSB_container.outerWidth(false) : mCSB_container.outerHeight(false),
				contentPos=dir==="x" ? mCSB_container[0].offsetLeft : mCSB_container[0].offsetTop,
				cssProp=dir==="x" ? "left" : "top";
			switch(t){
				case "function": /* this currently is not used. Consider removing it */
					return val();
					break;
				case "object": /* js/jquery object */
					var obj=val.jquery ? val : $(val);
					if(!obj.length){return;}
					return dir==="x" ? _childPos(obj)[1] : _childPos(obj)[0];
					break;
				case "string": case "number":
					if(_isNumeric(val)){ /* numeric value */
						return Math.abs(val);
					}else if(val.indexOf("%")!==-1){ /* percentage value */
						return Math.abs(contentLength*parseInt(val)/100);
					}else if(val.indexOf("-=")!==-1){ /* decrease value */
						return Math.abs(contentPos-parseInt(val.split("-=")[1]));
					}else if(val.indexOf("+=")!==-1){ /* inrease value */
						var p=(contentPos+parseInt(val.split("+=")[1]));
						return p>=0 ? 0 : Math.abs(p);
					}else if(val.indexOf("px")!==-1 && _isNumeric(val.split("px")[0])){ /* pixels string value (e.g. "100px") */
						return Math.abs(val.split("px")[0]);
					}else{
						if(val==="top" || val==="left"){ /* special strings */
							return 0;
						}else if(val==="bottom"){
							return Math.abs(wrapper.height()-mCSB_container.outerHeight(false));
						}else if(val==="right"){
							return Math.abs(wrapper.width()-mCSB_container.outerWidth(false));
						}else if(val==="first" || val==="last"){
							var obj=mCSB_container.find(":"+val);
							return dir==="x" ? _childPos(obj)[1] : _childPos(obj)[0];
						}else{
							if($(val).length){ /* jquery selector */
								return dir==="x" ? _childPos($(val))[1] : _childPos($(val))[0];
							}else{ /* other values (e.g. "100em") */
								mCSB_container.css(cssProp,val);
								methods.update.call(null,$this[0]);
								return;
							}
						}
					}
					break;
			}
		},
		/* -------------------- */
		
		
		/* calls the update method automatically */
		_autoUpdate=function(rem){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				mCSB_container=$("#mCSB_"+d.idx+"_container");
			if(rem){
				/* 
				removes autoUpdate timer 
				usage: _autoUpdate.call(this,"remove");
				*/
				clearTimeout(mCSB_container[0].autoUpdate);
				_delete(mCSB_container[0],"autoUpdate");
				return;
			}
			var	wrapper=mCSB_container.parent(),
				scrollbar=[$("#mCSB_"+d.idx+"_scrollbar_vertical"),$("#mCSB_"+d.idx+"_scrollbar_horizontal")],
				scrollbarSize=function(){return [
					scrollbar[0].is(":visible") ? scrollbar[0].outerHeight(true) : 0, /* returns y-scrollbar height */
					scrollbar[1].is(":visible") ? scrollbar[1].outerWidth(true) : 0 /* returns x-scrollbar width */
				]},
				oldSelSize=sizesSum(),newSelSize,
				os=[mCSB_container.outerHeight(false),mCSB_container.outerWidth(false),wrapper.height(),wrapper.width(),scrollbarSize()[0],scrollbarSize()[1]],ns,
				oldImgsLen=imgSum(),newImgsLen;
			upd();
			function upd(){
				clearTimeout(mCSB_container[0].autoUpdate);
				mCSB_container[0].autoUpdate=setTimeout(function(){
					/* update on specific selector(s) length and size change */
					if(o.advanced.updateOnSelectorChange){
						newSelSize=sizesSum();
						if(newSelSize!==oldSelSize){
							doUpd(3);
							oldSelSize=newSelSize;
							return;
						}
					}
					/* update on main element and scrollbar size changes */
					if(o.advanced.updateOnContentResize){
						ns=[mCSB_container.outerHeight(false),mCSB_container.outerWidth(false),wrapper.height(),wrapper.width(),scrollbarSize()[0],scrollbarSize()[1]];
						if(ns[0]!==os[0] || ns[1]!==os[1] || ns[2]!==os[2] || ns[3]!==os[3] || ns[4]!==os[4] || ns[5]!==os[5]){
							doUpd(ns[0]!==os[0] || ns[1]!==os[1]);
							os=ns;
						}
					}
					/* update on image load */
					if(o.advanced.updateOnImageLoad){
						newImgsLen=imgSum();
						if(newImgsLen!==oldImgsLen){
							mCSB_container.find("img").each(function(){
								imgLoader(this);
							});
							oldImgsLen=newImgsLen;
						}
					}
					if(o.advanced.updateOnSelectorChange || o.advanced.updateOnContentResize || o.advanced.updateOnImageLoad){upd();}
				},60);
			}
			/* returns images amount */
			function imgSum(){
				var total=0
				if(o.advanced.updateOnImageLoad){total=mCSB_container.find("img").length;}
				return total;
			}
			/* a tiny image loader */
			function imgLoader(el){
				if($(el).hasClass(classes[2])){doUpd(); return;}
				var img=new Image();
				function createDelegate(contextObject,delegateMethod){
					return function(){return delegateMethod.apply(contextObject,arguments);}
				}
				function imgOnLoad(){
					this.onload=null;
					$(el).addClass(classes[2]);
					doUpd(2);
				}
				img.onload=createDelegate(img,imgOnLoad);
				img.src=el.src;
			}
			/* returns the total height and width sum of all elements matching the selector */
			function sizesSum(){
				if(o.advanced.updateOnSelectorChange===true){o.advanced.updateOnSelectorChange="*";}
				var total=0,sel=mCSB_container.find(o.advanced.updateOnSelectorChange);
				if(o.advanced.updateOnSelectorChange && sel.length>0){sel.each(function(){total+=$(this).height()+$(this).width();});}
				return total;
			}
			/* calls the update method */
			function doUpd(cb){
				clearTimeout(mCSB_container[0].autoUpdate); 
				methods.update.call(null,$this[0],cb);
			}
		},
		/* -------------------- */
		
		
		/* snaps scrolling to a multiple of a pixels number */
		_snapAmount=function(to,amount,offset){
			return (Math.round(to/amount)*amount-offset); 
		},
		/* -------------------- */
		
		
		/* stops content and scrollbar animations */
		_stop=function(el){
			var d=el.data(pluginPfx),
				sel=$("#mCSB_"+d.idx+"_container,#mCSB_"+d.idx+"_container_wrapper,#mCSB_"+d.idx+"_dragger_vertical,#mCSB_"+d.idx+"_dragger_horizontal");
			sel.each(function(){
				_stopTween.call(this);
			});
		},
		/* -------------------- */
		
		
		/* 
		ANIMATES CONTENT 
		This is where the actual scrolling happens
		*/
		_scrollTo=function(el,to,options){
			var d=el.data(pluginPfx),o=d.opt,
				defaults={
					trigger:"internal",
					dir:"y",
					scrollEasing:"mcsEaseOut",
					drag:false,
					dur:o.scrollInertia,
					overwrite:"all",
					callbacks:true,
					onStart:true,
					onUpdate:true,
					onComplete:true
				},
				options=$.extend(defaults,options),
				dur=[options.dur,(options.drag ? 0 : options.dur)],
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				wrapper=mCSB_container.parent(),
				totalScrollOffsets=o.callbacks.onTotalScrollOffset ? _arr.call(el,o.callbacks.onTotalScrollOffset) : [0,0],
				totalScrollBackOffsets=o.callbacks.onTotalScrollBackOffset ? _arr.call(el,o.callbacks.onTotalScrollBackOffset) : [0,0];
			d.trigger=options.trigger;
			if(wrapper.scrollTop()!==0 || wrapper.scrollLeft()!==0){ /* always reset scrollTop/Left */
				$(".mCSB_"+d.idx+"_scrollbar").css("visibility","visible");
				wrapper.scrollTop(0).scrollLeft(0);
			}
			if(to==="_resetY" && !d.contentReset.y){
				/* callbacks: onOverflowYNone */
				if(_cb("onOverflowYNone")){o.callbacks.onOverflowYNone.call(el[0]);}
				d.contentReset.y=1;
			}
			if(to==="_resetX" && !d.contentReset.x){
				/* callbacks: onOverflowXNone */
				if(_cb("onOverflowXNone")){o.callbacks.onOverflowXNone.call(el[0]);}
				d.contentReset.x=1;
			}
			if(to==="_resetY" || to==="_resetX"){return;}
			if((d.contentReset.y || !el[0].mcs) && d.overflowed[0]){
				/* callbacks: onOverflowY */
				if(_cb("onOverflowY")){o.callbacks.onOverflowY.call(el[0]);}
				d.contentReset.x=null;
			}
			if((d.contentReset.x || !el[0].mcs) && d.overflowed[1]){
				/* callbacks: onOverflowX */
				if(_cb("onOverflowX")){o.callbacks.onOverflowX.call(el[0]);}
				d.contentReset.x=null;
			}
			if(o.snapAmount){to=_snapAmount(to,o.snapAmount,o.snapOffset);} /* scrolling snapping */
			switch(options.dir){
				case "x":
					var mCSB_dragger=$("#mCSB_"+d.idx+"_dragger_horizontal"),
						property="left",
						contentPos=mCSB_container[0].offsetLeft,
						limit=[
							mCustomScrollBox.width()-mCSB_container.outerWidth(false),
							mCSB_dragger.parent().width()-mCSB_dragger.width()
						],
						scrollTo=[to,to===0 ? 0 : (to/d.scrollRatio.x)],
						tso=totalScrollOffsets[1],
						tsbo=totalScrollBackOffsets[1],
						totalScrollOffset=tso>0 ? tso/d.scrollRatio.x : 0,
						totalScrollBackOffset=tsbo>0 ? tsbo/d.scrollRatio.x : 0;
					break;
				case "y":
					var mCSB_dragger=$("#mCSB_"+d.idx+"_dragger_vertical"),
						property="top",
						contentPos=mCSB_container[0].offsetTop,
						limit=[
							mCustomScrollBox.height()-mCSB_container.outerHeight(false),
							mCSB_dragger.parent().height()-mCSB_dragger.height()
						],
						scrollTo=[to,to===0 ? 0 : (to/d.scrollRatio.y)],
						tso=totalScrollOffsets[0],
						tsbo=totalScrollBackOffsets[0],
						totalScrollOffset=tso>0 ? tso/d.scrollRatio.y : 0,
						totalScrollBackOffset=tsbo>0 ? tsbo/d.scrollRatio.y : 0;
					break;
			}
			if(scrollTo[1]<0 || (scrollTo[0]===0 && scrollTo[1]===0)){
				scrollTo=[0,0];
			}else if(scrollTo[1]>=limit[1]){
				scrollTo=[limit[0],limit[1]];
			}else{
				scrollTo[0]=-scrollTo[0];
			}
			if(!el[0].mcs){
				_mcs();  /* init mcs object (once) to make it available before callbacks */
				if(_cb("onInit")){o.callbacks.onInit.call(el[0]);} /* callbacks: onInit */
			}
			clearTimeout(mCSB_container[0].onCompleteTimeout);
			if(!d.tweenRunning && ((contentPos===0 && scrollTo[0]>=0) || (contentPos===limit[0] && scrollTo[0]<=limit[0]))){return;}
			_tweenTo(mCSB_dragger[0],property,Math.round(scrollTo[1]),dur[1],options.scrollEasing);
			_tweenTo(mCSB_container[0],property,Math.round(scrollTo[0]),dur[0],options.scrollEasing,options.overwrite,{
				onStart:function(){
					if(options.callbacks && options.onStart && !d.tweenRunning){
						/* callbacks: onScrollStart */
						if(_cb("onScrollStart")){_mcs(); o.callbacks.onScrollStart.call(el[0]);}
						d.tweenRunning=true;
						_onDragClasses(mCSB_dragger);
						d.cbOffsets=_cbOffsets();
					}
				},onUpdate:function(){
					if(options.callbacks && options.onUpdate){
						/* callbacks: whileScrolling */
						if(_cb("whileScrolling")){_mcs(); o.callbacks.whileScrolling.call(el[0]);}
					}
				},onComplete:function(){
					if(options.callbacks && options.onComplete){
						if(o.axis==="yx"){clearTimeout(mCSB_container[0].onCompleteTimeout);}
						var t=mCSB_container[0].idleTimer || 0;
						mCSB_container[0].onCompleteTimeout=setTimeout(function(){
							/* callbacks: onScroll, onTotalScroll, onTotalScrollBack */
							if(_cb("onScroll")){_mcs(); o.callbacks.onScroll.call(el[0]);}
							if(_cb("onTotalScroll") && scrollTo[1]>=limit[1]-totalScrollOffset && d.cbOffsets[0]){_mcs(); o.callbacks.onTotalScroll.call(el[0]);}
							if(_cb("onTotalScrollBack") && scrollTo[1]<=totalScrollBackOffset && d.cbOffsets[1]){_mcs(); o.callbacks.onTotalScrollBack.call(el[0]);}
							d.tweenRunning=false;
							mCSB_container[0].idleTimer=0;
							_onDragClasses(mCSB_dragger,"hide");
						},t);
					}
				}
			});
			/* checks if callback function exists */
			function _cb(cb){
				return d && o.callbacks[cb] && typeof o.callbacks[cb]==="function";
			}
			/* checks whether callback offsets always trigger */
			function _cbOffsets(){
				return [o.callbacks.alwaysTriggerOffsets || contentPos>=limit[0]+tso,o.callbacks.alwaysTriggerOffsets || contentPos<=-tsbo];
			}
			/* 
			populates object with useful values for the user 
			values: 
				content: this.mcs.content
				content top position: this.mcs.top 
				content left position: this.mcs.left 
				dragger top position: this.mcs.draggerTop 
				dragger left position: this.mcs.draggerLeft 
				scrolling y percentage: this.mcs.topPct 
				scrolling x percentage: this.mcs.leftPct 
				scrolling direction: this.mcs.direction
			*/
			function _mcs(){
				var cp=[mCSB_container[0].offsetTop,mCSB_container[0].offsetLeft], /* content position */
					dp=[mCSB_dragger[0].offsetTop,mCSB_dragger[0].offsetLeft], /* dragger position */
					cl=[mCSB_container.outerHeight(false),mCSB_container.outerWidth(false)], /* content length */
					pl=[mCustomScrollBox.height(),mCustomScrollBox.width()]; /* content parent length */
				el[0].mcs={
					content:mCSB_container, /* original content wrapper as jquery object */
					top:cp[0],left:cp[1],draggerTop:dp[0],draggerLeft:dp[1],
					topPct:Math.round((100*Math.abs(cp[0]))/(Math.abs(cl[0])-pl[0])),leftPct:Math.round((100*Math.abs(cp[1]))/(Math.abs(cl[1])-pl[1])),
					direction:options.dir
				};
				/* 
				this refers to the original element containing the scrollbar(s)
				usage: this.mcs.top, this.mcs.leftPct etc. 
				*/
			}
		},
		/* -------------------- */
		
		
		/* 
		CUSTOM JAVASCRIPT ANIMATION TWEEN 
		Lighter and faster than jquery animate() and css transitions 
		Animates top/left properties and includes easings 
		*/
		_tweenTo=function(el,prop,to,duration,easing,overwrite,callbacks){
			if(!el._mTween){el._mTween={top:{},left:{}};}
			var callbacks=callbacks || {},
				onStart=callbacks.onStart || function(){},onUpdate=callbacks.onUpdate || function(){},onComplete=callbacks.onComplete || function(){},
				startTime=_getTime(),_delay,progress=0,from=el.offsetTop,elStyle=el.style,_request,tobj=el._mTween[prop];
			if(prop==="left"){from=el.offsetLeft;}
			var diff=to-from;
			tobj.stop=0;
			if(overwrite!=="none"){_cancelTween();}
			_startTween();
			function _step(){
				if(tobj.stop){return;}
				if(!progress){onStart.call();}
				progress=_getTime()-startTime;
				_tween();
				if(progress>=tobj.time){
					tobj.time=(progress>tobj.time) ? progress+_delay-(progress-tobj.time) : progress+_delay-1;
					if(tobj.time<progress+1){tobj.time=progress+1;}
				}
				if(tobj.time<duration){tobj.id=_request(_step);}else{onComplete.call();}
			}
			function _tween(){
				if(duration>0){
					tobj.currVal=_ease(tobj.time,from,diff,duration,easing);
					elStyle[prop]=Math.round(tobj.currVal)+"px";
				}else{
					elStyle[prop]=to+"px";
				}
				onUpdate.call();
			}
			function _startTween(){
				_delay=1000/60;
				tobj.time=progress+_delay;
				_request=(!window.requestAnimationFrame) ? function(f){_tween(); return setTimeout(f,0.01);} : window.requestAnimationFrame;
				tobj.id=_request(_step);
			}
			function _cancelTween(){
				if(tobj.id==null){return;}
				if(!window.requestAnimationFrame){clearTimeout(tobj.id);
				}else{window.cancelAnimationFrame(tobj.id);}
				tobj.id=null;
			}
			function _ease(t,b,c,d,type){
				switch(type){
					case "linear": case "mcsLinear":
						return c*t/d + b;
						break;
					case "mcsLinearOut":
						t/=d; t--; return c * Math.sqrt(1 - t*t) + b;
						break;
					case "easeInOutSmooth":
						t/=d/2;
						if(t<1) return c/2*t*t + b;
						t--;
						return -c/2 * (t*(t-2) - 1) + b;
						break;
					case "easeInOutStrong":
						t/=d/2;
						if(t<1) return c/2 * Math.pow( 2, 10 * (t - 1) ) + b;
						t--;
						return c/2 * ( -Math.pow( 2, -10 * t) + 2 ) + b;
						break;
					case "easeInOut": case "mcsEaseInOut":
						t/=d/2;
						if(t<1) return c/2*t*t*t + b;
						t-=2;
						return c/2*(t*t*t + 2) + b;
						break;
					case "easeOutSmooth":
						t/=d; t--;
						return -c * (t*t*t*t - 1) + b;
						break;
					case "easeOutStrong":
						return c * ( -Math.pow( 2, -10 * t/d ) + 1 ) + b;
						break;
					case "easeOut": case "mcsEaseOut": default:
						var ts=(t/=d)*t,tc=ts*t;
						return b+c*(0.499999999999997*tc*ts + -2.5*ts*ts + 5.5*tc + -6.5*ts + 4*t);
				}
			}
		},
		/* -------------------- */
		
		
		/* returns current time */
		_getTime=function(){
			if(window.performance && window.performance.now){
				return window.performance.now();
			}else{
				if(window.performance && window.performance.webkitNow){
					return window.performance.webkitNow();
				}else{
					if(Date.now){return Date.now();}else{return new Date().getTime();}
				}
			}
		},
		/* -------------------- */
		
		
		/* stops a tween */
		_stopTween=function(){
			var el=this;
			if(!el._mTween){el._mTween={top:{},left:{}};}
			var props=["top","left"];
			for(var i=0; i<props.length; i++){
				var prop=props[i];
				if(el._mTween[prop].id){
					if(!window.requestAnimationFrame){clearTimeout(el._mTween[prop].id);
					}else{window.cancelAnimationFrame(el._mTween[prop].id);}
					el._mTween[prop].id=null;
					el._mTween[prop].stop=1;
				}
			}
		},
		/* -------------------- */
		
		
		/* deletes a property (avoiding the exception thrown by IE) */
		_delete=function(c,m){
			try{delete c[m];}catch(e){c[m]=null;}
		},
		/* -------------------- */
		
		
		/* detects left mouse button */
		_mouseBtnLeft=function(e){
			return !(e.which && e.which!==1);
		},
		/* -------------------- */
		
		
		/* detects if pointer type event is touch */
		_pointerTouch=function(e){
			var t=e.originalEvent.pointerType;
			return !(t && t!=="touch" && t!==2);
		},
		/* -------------------- */
		
		
		/* checks if value is numeric */
		_isNumeric=function(val){
			return !isNaN(parseFloat(val)) && isFinite(val);
		},
		/* -------------------- */
		
		
		/* returns element position according to content */
		_childPos=function(el){
			var p=el.parents(".mCSB_container");
			return [el.offset().top-p.offset().top,el.offset().left-p.offset().left];
		};
		/* -------------------- */
		
	
	
	
	
	/* 
	----------------------------------------
	PLUGIN SETUP 
	----------------------------------------
	*/
	
	/* plugin constructor functions */
	$.fn[pluginNS]=function(method){ /* usage: $(selector).mCustomScrollbar(); */
		if(methods[method]){
			return methods[method].apply(this,Array.prototype.slice.call(arguments,1));
		}else if(typeof method==="object" || !method){
			return methods.init.apply(this,arguments);
		}else{
			$.error("Method "+method+" does not exist");
		}
	};
	$[pluginNS]=function(method){ /* usage: $.mCustomScrollbar(); */
		if(methods[method]){
			return methods[method].apply(this,Array.prototype.slice.call(arguments,1));
		}else if(typeof method==="object" || !method){
			return methods.init.apply(this,arguments);
		}else{
			$.error("Method "+method+" does not exist");
		}
	};
	
	/* 
	allow setting plugin default options. 
	usage: $.mCustomScrollbar.defaults.scrollInertia=500; 
	to apply any changed default options on default selectors (below), use inside document ready fn 
	e.g.: $(document).ready(function(){ $.mCustomScrollbar.defaults.scrollInertia=500; });
	*/
	$[pluginNS].defaults=defaults;
	
	/* 
	add window object (window.mCustomScrollbar) 
	usage: if(window.mCustomScrollbar){console.log("custom scrollbar plugin loaded");}
	*/
	window[pluginNS]=true;
	
	$(window).load(function(){
		
		$(defaultSelector)[pluginNS](); /* add scrollbars automatically on default selector */
		
		/* extend jQuery expressions */
		$.extend($.expr[":"],{
			/* checks if element is within scrollable viewport */
			mcsInView:$.expr[":"].mcsInView || function(el){
				var $el=$(el),content=$el.parents(".mCSB_container"),wrapper,cPos;
				if(!content.length){return;}
				wrapper=content.parent();
				cPos=[content[0].offsetTop,content[0].offsetLeft];
				return 	cPos[0]+_childPos($el)[0]>=0 && cPos[0]+_childPos($el)[0]<wrapper.height()-$el.outerHeight(false) && 
						cPos[1]+_childPos($el)[1]>=0 && cPos[1]+_childPos($el)[1]<wrapper.width()-$el.outerWidth(false);
			},
			/* checks if element is overflowed having visible scrollbar(s) */
			mcsOverflow:$.expr[":"].mcsOverflow || function(el){
				var d=$(el).data(pluginPfx);
				if(!d){return;}
				return d.overflowed[0] || d.overflowed[1];
			}
		});
	
	});

}))}(jQuery,window,document));