var mySound;



soundManager.setup({
  // where to find flash audio SWFs, as needed
  url: '/chatapp/build/swf/',
  onready: function() {
    mySound = soundManager.createSound({
      url: '/chatapp/build/alert.mp3'
    });    
  }
});





var scrH = 0;

utils = {
 
        parse_str: function parse_str(pars,str){
            
            for (var key in pars) {
                var f = str.replace(key,pars[key]);
            }
            return f;

        },

        prepare_url: function prepare_url(str,lst){
            for (var key in lst) {
                str = str.replace(key,lst[key])
            }
            str = str.replace('[server]',local_config.signal_server)
            str = str.replace('[app_name]',local_config.app_name)
            if(str.indexOf("http://") == -1) {
                url = 'http://'+str
            } else {
                url = str
            }
            return url


        }

 
}
var isOldTitle = true;
var oldTitle = document.title;
var newTitle = "***You have a new message!***";
function blinkTitle() {
   
    document.title = isOldTitle ? oldTitle : newTitle;
    isOldTitle = !isOldTitle;
}


function scroolldown(){

     scrH = 0;
                setTimeout(function(){
                    $(document).find('.live_write').each(function(index, el) {
                        scrH = scrH + $(this).outerHeight(true);
                    });
                    $('.ms_bar').mCustomScrollbar("scrollTo", 'bottom');
                    //$('#chat_content').find('.ms_bar').stop().animate({
                    //    scrollTop: scrH
                    //}, 100);
                },400);
        

    
}




function log() {
  try {
    console.log.apply(console, arguments);                  //#1
  }
  catch(e) {                                                //#2
    try {
      opera.postError.apply(opera, arguments);              //#3
    }
    catch(e){
      alert(Array.prototype.join.call( arguments, " "));    //#4
    }
  }
}



function getCookie(name) {
  var matches = document.cookie.match(new RegExp(
    "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
  ));
  return matches ? decodeURIComponent(matches[1]) : undefined;
}








    
;/*"""
tpapp.js
````````
:author: Dimas zdimon77@gmail.com
    
*/ 
    var seconds = new Date().getTime() / 1000;
    document.cookie = "timer_update="+seconds;
    var app = angular.module('AngularChatApp', [
        'ngCookies',
        'ngSanitize',
        'ng-socket'
    ]).config(function($interpolateProvider,$httpProvider) {
    $interpolateProvider.startSymbol('[[');
    $interpolateProvider.endSymbol(']]');
    $httpProvider.defaults.xsrfCookieName = 'csrftoken';
    $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';
})

.factory('API', ['$http', function($http){
            return {
                        login: test
                           
                    }
            function test() {
                 
            } ;

           
    }])


    .controller('TestCtrl', function ($window, $rootScope, $scope, API, $http) {

      $scope.test_login = function(user_id,opponent_id){

        var url = utils.prepare_url(local_config.outapi.login,{'[user_id]': user_id});
        $http.get(url).then(function(res){
                var url =  $window.location.host + "/video-chat#/" + res.data.id + "/"+ opponent_id;
                //$window.location.href = url;
                //alert('sss');
                //$window.open (url,'_self',false);
                //window.open("http://www.w3schools.com");

                myWindow = window.open('//'+url, 'C-Sharpcorner',"_self","chat");
                myWindow.focus();
                setTimeout(function(){
                    myWindow.location.reload();
                }, 500);
                

            });
      }



    })


        .controller('NotifyCtrl', function ($window, $rootScope, $scope, API, Status, $http, $timeout) {

            $rootScope.notifies = {};
            
         

            $rootScope.$on('show_new_message_notification',function(event,data){
                   
                        console.log('show_new_message_notification');
                        console.log(data);
                        if($rootScope.gender=='w'){ document.getElementById('audio_alert').play(); }
                        $rootScope.notifies[data.data.id] = data.data;
                        $timeout(function(){ delete $rootScope.notifies[data.data.id] }, 15000);
                  
                   
            
            });

            $rootScope.$on('show_invite_notification',function(event,data){
                console.log('show_invite_notification');
                if(typeof $rootScope.notifies[data.data.id] == 'undefined') {
                    if(!$rootScope.active_contacts['user_'+data.data.opponent.user_id]){
                        if($rootScope.gender=='w'){document.getElementById('audio_alert').play(); }
                        $rootScope.notifies[data.data.id] = data.data;
                        $timeout(function(){ delete $rootScope.notifies[data.data.id] }, 15000);
                    }
                }
            }); 

            $rootScope.$on('show_multi_invite_notification',function(event,data){
                 console.log('show_multi_invite_notification1');
                
                    
                        if($rootScope.gender=='w'){document.getElementById('audio_alert').play(); }
                       
                            $rootScope.notifies[data.data.id] = data.data;
                            $timeout(function(){ delete $rootScope.notifies[data.data.id] }, 15000);
                        
                        
                    
                
            });


            $rootScope.$on('contact_activate',function(event,data){
                        $rootScope.active_contacts['user_'+data.user_id] = true;
            })  

            $rootScope.$on('contact_deactivate',function(event,data){
                       delete $rootScope.active_contacts['user_'+data.user_id];
            })              


            $scope.goToRoom = function(user_id){

                var url = $window.location.host + "/video-chat#/"+$rootScope.currentUserId+'/'+ user_id;
                //$window.location.href = url;
                //$window.open(url);

                myWindow = window.open('//'+url, 'C-Sharpcorner',"_self","chat");
                myWindow.focus();
                setTimeout(function(){
                    myWindow.location.reload();
                }, 500);

         
            }

            $scope.remove = function(id){
                delete $rootScope.notifies[id];
            }

            $scope.busy = function(opponent_id,notify_id){
                Status.sayBusy(opponent_id, function(result){
                    delete $rootScope.notifies[notify_id];
                })
               
            }

            $scope.close = function(opponent_id,notify_id){
                Status.sayClose(opponent_id, function(result){
                    delete $rootScope.notifies[notify_id];
                })
               
            }



         })



 .controller('AuthCtrl', function ($window, $rootScope, $scope, API, $http) {
      $scope.login = function(user_id){
        var url = utils.prepare_url(local_config.outapi.login,{'[user_id]': user_id});
        $http.get(url).then(function(res){
                var url = "http://" + $window.location.host + "#/" + res.data.user_id;  
                $window.location.href = url;
                console.log(res.data);
            });
      }
    
       /**
        *   
       **/
        

       $scope.tpalogin = function(user_id){
        var url = utils.prepare_url(local_config.outapi.login,{'[user_id]': user_id});
        $http.get(url).then(function(res){
                var url = "http://brides.localhost/";  
                $window.location.href = url;
                console.log(res.data);
            });
       }
     
    })


.controller('OnlineCtrl', function ($window, $rootScope, $scope, $http, WS ) {


       
        $scope.$on('update_users_online',function(event, data){
           
            $scope["user_online_"+1] = true;
            $scope["user_online_"+1+'_url'] = 'dddddd';
               
        })
     
    })

    .controller('OpenChatCtrl', function ($window, $rootScope, $scope, $http) {

         $scope.open_popup = function(user_id){
             var url = $window.location.host + "/video-chat#/"+ $rootScope.currentUserId;
             myWindow = $window.open('//'+url, 'C-Sharpcorner',"_self","chat");
             myWindow.focus();
                setTimeout(function(){
                    myWindow.location.reload();
                }, 500);
         }

    })

    .controller('ActionCtrl', function ($window, $rootScope, $scope, $http, Status) {
        
        $scope.invite = function(user_id){
              
                Status.checkAccessibility(user_id,function(result){
                    log(result);
                    if(result.status == 1) {
                         alert(result.message)
                    } else {
                         var url = $window.location.host + "/video-chat#/"+ $rootScope.currentUserId + '/' +user_id;  
                         //$window.location.href = url;  

                        myWindow = $window.open('//'+url, 'C-Sharpcorner',"_self","chat");
                        myWindow.focus();
                        setTimeout(function(){
                            myWindow.location.reload();
                        }, 500);
  
                    }
                
                })
        }

        $scope.inviteWithOpponentVideo = function(user_id){
                
                Status.checkAccessibility(user_id,function(result){
                    log(result);
                    if(result.status == 1) {
                         alert(result.message)
                    } else {
                         var url = $window.location.host + "/video-chat#/"+ $rootScope.currentUserId + '/' +user_id+'/ocam';  
                         //$window.location.href = url;    

                         myWindow = $window.open('//'+url, 'C-Sharpcorner',"_self","chat");
                         myWindow.focus();
                            setTimeout(function(){
                                myWindow.location.reload();
                            }, 500);

                    }
                
                })
        }

        $scope.inviteWithMyVideo = function(user_id){
         
                Status.checkAccessibility(user_id,function(result){
                    
                    if(result.status == 1) {
                         alert(result.message)
                    } else {
                         var url = $window.location.host + "/video-chat#/"+ $rootScope.currentUserId + '/' +user_id+'/mcam';  
                         //$window.location.href = url;    

                         myWindow = $window.open('//'+url, 'C-Sharpcorner',"_self","chat");
                         myWindow.focus();
                            setTimeout(function(){
                                myWindow.location.reload();
                            }, 500);

                    }
                
                })
            
        }
     
    })

.controller('ShowProfileCtrl', function ($window, $rootScope, $scope, $http, Contact) {
        
        $scope.init = function(user_id,opponent_id){
                
                Contact.markWatchingProfile(user_id,opponent_id,function(result){
                    log(result);
                })
        }
     
    })



    .directive('onlineIndicator', function() {

    /*"""
    .. function:: onlineIndicator

        Directive that insert online indicator into the DOM.

        :template: <p class="online">Online now</p>

        :param: directive watches uid attribute and change css class

        :using: <x-online-indicator uid="online.user_<?php echo $girl->login ?>"></x-online-indicator> 
    */     

    return {
        restrict: 'E',
        scope: {
            uid: '='
        },
        template: '<p class="online">Online now</p>',
        link: function(scope, element, attrs) {
            scope.$watch('uid', function(newValue, oldValue) {
                if (newValue==true){
                    element.find('p').text('Online').addClass('online').removeClass('offline');
                } else {
                    element.find('p').text('Offline').addClass('offline').removeClass('online');
                }

            });
        }
    }
})




    .directive('invitationLink', function($rootScope) {

    /*"""
    .. function:: invitationLink

        Directive that generate link to chat page using user and opponent identifiers.

        Current user id kips in $rootScope but opponent id takes from attribute 'uid'. 

        :using: <x-invitation-link uid=<?php echo $user.id ?>>Chat with me!</x-invitation-link>

       
    */     

    return {
        restrict: 'A',
        scope: {
            uid: '=opponent'
        },
        //template: '<p class="online">Online now</p>',
        link: function(scope, element, attrs) {
           var curhref = attrs['href'];
           attrs.$set('href',curhref+'/#/'+attrs.chatOpponent);
        }
    }
})


            .config(function($socketProvider){ 
                $socketProvider.configure({ address: local_config['ws_server'] }); 
            })

.run(function ($rootScope,$window,Online,$log, Auth, $socket) {

         
             $socket.on("open", function(event, data){
                console.log('open connection');

             });
             $socket.start();

            
            


         
            $rootScope.active_contacts = {};
            Auth.isauth(function(result){
                
                $rootScope.gender = result.gender;
                
                if(result.id>0) {
                        $rootScope.isAuthenticated = true;
                        $rootScope.currentUserId = result.id;
                        //WS.send({ action: 'connect', user_id: $rootScope.currentUserId, source: 'tpa_side' });
                        $socket.send('connect',JSON.stringify({user_id: $rootScope.currentUserId, source: 'tpa_side', tpa: 'tpa1com'}));
                        $rootScope.online = {};
                        $rootScope.activecam = {};
                          Online.getOnline(function(rezult){
                                for (user in rezult.user_list) {
                                    $rootScope.online['user_'+rezult.user_list[user]['user_id']] = true;
                                    $rootScope.activecam['user_'+rezult.user_list[user]['user_id']] = rezult.user_list[user]['is_camera_active'];
                                }       
                             }); 


                    } else { 
                        $rootScope.isAuthenticated = false;                   
                    }
            })



    

    //WS.send({ action: 'get_users_online'});

    $rootScope.$on('set_me_online',function(event,data){
        $rootScope.online['user_'+data.message.uid] = true;
        log('set online - '+data.message.uid)
    });


    $rootScope.$on('update_cam_indicators',function(event,data){
        
        $rootScope.activecam = {}
        for (var i = 0; i < data.data.length; i++) {
            $rootScope.activecam['user_'+data.data[i]] = true;
        }
       
    });



    $rootScope.$on('set_me_offline',function(event,data){
        delete $rootScope.online['user_'+data.message.uid];
        log('set offline - '+data.message.uid)
    });



})

;/**
 * @author Nirandas Thavorath <nirandas@gmail.com>
 * copyright 2014
 * MIT license
 */

angular.module("ng-socket", [])

.provider("$socket", function() {
    
    var options = {
        address: null,
        broadcastPrefix: "$socket.",
        reconnectInterval: 5000,
        receiveInterval: 500,
        parser: null,
        formatter: null,
        logger: function() {}
    };

    function parser(msg) {
        return angular.fromJson(msg);
    }

    function formatter(event, data) {
        return angular.toJson([event, data]);
    }

    var queue = [];
    var fireQueue = [];
    var firePromise = null;
    var socket;
    var socketConnected;

    function socketFactory($rootScope, $timeout) {

        /**
         * attaches listener on $rootScope or to the provided scope
         */
        function on(event, listener, scope) {
            return (scope || $rootScope).$on(options.broadcastPrefix + event, listener);
        }

        /**
sends the message if connected or queues it for later
*/
        function send(event, data) {
            var message = (options.formatter || formatter)(event, data);
            if (socketConnected) {
                socket.send(message);
            } else {
                queue.push(message);
            }
        }

        function newSocket() {
            socketConnected = false;
            socket = null;
            if (!window.SockJS) {
                return options.logger(new Error("Must include SockJS for ng-socket to work"));
            }
            if (!options.address) {
                return options.logger(new Error("Must configure the address"));
            }
            socket = new SockJS(options.address);
            
            socket.onopen = function() {
                
                socketConnected = true;
                $rootScope.$broadcast(options.broadcastPrefix + "open");
                for (var i in queue) {
                    socket.send(queue[i]);
                }
                queue = [];
            };

            socket.onmessage = function(msg) {
                
                msg = (options.parser || parser)(msg.data);
                if (!Array.isArray(msg) || msg.length !== 2) {
                    return options.logger(new Error("Invalid message " + msg.toString()));
                }

                fire(msg[0], msg[1]);
            };

            socket.onclose = function() {
                socketConnected = false;
                socket = null;
                $timeout(newSocket, options.reconnectInterval);
            };

        }

        function fireAll() {
            for (var i in fireQueue) {
                $rootScope.$broadcast(options.broadcastPrefix + fireQueue[i].event, fireQueue[i].data);
            }
            fireQueue = [];
        }

        function fire(event, data) {
            fireQueue.push({
                event: event,
                data: data
            });
            if (!firePromise) {
                firePromise = $timeout(fireAll, options.receiveInterval, true)['finally'](function() {
                    firePromise = null;
                });
            }
        }

        return {
            start: newSocket,
            send: send,
            on: on,
            socket: function() {
                return socket;
            }
        };
    }


    this.$get = socketFactory;

    this.configure = function(opt) {
        angular.extend(options, opt);
    };

});

;(function () {
  'use strict';

  angular
    .module('AngularChatApp')
    .factory('Online', ['$http', '$rootScope', function($http, $rootScope){
            return {
                        setOnline: setOnline,
                        setOffline: setOffline,
                        addToOnline: addToOnline,
                        removeFromOnline: removeFromOnline,
                        getOnline: getOnline,
                        getOnlineIds: getOnlineIds,
                        getOnlineExceptContact: getOnlineExceptContact,
                        sendMessage: sendMessage               
                    }

            function addToOnline(profile) {
                 
            } ;

            function removeFromOnline(user_id) {
                 alert('remove '+ user_id);
                 log($rootScope.online_user_list);
                    for (var i = 0; i < $rootScope.online_user_list.length; i++) {
                        if(user_id == $rootScope.online_user_list[i].user_id) {
                            $rootScope.online_user_list.splice(i,1);  
                        }
                        log($rootScope.online_user_list[i].user_id);
                    }                  
            } ;


            function setOnline() {
                 
            } ;

            function setOffline() {

            } ;

            function getOnlineExceptContact(callback) {
             
                var url = utils.prepare_url(apiconf.api.get_online_except_contact.url,{'[user_id]':$rootScope.currentUserId});
                return $http.get(url).success(callback); 

            };


            function getOnline(callback) {
             
                var url = utils.prepare_url(apiconf.api.get_online.url,{'[user_id]':$rootScope.currentUserId});
                return $http.get(url).success(callback); 

            };

            function getOnlineIds(callback) {
             
                var url = utils.prepare_url(apiconf.api.get_online_ids.url,{'[user_id]':$rootScope.currentUserId});
                return $http.get(url).success(callback); 

            };



            /*"""
            .. function:: sendMessage()

            Send message to inbox by http request to the server.
               
            */

            function sendMessage(owner_id,contact_id,message,callback) {
                             var url = utils.prepare_url(apiconf.api.send_message.url,{});
                             var data = {'app_name':local_config.app_name, 'owner_id':$rootScope.currentUserId,'contact_id':contact_id,  'message': message}
                             return $http.post(url,data).success(callback);
            };



    }]);


})();
;(function () {
  'use strict';

  angular
    .module('AngularChatApp')
    .factory('Contact', ['$http','$rootScope', function($http,$rootScope){
            return {
                        getContactList: getContactList,
                        getContactListIds: getContactListIds,
                        delContact: delContact,
                        deleteAll: deleteAll,
                        addContact: addContact,
                        markWatchingProfile: markWatchingProfile,
                        sendInvitation: sendInvitation
                    }

            function markWatchingProfile(user_id,opponent_id,callback) {
                var url = utils.prepare_url(apiconf.api.mark_watching_profile.url,{'[user_id]':user_id, '[opponent_id]':opponent_id});
                return $http.get(url).success(callback); 

            };

            function getContactList(callback) {
                var url = utils.prepare_url(apiconf.api.get_contact_list.url,{'[user_id]':$rootScope.currentUserId});
                return $http.get(url).success(callback); 

            };

            function getContactListIds(callback) {
                var url = utils.prepare_url(apiconf.api.get_contact_list_ids.url,{'[user_id]':$rootScope.currentUserId});
                return $http.get(url).success(callback); 

            };

            function delContact(contact_id,callback) {
                 var url = utils.prepare_url(apiconf.api.del_contact.url,{'[owner_id]':$rootScope.currentUserId, '[contact_id]':contact_id});
                 return $http.get(url).success(callback);
            };

            function deleteAll(callback) {
                 var url = utils.prepare_url(apiconf.api.del_all_contacts.url,{'[owner_id]':$rootScope.currentUserId});
                 return $http.get(url).success(callback);
            };
            function addContact(contact_id,callback) {
                             var url = utils.prepare_url(apiconf.api.add_contact.url,{'[owner_id]':$rootScope.currentUserId,'[contact_id]':contact_id});
                             return $http.get(url).success(callback);
            };


            /*"""
            .. function:: sendInvitation()

            Send invitation message to men by http request to server.
               
            */

            function sendInvitation(owner_id,contact_id,message,callback) {
                             var url = utils.prepare_url(apiconf.api.send_invitation.url,{});
                             var data = {'app_name':local_config.app_name, 'owner_id':$rootScope.currentUserId,'contact_id':contact_id,  'message': message}
                             return $http.post(url,data).success(callback);
            };


    }]);


})();
;(function () {
  'use strict';

  angular
    .module('AngularChatApp')
    .factory('Status', ['$http', '$rootScope', function($http, $rootScope){
            return {
                        sayBusy: sayBusy,
                        sayClose: sayClose,
                        setInvisible: setInvisible,
                        setVisible: setVisible,
                        declineInvitation: declineInvitation,
                        acceptInvitation: acceptInvitation,
                        restartServer: restartServer,
                        checkAccessibility: checkAccessibility               
                    }
            function sayBusy(opponent_id,callback) {

                var url = utils.prepare_url(apiconf.api.say_busy.url,{
                                                                        '[user_id]':$rootScope.currentUserId,
                                                                        '[opponent_id]':opponent_id
                                                                     });
                return $http.get(url).success(callback); 

                 
            } ;

            function restartServer(callback) {


                var url = utils.prepare_url(apiconf.api.restart_websocket.url);
                return $http.get(url).success(callback); 

             


                 
            } ;


            function sayClose(opponent_id,callback) {

                var url = utils.prepare_url(apiconf.api.say_close.url,{
                                                                        '[user_id]':$rootScope.currentUserId,
                                                                        '[opponent_id]':opponent_id
                                                                     });
                return $http.get(url).success(callback); 

                 
            } ;


            function setInvisible() {

            } ;

            function setVisible() {

            } ;


            function declineInvitation(callback) {
             
                var url = utils.prepare_url(apiconf.api.decline_invitation.url,{'[user_id]':$rootScope.currentUserId});
                return $http.get(url).success(callback);

            };


            function acceptInvitation(callback) {
             
                var url = utils.prepare_url(apiconf.api.accept_invitation.url,{'[user_id]':$rootScope.currentUserId});
                return $http.get(url).success(callback);

            };

            function checkAccessibility(user_id,callback) {
             
                var url = utils.prepare_url(apiconf.api.check_accessebility.url,{'[user_id]':user_id});
                return $http.get(url).success(callback);

            };




    }]);


})();
;(function () {
  'use strict';

  angular
    .module('AngularChatApp')
    .factory('Auth', Auth);

  Auth.$inject = ['$http', '$window', '$rootScope'];

  function Auth($http, $window, $rootScope) {

    var Auth = {
      login: login,
      logout: logout,
      register: register,
      isauth: isauth,
      getFavorites: getFavorites,
      initialization: initialization
    };
    
    return Auth;

    /*"""
    .. function:: login(username, password)

        :param string username: Login
        :param string password: Password
        :returns: Promice.
    */    

    function login(username, password) {
      return $http.post('/api/login/', {
        username: username, password: password
      });
 
    }



    function logout(callback) {
      return $http.post('/api/logout/').success(callback); 
    }

    function isauth(callback) {
      var url = utils.prepare_url(local_config.outapi.is_auth,{})
      return $http.get(url).success(callback); 
    }


    function initialization(opponent_id,callback) {
      var url = utils.prepare_url(apiconf.api.initialization.url,{'[contact_id]':opponent_id, '[user_id]':$rootScope.currentUserId, '[app_name]': local_config.app_name})
      return $http.get(url).success(callback); 
    }


    function getFavorites(callback) {
      var url = utils.prepare_url(apiconf.api.get_favorites.url,{'[user_id]':$rootScope.currentUserId, '[app_name]': local_config.app_name})
      return $http.get(url).success(callback); 
    }



    function register(username, password, email) {
        return $http.post('/api/register/', {
        username: username, password: password, email: email
      });
    }


  

   
  }



})();
;(function () {
  'use strict';

  angular
    .module('AngularChatApp')
    .run(function( $socket, $rootScope){

                $socket.on("put_me_in_room", function(event, data){
                    $rootScope.$broadcast("put_me_in_room",data);

                });


                $socket.on("show_message", function(event, data){
                    $rootScope.$broadcast("show_message",data);

                });


                $socket.on("ping", function(event, data){
                    $rootScope.$broadcast("ping",data);

                });


                $socket.on("show_new_message_notification", function(event, data){
                    $rootScope.$broadcast("show_new_message_notification",data);

                });


                $socket.on("update_contact", function(event, data){
                    $rootScope.$broadcast("update_contact",data);

                });


                $socket.on("add_me_in_contact_list", function(event, data){
                    $rootScope.$broadcast("add_me_in_contact_list",data);

                });


                $socket.on("add_opponent_in_my_contact_list", function(event, data){
                    $rootScope.$broadcast("add_opponent_in_my_contact_list",data);

                });


                $socket.on("mark_watching_profile", function(event, data){
                    $rootScope.$broadcast("mark_watching_profile",data);

                });

                $socket.on("show_inv_win", function(event, data){
                    $rootScope.$broadcast("show_inv_win",data);

                });

                $socket.on("update_users_online", function(event, data){
                    $rootScope.$broadcast("update_users_online",data);

                });

                $socket.on("set_me_online", function(event, data){
                    $rootScope.$broadcast("set_me_online",data);

                });

                $socket.on("update_cam_indicators", function(event, data){
                    $rootScope.$broadcast("update_cam_indicators",data);

                });

                $socket.on("say_busy", function(event, data){
                    $rootScope.$broadcast("say_busy",data);

                });

                $socket.on("close_room", function(event, data){
                    $rootScope.$broadcast("close_room",data);

                });

                $socket.on("i_started_watching_you", function(event, data){
                    $rootScope.$broadcast("i_started_watching_you",data);

                });

                $socket.on("update_balance", function(event, data){
                    $rootScope.$broadcast("update_balance",data);

                });

                $socket.on("i_stopted_watching_you", function(event, data){
                    $rootScope.$broadcast("i_stopted_watching_you",data);

                });

                $socket.on("alert_mic_on", function(event, data){
                    $rootScope.$broadcast("alert_mic_on",data);

                });

                $socket.on("alert_mic_off", function(event, data){
                    $rootScope.$broadcast("alert_mic_off",data);

                });

                $socket.on("only_mic_on", function(event, data){
                    $rootScope.$broadcast("only_mic_on",data);

                });

                $socket.on("only_mic_off", function(event, data){
                    $rootScope.$broadcast("only_mic_off",data);

                });

                $socket.on("opponent_mic_on", function(event, data){
                    $rootScope.$broadcast("opponent_mic_on",data);

                });

                $socket.on("opponent_mic_off", function(event, data){
                    $rootScope.$broadcast("opponent_mic_off",data);

                });

                $socket.on("show_multi_invite_notification", function(event, data){
                    $rootScope.$broadcast("show_multi_invite_notification",data);

                });

                $socket.on("show_feather", function(event, data){
                    $rootScope.$broadcast("show_feather",data);

                });

                $socket.on("show_invite_notification", function(event, data){
                    $rootScope.$broadcast("show_invite_notification",data);

                });


                $socket.on("set_me_offline", function(event, data){
                    $rootScope.$broadcast("set_me_offline",data);

                });


                $socket.on("contact_activate", function(event, data){
                    $rootScope.$broadcast("contact_activate",data);

                });


                $socket.on("contact_deactivate", function(event, data){
                    $rootScope.$broadcast("contact_deactivate",data);

                });

                $socket.on("close_video", function(event, data){
                    $rootScope.$broadcast("close_video",data);

                });

                $socket.on("put_user_to_room", function(event, data){
                    $rootScope.$broadcast("put_user_to_room",data);

                });




    });


})();
;
apiconf = {
        'api': 
        {


        'logout':
            {
                'type': 'ajax',
                'name': 'logout',
                'url':  '[server]/api/logout'
            },


        

        'initialization':
            {
                'type': 'ajax',
                'name': 'initialization',
                'url':  '[server]/api/[app_name]/[user_id]/[contact_id]/initialization'
            }, 

        'update_user':
            {
                'type': 'ajax',
                'name': 'update_user',
                'url':  '[server]/api/[app_name]/[user_id]/update_user',
                'responce': '{"status": 0, "message": "ok", }]'
            }, 

        'set_connected':
            {
                'type': 'ajax',
                'name': 'set_connected',
                'url':  '[server]/api/[app_name]/[user_id]/[source]/set_connected',
                'responce': '{"status": 0, "message": "ok", }]'
            }, 

        'set_disconnected':
            {
                'type': 'ajax',
                'name': 'set_disconnected',
                'url':  '[server]/api/[app_name]/[user_id]/[source]/set_disconnected',
                'responce': '{"status": 0, "message": "ok", }]'
            },  
 

        'get_online':
            {
                'type': 'ajax',
                'name': 'get_online',
                'url':  '[server]/api/[app_name]/[user_id]/get_online',
                'responce': '{"status": 0, "message": "ok", "user_list": [{...}]'
            },  

        'get_online_ids':
            {
                'type': 'ajax',
                'name': 'get_online_ids',
                'url':  '[server]/api/[app_name]/[user_id]/get_online_ids',
                'responce': '{"status": 0, "message": "ok", "user_list": [150043,150042]'
            },  


        'get_online_except_contact':
            {
                'type': 'ajax',
                'name': 'get_online_except_contact',
                'url':  '[server]/api/[app_name]/[user_id]/get_online_except_contact',
                'responce': '{"status": 0, "message": "ok", "user_list": [{...}]'
            },  



        'get_contact_list':
            {
                'type': 'ajax',
                'name': 'get_contact_list',
                'url':  '[server]/api/[app_name]/[user_id]/get_contact_list'
            },

        'get_contact_list_ids':
            {
                'type': 'ajax',
                'name': 'get_contact_list_ids',
                'url':  '[server]/api/[app_name]/[user_id]/get_contact_list_ids'
            },


        'mark_watching_profile':
            {
                'type': 'ajax',
                'name': 'mark_watching_profile',
                'url':  '[server]/api/[app_name]/[user_id]/[opponent_id]/mark_watching_profile'
            },


        'get_profile_from_tpa':
            {
                'type': 'ajax',
                'name': 'get_profile_from_tpa',
                'url':  '[server]/api/[app_name]/get_profile_from_tpa/[user_id]'
            },

        'get_profile':
            {
                'type': 'ajax',
                'name': 'get_profile',
            },   

        'invite':
            {
                'type': 'ajax',
                'name': 'invite',
                'url':  '[server]/api/[app_name]/[owner_id]/[contact_id]/invite'
            },

        'add_contact':
            {
                'type': 'ajax',
                'name': 'add_contact',
                'url':  '[server]/api/[app_name]/[owner_id]/[contact_id]/add_contact'
            },  

        'del_contact':
            {
                'type': 'ajax',
                'name': 'del_contact',
                'url':  '[server]/api/[app_name]/[owner_id]/[contact_id]/del_contact'
            },
  

        'del_all_contacts':
            {
                'type': 'ajax',
                'name': 'del_all_contacts',
                'url':  '[server]/api/[app_name]/[owner_id]/del_all_contacts'
            },

        'get_room_or_create':
            {
                'type': 'ajax',
                'name': 'get_room_or_create',
                'url':  '[server]/api/[app_name]/[caler_id]/[opponent_id]/get_room_or_create'
            },

        'save_message':
            {
                'type': 'ajax[POST]',
                'name': 'save_message',
                'url':  '[server]/api/save_message',
                'params': 'app_name,owner_id,room_id,message'
            },

        'send_invitation':
            {
                'type': 'ajax[POST]',
                'name': 'send_invitation',
                'url':  '[server]/api/send_invitation',
                'params': 'app_name,owner_id,opponent_id,message'
            },

        'send_message':
            {
                'type': 'ajax[POST]',
                'name': 'send_message',
                'url':  '[server]/api/send_message',
                'params': 'app_name,owner_id,opponent_id,message'
            },

        'multi_invitation':
            {
                'type': 'ajax[POST]',
                'name': 'multi_invitation',
                'url':  '[server]/api/multi_invitation',
                'params': 'app_name,owner_id,opponent_id,message'
            },


        'get_messages':
            {
                'type': 'ajax',
                'name': 'get_messages',
                'url':  '[server]/api/[room_id]/get_messages'
            } ,


        'show_my_cam':
            {
                'type': 'ajax',
                'name': 'show_my_cam',
                'url':  '[server]/api/[user_id]/[app_name]/show_my_cam'
            } ,


        'hide_my_cam':
            {
                'type': 'ajax',
                'name': 'hide_my_cam',
                'url':  '[server]/api/[user_id]/[app_name]/hide_my_cam'
            } ,

        'turn_mic_on':
            {
                'type': 'ajax',
                'name': 'turn_mic_on',
                'url':  '[server]/api/[user_id]/[app_name]/turn_mic_on'
            } ,

        'turn_mic_off':
            {
                'type': 'ajax',
                'name': 'turn_mic_off',
                'url':  '[server]/api/[user_id]/[app_name]/turn_mic_off'
            } ,

        'show_opponent_cam':
            {
                'type': 'ajax',
                'name': 'show_opponent_cam',
                'url':  '[server]/api/[user_id]/[opponent_id]/[app_name]/[room_id]/show_opponent_cam'
            } ,

        'hide_opponent_cam':
            {
                'type': 'ajax',
                'name': 'hide_opponent_cam',
                'url':  '[server]/api/[user_id]/[opponent_id]/[app_name]/[room_id]/hide_opponent_cam'
            }, 


        'show_feather':
            {
                'type': 'ajax',
                'name': 'show_feather',
                'url':  '[server]/api/[app_name]/[room_id]/[opponent_id]/show_feather'
            },

        'close_chat_room':
            {
                'type': 'ajax',
                'name': 'close_chat_room',
                'url':  '[server]/api/[app_name]/[room_id]/[opponent_id]/[user_id]/close_chat_room'
            },


        'block_user':
            {
                'type': 'ajax',
                'name': 'block_user',
                'url':  '[server]/api/[app_name]/[user_id]/[block_id]/block_user'
            },


        'unblock_user':
            {
                'type': 'ajax',
                'name': 'unblock_user',
                'url':  '[server]/api/[app_name]/[user_id]/[block_id]/unblock_user'
            },

        'check_block_user':
            {
                'type': 'ajax',
                'name': 'check_block_user',
                'url':  '[server]/api/[app_name]/[user_id]/[block_id]/check_block_user'
            },


        'say_busy':
            {
                'type': 'ajax',
                'name': 'say_busy',
                'url':  '[server]/api/[app_name]/[user_id]/[opponent_id]/say_busy'
            },

        'say_close':
            {
                'type': 'ajax',
                'name': 'say_close',
                'url':  '[server]/api/[app_name]/[user_id]/[opponent_id]/say_close'
            },


        'accept_invitation':
            {
                'type': 'ajax',
                'name': 'accept_invitation',
                'url':  '[server]/api/[app_name]/[user_id]/accept_invitation'
            },

        'decline_invitation':
            {
                'type': 'ajax',
                'name': 'decline_invitation',
                'url':  '[server]/api/[app_name]/[user_id]/decline_invitation'
            },

        'check_accessebility':
            {
                'type': 'ajax',
                'name': 'check_accessebility',
                'url':  '[server]/api/[app_name]/[user_id]/check_accessebility'
            },


        'charge_request':
            {
                'type': 'ajax[POST]',
                'name': 'charge_request',
                'url':  '[server]/api/[app_name]/charge_request'
            },


        'get_favorites':
            {
                'type': 'ajax',
                'name': 'get_favorites',
                'url':  '[server]/api/[app_name]/[user_id]/get_favorites'
            },

        'add_favorite':
            {
                'type': 'ajax',
                'name': 'add_favorite',
                'url':  '[server]/api/[app_name]/[user_id]/[opponent_id]/add_favorite'
            },

        'del_favorite':
            {
                'type': 'ajax',
                'name': 'del_favorite',
                'url':  '[server]/api/[app_name]/[user_id]/[opponent_id]/del_favorite'
            },


        'alert_mic_on':
            {
                'type': 'ajax',
                'name': 'alert_mic_on',
                'url':  '[server]/api/[app_name]/[user_id]/[opponent_id]/alert_mic_on'
            },

        'alert_mic_off':
            {
                'type': 'ajax',
                'name': 'alert_mic_off',
                'url':  '[server]/api/[app_name]/[user_id]/[opponent_id]/alert_mic_off'
            },


        'only_mic_on':
            {
                'type': 'ajax',
                'name': 'only_mic_on',
                'url':  '[server]/api/[app_name]/[user_id]/[opponent_id]/only_mic_on'
            },

        'only_mic_off':
            {
                'type': 'ajax',
                'name': 'only_mic_off',
                'url':  '[server]/api/[app_name]/[user_id]/[opponent_id]/only_mic_off'
            },

        'hide_opponent_only_mic':
            {
                'type': 'ajax',
                'name': 'hide_opponent_only_mic',
                'url':  '[server]/api/[user_id]/[opponent_id]/[app_name]/[room_id]/hide_opponent_only_mic'
            },

        'show_opponent_only_mic':
            {
                'type': 'ajax',
                'name': 'show_opponent_only_mic',
                'url':  '[server]/api/[user_id]/[opponent_id]/[app_name]/[room_id]/show_opponent_only_mic'
            },

        'opponent_mic_on':
            {
                'type': 'ajax',
                'name': 'opponent_mic_on',
                'url':  '[server]/api/[app_name]/[user_id]/[opponent_id]/[room_id]/opponent_mic_on'
            },

        'opponent_mic_off':
            {
                'type': 'ajax',
                'name': 'opponent_mic_off',
                'url':  '[server]/api/[app_name]/[user_id]/[opponent_id]/[room_id]/opponent_mic_off'
            },


        'get_prices':
            {
                'type': 'ajax',
                'name': 'get_prices',
                'url':  '[server]/api/[app_name]/get_prices'
            },


        'set_prices':
            {
                'type': 'ajax',
                'name': 'get_prices',
                'url':  '[server]/api/[app_name]/set_prices'
            },


        'get_balance':
            {
                'type': 'outapi',
                'name': 'get_balance',
                'url':  '{{ tpa.get_balance_url }}'
            },



        'billing_page':
            {
                'type': 'outapi',
                'name': 'billing_page',
                'url':  '{{ tpa.billing_page }}'
            },

        'save_translation':
            {
                'type': 'ajax',
                'name': 'save_translation',
                'url':  '[server]/api/[app_name]/save_translation'
            },  

        'restart_websocket':
            {
                'type': 'ajax',
                'name': 'restart_websocket',
                'url':  '[server]/api/restart_websocket'
            }, 


        }
    
}
;local_config = 
    {
        'app_id': 1,
        'app_name': 'tpa1com',
        'signal_server': 'chat.localhost',
//        'signal_server': 'brides.mirbu.com',
        'chat_url': 'chat.localhost/video-chat',
        'ws_server': 'http://localhost:5555/info',
        'google_translator_key': 'AIzaSyDVCSghi6KVFRITwZTzXKVoRmyLn7WPStM',
        outapi: {
            'is_auth': 'http://chat.localhost/chat-request/isLogin',
            'login':   'http://chat.localhost/chat-request/login?id=[user_id]'
        },
        
      
        
    }
