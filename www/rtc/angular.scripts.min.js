    var app = angular.module('AngularChatApp', [
        'ui.router',
        'restangular',
        'app.controllers',
        'ngCookies',
        'ngSanitize',
        'ngWebSocket' 
    ]).config(function($interpolateProvider,$httpProvider) {
    $interpolateProvider.startSymbol('[[');
    $interpolateProvider.endSymbol(']]');
    $httpProvider.defaults.xsrfCookieName = 'csrftoken';
    $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';
    $httpProvider.defaults.useXDomain = true;
    delete $httpProvider.defaults.headers.common['X-Requested-With'];
})


.run(function ($rootScope, Auth, $window, WS, Online) {

           
            Auth.isauth(function(result){
                if(result.id>0) {

                        $rootScope.isAuthenticated = true;  
                        $rootScope.currentUserId = result.id;
                        $rootScope.currentUsername = result.id;
                        $rootScope.balance = result.balance;
                        $rootScope.gender = result.gender;
                        $rootScope.billing_page = apiconf.api.billing_page.url;
                        $rootScope.$broadcast('rootScope_ready');

                       
                        $rootScope.emptyAccountAlert = function(){
                                     $.magnificPopup.open({
                                      items: {
                                        src: '#empty_account_alert'
                                      },
                                      type: 'inline'
                                    }, 0);           
                            }


                        WS.send({ action: 'connect', user_id: $rootScope.currentUserId });
                   
                                                 
                       

                    } else { $rootScope.isAuthenticated = false;}
            })
        
                
                 
                  $rootScope.online = {}
                  Online.getOnline(function(rezult){
                    for (user in rezult.user_list) {
                        $rootScope.online['user_'+rezult.user_list[user]['user_id']] = true;
                    }       
                 }); 

})

;

angular.module('app.controllers', [])
        
    .controller('RegistrationController', function($scope,Auth) {

      $scope.submit = function() {
        Auth.register($scope.model.username,$scope.model.password).success(function(result) {
            $scope.result = result 
            console.log($scope.result);
        });


        

      };

   


    })





 

 .controller('InvitationCtrl', function ($scope, WS, $rootScope) {
        $scope.ws = WS;
        $scope.show_intitation = true;
        $scope.close = function(){
            $scope.show_intitation = false;
        }
    })




 .controller('MyVideoCtrl', function ($scope, WS) {
      $scope.ws = WS;
    })

 .controller('OpponentVideoCtrl', function ($scope, WS) {
      $scope.ws = WS;
    })





; 


app.controller('RoomCtrl', function ($scope, WS, Room, $rootScope, GoogleTranslate, $log, $http, $window) {
        $scope.ws = WS;
        scroolldown();

        $scope.stopChat = function(opponent_id){

            Room.closeRoom(opponent_id,function(result){
                var url = "http://" + local_config.chat_url  + "#/" + $rootScope.currentUserId;  
                $scope.hasActiveRoom = false;
                $window.location.href = url;       
                $scope.room_just_closed = true;        
            })
            
        }

                $scope.translate = function(){
            var message = $(document).find('#chat_message').html();
            $log.debug(message);
            GoogleTranslate.translate('ru','en',message).then(function(resulf){
              $(document).find('#chat_message').html(resulf).focus();
                
            });
            
            
        };

                $scope.sendMessage = function(){

            var message = $(document).find('#chat_message').html()

            chm = message.replace('<br>','');
            if(chm.length>0) {

           Room.sendMessage($scope.room_id, message, $rootScope.currentUserId, $scope.room_participants, $rootScope.gender, function(result) {
              log(message.length);
              if(result.status==1) {
                    $rootScope.emptyAccountAlert();
                } else { 
                    $(document).find('#chat_message').html("");
                } 
              
            });

            }
        };






                $scope.$on('show_message', function (event, data) { 


              if($rootScope.new_messages === 'undefined') $rootScope.new_messages = []
              
              console.log(data);

              if(data.message.message.owner.user_id!=$rootScope.currentUserId){
                    document.getElementById('audio_alert').play();
                }

              if(data.message.message.room_id != $scope.room_id){
                    
                    $rootScope.new_messages['user_'+data.message.message.owner.user_id] = true;
                    console.log($scope.new_messages['user_'+data.message.message]);

              } else {
                     $rootScope.feather = false;

                      if($scope.chat_translate==true){

                             GoogleTranslate.translate('en','ru',data.message.message.message).then(function(resulf){
                             data.message.message.translated_message = resulf;
                             $scope.messages.push(data.message.message);
                            });


                       } else {

                        $scope.messages.push(data.message.message);

                       }
              }

               scroolldown();      
                

            
        });

        
        

        

        $scope.$on('put_me_in_room', function (event, data) {
           var text_changed = 0;
           $rootScope.feather = false;
           $scope.room_just_closed = false;
           $scope.room_participants = [local_config.app_name+'_'+data.owner_id, local_config.app_name+'_'+data.contact_id];
           $rootScope.room_participants = [local_config.app_name+'_'+data.owner_id, local_config.app_name+'_'+data.contact_id];
           $scope.room_id = data.room_id;
           $rootScope.room_id = data.room_id;
           $scope.hasActiveRoom=true;
           if(data.contact.is_camera_active) $rootScope.isOpponentVideoActive = true;
           Room.getUserInfo(data.contact_id,function(result){ 
            $scope.opponent = result.user_profile
         });
    
           Room.getMessages(data.room_id, function(result) {
              
              $scope.messages = result.message;
              setTimeout(function(){scroolldown(),1000});

              $(document).find('#chat_message').bind("DOMSubtreeModified",function(){
                  if (text_changed==0){
               
                       Room.showFeather(data.contact.user_id, function(result) {

                        
                       });
                  }
                  text_changed = 1;
                });

         });

        });

        $rootScope.$on('show_feather',function(event,data){

            if(data.room_id==$rootScope.room_id){
             $rootScope.feather = true;
            }
        })


        $rootScope.$on('close_room',function(event,data){
           $scope.room_just_closed = true;
           var url = "http://" + local_config.chat_url  + "#/" + $rootScope.currentUserId;  
           $scope.hasActiveRoom = false;
           $window.location.href = url;      
        })
        

        $rootScope.$on('show_invite_notification',function(event,data){
            
            if(typeof $rootScope.chat_invitation == 'undefined' || $rootScope.chat_invitation == false)
            {
                $rootScope.notifies[data.data.id] = data.data;
            }
            log($rootScope.notifies);

        })



    })

.directive('opponentInfo', function() {

  return {
    scope: false,
    templateUrl: 'static/templates/directives/OpponentInfo.html'
  };
})

.directive('ngReallyClick', [function() {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            element.bind('click', function() {
                var message = attrs.ngReallyMessage;
                if (message && confirm(message)) {
                    scope.$apply(attrs.ngReallyClick);
                }
            });
        }
    }
}])


;
    
 app.controller('UserOnlineCtrl',
        
        function ($scope, Online , WS, Contact, Room, $rootScope, $window) {
     
         
   
        $scope.update = function(){

          Online.getOnlineExceptContact(function(rezult){
                $scope.user_list = rezult.user_list;
            }) 
        };

        $scope.update();

        $scope.$on('update_users_online', function (event, data) {   
           $scope.update();
        });
        
        

      $scope.addContact = function(contact_id){
          Contact.addContact(contact_id,function(rezult){
            $rootScope.$emit('update_contact');
            })
        };

        $scope.invite = function(contact_id){
            
            var url = "http://" + local_config.chat_url + "#/" + $rootScope.currentUserId+'/'+contact_id;
            $window.location.href = url;
            Room.invite(contact_id,function(rezult){
                $rootScope.$broadcast('update_users_online');
            }); 
        }

    })
;app.controller('ContactListCtrl', function ($scope, Contact, $rootScope, $window, Room, $log) {




         

      $scope.$on('rootScope_ready',function(event, data){
            $scope.update();
      })


         

      $rootScope.$on('update_contact',function(event, data){
            $scope.update();
      })


         

      $rootScope.$on('set_me_online',function(event, data){
           
           $rootScope.online['user_'+data.message.uid] = true;
                      
      })


              $rootScope.$on('add_me_in_contact_list',function(event, data){


           Contact.addContact(data.message.user_id,function(){

               $scope.update();

           })

      })


         

      $rootScope.$on('set_me_offline',function(event, data){
           
           $rootScope.online['user_'+data.message.uid] = false;
                      
      })


         

      $scope.delete = function(contact_id){
          Contact.delContact(contact_id,function(rezult){
            $scope.update()
            $rootScope.$broadcast('update_users_online');
            })
        }

         

      $scope.update = function(){
        Contact.getContactList(function(rezult){
                $scope.contact_list = rezult.contact_list;
            })       
      }

      $scope.update();

      $scope.deleteAll = function(){
          Contact.deleteAll(function(rezult){
            $scope.update();
            $rootScope.$broadcast('update_users_online');
            })
        }

         

        $scope.invite_window = function(contact_id){

          
           Room.getUserInfo(contact_id,function(result){ 
            $scope.invited_user = result.user_profile
         });
        
          
              items: {
                src: '#invite_window'
              },
              type: 'inline'
            }, 0);


        }


         

        $scope.submit_invitation = function(){

          
          
         
                 $(document).find('#inv_text').html('');
                 $.magnificPopup.close({
                  items: {
                    src: '#invite_window'
                  }});
          }); 
           


        }



        $scope.select = function(contact_id){
         
            var url = "http://" + local_config.chat_url + "#/" + $rootScope.currentUserId+'/'+contact_id;
            $window.location.href = url;
            Room.invite(contact_id,function(rezult){


            }); 
        }

     

    })

;app.controller('VideoCtrl', function ($scope, $rootScope, $window, $log, Video,$interval, WS, Room) {


         $rootScope.active_cams = {}

         
      $scope.isMyVideoActive = false;

      $scope.showMyVideo = function(){
            var par = { flashvars:"codecOn=true&ww=800&hh=600&fps=20&streamName="+local_config.app_name+'_'+$rootScope.currentUserId+"&url=rtmp://chat.mirbu.com/myapp&micOn=true&type=out" };
            swfobject.embedSWF("Media/chat.swf", "myVideo", "320", "225", "9.0.0", "expressInstall.swf", par);
            $scope.isMyVideoActive = true;

            Video.showMyCam(function(){
                
            })
            
        }

  
      $scope.hideMyVideo = function(){

            $(document).find('#myVideoContainer').html('<div id="myVideo"> </div>');
           
            $scope.isMyVideoActive = false;

            Video.hideMyCam(function(){
                
            })

        }


      $scope.showOpponentVideo = function(user_id){

                var par = { flashvars:"codecOn=true&ww=800&hh=600&fps=20&streamName="+local_config.app_name+'_'+user_id+"&url=rtmp://chat.mirbu.com/myapp&micOn=true&type=in" };  

                if($rootScope.gender=='m') {

                    Room.getBalance().then( function(result){

                        if(result.data.status==1){

                            $rootScope.emptyAccountAlert();
                            
                        } else {

                             swfobject.embedSWF("Media/chat.swf", "opponentVideo", "640", "480", "9.0.0", "expressInstall.swf", par);
                             $rootScope.isOpponentCamEnabled = true;
                             Video.showOpponentCam(function(result){
                               
                                $scope.invite_promise = $interval(function(){

                                    WS.send({ 'action': 'video_charge', 
                                              'user_id': $rootScope.currentUserId, 
                                              'app_name': local_config.app_name, 
                                              'opponent_id': result.user_id, 
                                              'room_id': $rootScope.room_id 
                                            });

                                }, 10000);
                             })

                        }
                    })                

                } else {

                  
                        swfobject.embedSWF("Media/chat.swf", "opponentVideo", "320", "240", "9.0.0", "expressInstall.swf", par);
                }
        
               
            
                        
            }

           

            
        


      $scope.hideOpponentVideo = function(){
       
            swfobject.removeSWF("opponentVideo");
            $(document).find('#oponent_video_container').append('<div id="opponentVideo"> </div>');
            $rootScope.isOpponentCamEnabled = false;
             Video.hideOpponentCam(function(){
                if (angular.isDefined($scope.invite_promise)) {
                    $interval.cancel($scope.invite_promise);
                    $scope.invite_promise = undefined;
                }                
            })          

        }

    $rootScope.$on('close_video',function(event,data){
        $scope.hideOpponentVideo();
        $rootScope.emptyAccountAlert();
    })


    $rootScope.$on('update_cam_indicators',function(event,data){
        if(data.cam_status=='on') {
          $rootScope.active_cams['user_'+data.owner] = true;
        }   else {
          $rootScope.active_cams['user_'+data.owner] = false;
        }
        
        log($rootScope.active_cams);
        if (!event.defaultPrevented && typeof $rootScope.room_participants !== 'undefined') {
            event.defaultPrevented = true;
            for (var i = 0; i < $rootScope.room_participants.length; i++) {
                var val = $rootScope.room_participants[i];
                var arr = val.split('_');
               
                if(arr[1]==data.owner && data.owner!= $rootScope.currentUserId){
                    log(data);
                    if(data.cam_status=='on') { 
                        $rootScope.isOpponentVideoActive = true;
                    } else {
                        $rootScope.isOpponentVideoActive = false;
                    }
                    
                    $rootScope.isOpponentCamEnabled = false;
                    $rootScope.opponent_id = data.owner;
                    
                }
            }
       

       
            
        }

       
    });
     

     

    })

;app.controller('multiInviteCtrl', function ($scope, $rootScope, $window, $log, Video, Online, $interval, $http, Room) {




      $rootScope.notifies = {}  

      $scope.multiInviteWindow = function(){


            Online.getOnline(function(result){

                 $scope.countOnline = result.user_list.length;
                 $scope.listOnline = result.user_list;
                 $.magnificPopup.open({
                  items: {
                    src: '#multi_invite_window'
                  },
                  type: 'inline'
                }, 0);  

                init_wisiwig();

            })         
        }

        
        $scope.collapse = function(){

            $(document).find('.hid_but').on('click',function(event){
                event.preventDefault();
                $(this).closest(".message_girl").toggleClass('hidden_hid');
            });

        }

        $scope.remove = function(id){

           delete $rootScope.notifies[id];

        }

        $scope.goToRoom = function(contact_id,id){
            delete $rootScope.notifies[id];
            var url = "http://" + local_config.chat_url + "#/" + $rootScope.currentUserId+'/'+contact_id;
            $window.location.href = url;
            Room.invite(contact_id,function(rezult){}); 
        }



        $scope.startSending = function(){
            $scope.isSending = true;
            $scope.currentCursor = 0;
            var index = 0;
         

            
            $scope.invite_promise = $interval(function(){
            opponent_id = $scope.listOnline[index].user_id;
            message = $(document).find('#multi_invite_text').html();
            var data = {
                            'app_name': local_config.app_name, 
                            'owner_id': $rootScope.currentUserId, 
                            'opponent_id': opponent_id, 
                            'message': message 
                        };
            $rootScope.$broadcast('multi_invite',data);
              index += 1;  
            }, 1000);
           
            
            
        }

         $scope.block = function(user_id,id){
            alert(user_id+' blocking');
            delete $rootScope.notifies[id];
        }


        $scope.stopSending = function(){
            $scope.isSending = false;
            $scope.currentCursor = 0;

            if (angular.isDefined($scope.invite_promise)) {
                $interval.cancel($scope.invite_promise);
                $scope.invite_promise = undefined;
            }

        }
        
        $rootScope.$on('multi_invite',function(event,data){
            var url = utils.prepare_url(apiconf.api.multi_invitation.url,{});
            $http.post(url,data).success(function(){
                $scope.currentCursor += 1;
                if ($scope.currentCursor==$scope.countOnline){
                    $interval.cancel($scope.invite_promise);
                    $scope.invite_promise = undefined;
                }
            }); 

        })


        $rootScope.$on('show_multi_invite_notification',function(event,data){
            log($rootScope.chat_invitation);
            if(typeof $rootScope.chat_invitation == 'undefined' || $rootScope.chat_invitation == false)
            {
                $rootScope.notifies[data.data.id] = data.data;
            }

        })




 
      
     

    })

;(function () {
  'use strict';

  angular
    .module('AngularChatApp')
    .config(config);


  function config($urlRouterProvider, $stateProvider) {
        $urlRouterProvider.otherwise("/");


        $stateProvider
            .state('anonimous', {

                url: "/",
                templateUrl: "/static/templates/active.html",
                controller: function(){
  
                }
                
            })
            
            .state('registered', {

                url: "/:user",
               
                controller: function(){
                
                }
                
            })          

            .state('active', {

                url: "/:user/:opponent",
               

                controller: function($stateParams, Room, $rootScope, $log){
                       
                
                        $rootScope.$on('connected', function (event, data) {
                            
                            Room.invite($stateParams.opponent,function(rezult){})
                        });
                        
                      

                     

                }
                
            })  


    
  }

})();

;(function () {
  'use strict';

  angular
    .module('AngularChatApp')
    .factory('Auth', Auth);

  Auth.$inject = ['$http', '$window'];

  function Auth($http, $window) {

    var Auth = {
      login: login,
      logout: logout,
      register: register,
      isauth: isauth,
      has_opponent: has_opponent,
    };
    
    return Auth;

        

    function login(username, password) {
      return $http.post('/api/login/', {
        username: username, password: password
      });
 
    }



    function logout(callback) {
      return $http.post('/api/logout/').success(callback); 
    }

    function isauth(callback) {
      var url = utils.prepare_url(apiconf.api.is_auth.url,{})
      return $http.get(url).success(callback); 
    }



    function register(username, password, email) {
        return $http.post('/api/register/', {
        username: username, password: password, email: email
      });
    }


    function has_opponent(callback) {
      var url = utils.prepare_url(apiconf.api.has_opponent.url,{})
      return $http.get(url).success(callback); 
    }

   
  }



})();
;(function () {
  'use strict';

  angular
    .module('AngularChatApp')
    .factory('Online', ['$http', '$rootScope', function($http, $rootScope){
            return {
                        setOnline: setOnline,
                        setOffline: setOffline,
                        getOnline: getOnline,
                        getOnlineExceptContact: getOnlineExceptContact               
                    }
            function setOnline() {
                 
            } ;

            function setOffline() {

            } ;

            function getOnlineExceptContact(callback) {
             
                var url = utils.prepare_url(apiconf.api.get_online_except_contact.url,{'[user_id]':$rootScope.currentUserId});
                return $http.get(url).success(callback); 

            };


            function getOnline(callback) {
             
                var url = utils.prepare_url(apiconf.api.get_online.url,{'[user_id]':$rootScope.currentUserId});
                return $http.get(url).success(callback); 

            };


    }]);


})();
;(function () {
  'use strict';

  angular
    .module('AngularChatApp')
    .factory('Video', ['$http', '$rootScope', function($http, $rootScope){
            return {
                        showMyCam: showMyCam,
                        hideMyCam: hideMyCam,
                        showOpponentCam: showOpponentCam, 
                        hideOpponentCam: hideOpponentCam    
                    }

            function hideOpponentCam(callback) {
                var url = utils.prepare_url(apiconf.api.hide_opponent_cam.url,{
                                                                                '[user_id]':$rootScope.currentUserId,
                                                                                '[room_id]':$rootScope.room_id,
                                                                                '[app_name]': local_config.app_name
                                                                                });
                return $http.get(url).success(callback);                  
            } ;

            function showOpponentCam(callback) {
                var url = utils.prepare_url(apiconf.api.show_opponent_cam.url,{
                                                                                '[user_id]':$rootScope.currentUserId,
                                                                                '[room_id]':$rootScope.room_id,
                                                                                '[app_name]': local_config.app_name
                                                                                });
                return $http.get(url).success(callback);                  
            } ;

            function hideMyCam(callback) {
                var url = utils.prepare_url(apiconf.api.hide_my_cam.url,{
                                                                                '[user_id]':$rootScope.currentUserId,
                                                                                '[app_name]': local_config.app_name
                                                                                });
                return $http.get(url).success(callback); 
            } ;

            function showMyCam(callback) {
             
                var url = utils.prepare_url(apiconf.api.show_my_cam.url,{
                                                                                '[user_id]':$rootScope.currentUserId,
                                                                                '[app_name]': local_config.app_name
                                                                                });
                return $http.get(url).success(callback); 

            };
    }]);


})();
;(function () {
  'use strict';

  angular
    .module('AngularChatApp')
    .factory('Contact', ['$http','$rootScope', function($http,$rootScope){
            return {
                        getContactList: getContactList,
                        delContact: delContact,
                        deleteAll: deleteAll,
                        addContact: addContact,
                        sendInvitation: sendInvitation
                    }

            function getContactList(callback) {
                var url = utils.prepare_url(apiconf.api.get_contact_list.url,{'[user_id]':$rootScope.currentUserId});
                return $http.get(url).success(callback); 

            };

            function delContact(contact_id,callback) {
                 var url = utils.prepare_url(apiconf.api.del_contact.url,{'[owner_id]':$rootScope.currentUserId, '[contact_id]':contact_id});
                 return $http.get(url).success(callback);
            };

            function deleteAll(callback) {
                 var url = utils.prepare_url(apiconf.api.del_all_contacts.url,{'[owner_id]':$rootScope.currentUserId});
                 return $http.get(url).success(callback);
            };
            function addContact(contact_id,callback) {
                             var url = utils.prepare_url(apiconf.api.add_contact.url,{'[owner_id]':$rootScope.currentUserId,'[contact_id]':contact_id});
                             return $http.get(url).success(callback);
            };


                        function sendInvitation(owner_id,contact_id,message,callback) {
                             var url = utils.prepare_url(apiconf.api.send_invitation.url,{});
                             var data = {'app_name':local_config.app_name, 'owner_id':$rootScope.currentUserId,'contact_id':contact_id,  'message': message}
                             return $http.post(url,data).success(callback);
            };


    }]);


})();
;
(function () {
  'use strict';

 app.factory('GoogleTranslate', ['$http','$rootScope','$log','$q', function($http,$rootScope,$log, $q){


            return {
                        translate: translate
                    }


        function translate(langSource, langTarget, text) {
                    var deferredObject = $q.defer();
                    
                    if (text.length > 0) {
                    
                        makeRequest(langSource,langTarget,text).then(function(result){
                               deferredObject.resolve(result.data.data.translations[0].translatedText);
                       
                        },function(errorMsg){
                              deferredObject.reject('Error from google translator! Request is not finished!');
                        });

                    }
                    return deferredObject.promise;
        }


            function makeRequest(langSource,langTarget, message) {
                var apiurl = "https://www.googleapis.com/language/translate/v2?key=" + local_config.google_translator_key +"&source=" + langSource + "&target=" + langTarget + "&q=";
                apiurl = apiurl + encodeURIComponent(message);
                return $http.get(apiurl);

            };

    }]);


})();

;(function () {
  'use strict';

  angular
    .module('AngularChatApp')
    .factory('Room', ['$http','$rootScope', function($http,$rootScope){
            return {
                        invite: invite,
                        getUserInfo: getUserInfo,
                        getMessages: getMessages,
                        sendMessage: sendMessage,
                        showFeather: showFeather,
                        closeRoom: closeRoom,
                        getBalance: getBalance
                    }


            function closeRoom(opponent_id,callback) {
                             var url = utils.prepare_url(apiconf.api.close_chat_room.url,{'[room_id]':$rootScope.room_id,'[opponent_id]':opponent_id});
                             return $http.get(url).success(callback);
                        };


            function showFeather(contact_id,callback) {
                             var url = utils.prepare_url(apiconf.api.show_feather.url,{'[room_id]':$rootScope.room_id,'[opponent_id]':contact_id});
                             return $http.get(url).success(callback);
                        };


            function invite(contact_id,callback) {
                             var url = utils.prepare_url(apiconf.api.invite.url,{'[owner_id]':$rootScope.currentUserId,'[contact_id]':contact_id});
                             return $http.get(url).success(callback);
                        };

            function getUserInfo(contact_id,callback) {
                             var url = utils.prepare_url(apiconf.api.get_profile.url,{'[user_id]':contact_id, '[app_name]':local_config.app_name});
                             return $http.get(url).success(callback);
                        };

            function getMessages(room_id,callback) {
                            var url = utils.prepare_url(apiconf.api.get_messages.url,{'[room_id]':room_id});
                             return $http.get(url).success(callback);
                        };

            function sendMessage(room_id,message,owner_id,participants,gender,callback) {
                            var url = utils.prepare_url(apiconf.api.save_message.url);

                            var data = {'app_name':local_config.app_name,
                                    'owner_id':owner_id,
                                    'room_id':room_id,
                                    'message':message, 
                                    'participants':participants, 
                                    'gender': gender}

                            return $http.post(url, data).success(callback);
                        };


            function getBalance() {
                            var url = utils.prepare_url(apiconf.api.get_balance.url,{'[user_id]':$rootScope.currentUserId});
                             return $http.get(url);
                        };


    }]);


})();
;app.directive('chatInvitation', function() {
    var directive = {};

    directive.restrict = 'E';     directive.template = '<div class="but_invite_block"><p class="show">on</p><a class="but_invite" href="#"><span></span></a><p class="">off</p></div>'

    directive.link = function($scope, element, attrs) {
            attrs.$observe('chat_invitation', function(value) {
               
                   alert('Checked!');   
                })

                element.click(function() {

                    element.find('a').toggleClass('off');
                    element.find('figcaption')
                    $scope.$apply(function() {
                        $scope.chat_invitation = !$scope.chat_invitation
                    })
                })

            }



    return directive;
});
;app.directive('chatTranslate', function() {
    var directive = {};

    directive.restrict = 'E';     directive.template = '<div class="but_invite_block"><p class="show">Translator</p><a class="but_invite off" href="#"><span></span></a></div>'

    directive.link = function($scope, element, attrs) {


                element.click(function() {

                    element.find('a').toggleClass('off');

                    $scope.$apply(function() {
                        $scope.chat_translate = !$scope.chat_translate
                    })
                })

            }



    return directive;
});
;(function () {
  'use strict';

  angular
    .module('AngularChatApp')
    .factory('WS', function($websocket, $rootScope){

      var dataStream = $websocket("ws://"+local_config.ws_server+"/ws");


      dataStream.onMessage(function(message) {
        message = JSON.parse(message.data)
        

        if(message.action=='connected'){
            
            $rootScope.$broadcast('connected');
                   
        }


        if(message.action=='show_new_message_notification'){
            $rootScope.$broadcast('show_new_message_notification', message.data);

        }


        if(message.action=='update_contact'){
            
            $rootScope.$broadcast('update_contact');
                   
        }

        if(message.action=='add_me_in_contact_list'){

            $rootScope.$broadcast('add_me_in_contact_list',{'message':message});

        }

        if(message.action=='put_me_in_room'){
            
            $rootScope.$broadcast('put_me_in_room', message);
                   
        }

        if(message.action=='show_inv_win'){
            
            $rootScope.$broadcast('show_inv_win',{'message':message}); 
                  
        }


        if(message.action=='update_users_online'){
            
            $rootScope.$broadcast('update_users_online');
                   
        }

        if(message.action=='set_me_online'){

            $rootScope.$broadcast('set_me_online',{'message':message});

        }

 


        if(message.action=='update_cam_indicators'){
            
            $rootScope.$broadcast('update_cam_indicators',message);

        }


        if(message.action=='close_room'){
            
            $rootScope.$broadcast('close_room',message);

        }


        if(message.action=='show_multi_invite_notification'){

            $rootScope.$broadcast('show_multi_invite_notification',message);

        }

        if(message.action=='show_feather'){

            $rootScope.$broadcast('show_feather',message);

        }


        if(message.action=='show_invite_notification'){

            $rootScope.$broadcast('show_invite_notification',message);

        }



        if(message.action=='set_me_offline'){

            $rootScope.$broadcast('set_me_offline',{'message':message});

        }



        if(message.action=='close_video'){

            $rootScope.$broadcast('close_video', message);
                   
        }



        if(message.action=='show_message'){


            $rootScope.$broadcast('show_message', {'message':  message});
                   
        }
        
                if(message.action=='put_user_to_room'){

            $rootScope.$broadcast('put_user_to_room', {'message':  message.message});
                   
        }


      });

      dataStream.onOpen(function(message) {
        
      });


      var methods = {

        send: function(mess) {
         
          mess['tpa'] = local_config.app_name
          dataStream.send(JSON.stringify(mess));
        }

      };

      return methods;   

    });


})();
;var scrH = 0;
utils = {
 
        parse_str: function parse_str(pars,str){
            
            for (var key in pars) {
                var f = str.replace(key,pars[key]);
            }
            return f;

        },

        prepare_url: function prepare_url(str,lst){
            for (var key in lst) {
                str = str.replace(key,lst[key])
            }
            str = str.replace('[server]',local_config.signal_server)
            str = str.replace('[app_name]',local_config.app_name)
            if(str.indexOf("http://") == -1) {
                url = 'http://'+str
            } else {
                url = str
            }
            return url


        }

 
}

function scroolldown(){

     scrH = 0;
                setTimeout(function(){
                    $(document).find('.live_write').each(function(index, el) {
                        scrH = scrH + $(this).outerHeight(true);
                    });
                    $('#chat_content').find('.ms_bar').mCustomScrollbar("scrollTo", 'bottom');
                    $('#chat_content').find('.ms_bar').stop().animate({
                        scrollTop: scrH
                    }, 100);
                },400);
        

    
}

function init_wisiwig()
{


    $('.cTextDiv').each( function(index, element)
    {
     
        $(element).wysiwyg({
            classes: 'some-more-classes',
           
            toolbar: 'top-selection',
            buttons: {
                smilies: {
                    title: 'Smilies',
                    image: '\uf118',
                    popup: function( $popup, $button ) {
                            var list_smilies = [
                                    '<img src="Media/smiley/afraid.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/amorous.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/angel.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/angry.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/bored.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/cold.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/confused.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/cross.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/crying.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/devil.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/disappointed.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/dont-know.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/drool.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/embarrassed.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/excited.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/excruciating.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/eyeroll.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/happy.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/hot.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/hug-left.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/hug-right.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/hungry.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/invincible.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/kiss.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/lying.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/meeting.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/nerdy.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/neutral.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/party.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/pirate.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/pissed-off.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/question.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/sad.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/shame.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/shocked.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/shut-mouth.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/sick.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/silent.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/sleeping.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/sleepy.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/stressed.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/thinking.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/tongue.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/uhm-yeah.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/wink.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/working.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/bathing.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/beer.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/boy.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/camera.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/chilli.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/cigarette.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/cinema.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/coffee.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/girl.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/console.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/grumpy.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/in_love.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/internet.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/lamp.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/mobile.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/mrgreen.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/musical-note.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/music.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/phone.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/plate.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/restroom.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/rose.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/search.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/shopping.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/star.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/studying.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/suit.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/surfing.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/thunder.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/tv.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/typing.png" width="16" height="16" alt="" />',
                                    '<img src="Media/smiley/writing.png" width="16" height="16" alt="" />'
                            ];
                            var $smilies = $('<div/>').addClass('wysiwyg-plugin-smilies')
                                                      .attr('unselectable','on');
                            $.each( list_smilies, function(index,smiley) {
                                if( index != 0 )
                                    $smilies.append(' ');
                                var $image = $(smiley).attr('unselectable','on');
                               
                                var imagehtml = ' '+$('<div/>').append($image.clone()).html()+' ';
                                $image
                                    .css({ cursor: 'pointer' })
                                    .click(function(event) {
                                        $(element).wysiwyg('shell').insertHTML(imagehtml);
                                    })
                                    .appendTo( $smilies );
                            });
                            var $container = $(element).wysiwyg('container');
                            $smilies.css({ maxWidth: parseInt($container.width()*0.95)+'px' });
                            $popup.append( $smilies );
                           
                            var $toolbar = $button.parents( '.wysiwyg-toolbar' );
                            if( ! $toolbar.length )
                                return ;
                            return {
                                left: parseInt( ($toolbar.outerWidth() - $popup.outerWidth()) / 2 ),
                                top: $toolbar.hasClass('wysiwyg-toolbar-bottom') ? ($container.outerHeight() - parseInt($button.outerHeight()/4)) : (parseInt($button.outerHeight()/4) - $popup.height())
                            };
                           },
                   
                    showselection: index == 2 ? true : false   
                },
               
                bold: {
                    title: 'Bold (Ctrl+B)',
                    image: '\uf032',
                    hotkey: 'b'
                },
                italic: {
                    title: 'Italic (Ctrl+I)',
                    image: '\uf033',
                    hotkey: 'i'
                },
              
                forecolor: {
                    title: 'Text color',
                    image: '\uf1fc'
                },
                highlight: {
                    title: 'Background color',
                    image: '\uf043'
                },
                
            },
           
            submit: {
                title: 'Submit',
                image: '\uf00c'
            },
           
            selectImage: 'Click or drop image',
            placeholderUrl: 'www.example.com',
            placeholderEmbed: '<embed/>',
            maxImageSize: [600,200],
            onKeyDown: function( key, character, shiftKey, altKey, ctrlKey, metaKey ) {
                           
                           
                           
                           
                           
            onKeyPress: function( key, character, shiftKey, altKey, ctrlKey, metaKey ) {
                        },
            onKeyUp: function( key, character, shiftKey, altKey, ctrlKey, metaKey ) {
                        },
            onAutocomplete: function( typed, key, character, shiftKey, altKey, ctrlKey, metaKey ) {
                            if( typed.indexOf('@') == 0 )
                            {
                                var usernames = [
                                        'Evelyn',
                                        'Harry',
                                        'Amelia',
                                        'Oliver',
                                        'Isabelle',
                                        'Eddie',
                                        'Editha',
                                        'Jacob',
                                        'Emily',
                                        'George',
                                        'Edison'
                                    ];
                                var $list = $('<div/>').addClass('wysiwyg-plugin-list')
                                                       .attr('unselectable','on');
                                $.each( usernames, function( index, username ) {
                                    if( username.toLowerCase().indexOf(typed.substring(1).toLowerCase()) !== 0 )
                                        return;
                                    var $link = $('<a/>').attr('href','#')
                                                        .text( username )
                                                        .click(function(event) {
                                                            var url = 'http://example.com/user/' + username,
                                                                html = '<a href="' + url + '">@' + username + '</a> ';
                                                            var editor = $(element).wysiwyg('shell');
                                                           
                                                            editor.expandSelection( typed.length, 0 ).insertHTML( html );
                                                            editor.closePopup().getElement().focus();
                                                           
                                                            event.stopPropagation();
                                                            event.preventDefault();
                                                            return false;
                                                        });
                                    $list.append( $link );
                                });
                                if( $list.children().length )
                                {
                                    if( key == 13 )
                                    {
                                        $list.children(':first').click();
                                        return false;
                                    }
                                   
                                    else if( character || key == 8 )
                                        return $list;
                                }
                            }
                        },
            onImageUpload: function( insert_image ) {
                            
                           
                            var iframe_name = 'legacy-uploader-' + Math.random().toString(36).substring(2);
                            $('<iframe>').attr('name',iframe_name)
                                         .load(function() {
                                           
                                            var iframe = this;
                                            var iframedoc = iframe.contentDocument ? iframe.contentDocument :
                                                           (iframe.contentWindow ? iframe.contentWindow.document : iframe.document);
                                            var iframebody = iframedoc.getElementsByTagName('body')[0];
                                            var image_url = iframebody.innerHTML;
                                            insert_image( image_url );
                                            $(iframe).remove();
                                         })
                                         .appendTo(document.body);
                            var $input = $(this);
                            $input.attr('name','upload-filename')
                                  .parents('form')
                                  .attr('action','/script.php')
                                  .attr('method','POST')
                                  .attr('enctype','multipart/form-data')
                                  .attr('target',iframe_name)
                                  .submit();
                        },
            forceImageUpload: false,   
            videoFromUrl: function( url ) {
               

               
                var youtube_match = url.match( /^(?:http(?:s)?:\/\/)?(?:[a-z0-9.]+\.)?(?:youtu\.be|youtube\.com)\/(?:(?:watch)?\?(?:.*&)?v(?:i)?=|(?:embed|v|vi|user)\/)([^\?&\"'>]+)/ );
                if( youtube_match && youtube_match[1].length == 11 )
                    return '<iframe src="//www.youtube.com/embed/' + youtube_match[1] + '" width="640" height="360" frameborder="0" allowfullscreen></iframe>';

               
                var vimeo_match = url.match( /^(?:http(?:s)?:\/\/)?(?:[a-z0-9.]+\.)?vimeo\.com\/([0-9]+)$/ );
                if( vimeo_match )
                    return '<iframe src="//player.vimeo.com/video/' + vimeo_match[1] + '" width="640" height="360" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';

               
                var dailymotion_match = url.match( /^(?:http(?:s)?:\/\/)?(?:[a-z0-9.]+\.)?dailymotion\.com\/video\/([0-9a-z]+)$/ );
                if( dailymotion_match )
                    return '<iframe src="//www.dailymotion.com/embed/video/' + dailymotion_match[1] + '" width="640" height="360" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';

               
            }
        })
        .change(function() {
            if( typeof console != 'undefined' )
                ;//console.log( 'change' );
        })
        .focus(function() {
            if( typeof console != 'undefined' )
                ;//console.log( 'focus' );
        })
        .blur(function() {
            if( typeof console != 'undefined' )
                ;//console.log( 'blur' );
        });
    });


    var isNODE;

    function getCaretPosition(editableDiv) {
        var caretPos = 0,
            sel, range;
        if (window.getSelection) {
            sel = window.getSelection();
            if ( !! sel.anchorNode) {
                isNODE = sel.baseNode;
            }
            if (sel.rangeCount) {
                range = sel.getRangeAt(0);
                if (range.commonAncestorContainer.parentNode == editableDiv) {
                    caretPos = range.endOffset;
                }
            }
        } else if (document.selection && document.selection.createRange) {
            range = document.selection.createRange();
            if (range.parentElement() == editableDiv) {
                var tempEl = document.createElement("span");
                editableDiv.insertBefore(tempEl, editableDiv.firstChild);
                var tempRange = range.duplicate();
                tempRange.moveToElementText(tempEl);
                tempRange.setEndPoint("EndToEnd", range);
                caretPos = tempRange.html.length;
            }
        }
        return caretPos;
    }

$('#chat_content').find(".cTextDiv").keyup(function(event) {
    
    if (event.keyCode == 13) {
        $('#chat_content').find(".message_block .send").click();
    }
});



}




function log() {
  try {
    console.log.apply(console, arguments);                 
  }
  catch(e) {                                               
    try {
      opera.postError.apply(opera, arguments);             
    }
    catch(e){
      alert(Array.prototype.join.call( arguments, " "));   
    }
  }
}







    
